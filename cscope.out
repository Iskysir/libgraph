cscope 15 $HOME/Downloads/libgraph-1.0.2               0000876994
	@config.h

5 
	#HAVE_ATEXIT
 1

	)

8 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_FCNTL_H
 1

	)

17 
	#HAVE_FORK
 1

	)

20 
	#HAVE_INTTYPES_H
 1

	)

23 
	#HAVE_LIBM
 1

	)

26 
	#HAVE_MALLOC
 1

	)

29 
	#HAVE_MEMORY_H
 1

	)

32 
	#HAVE_PUTENV
 1

	)

35 
	#HAVE_RINT
 1

	)

38 
	#HAVE_STDINT_H
 1

	)

41 
	#HAVE_STDLIB_H
 1

	)

44 
	#HAVE_STRDUP
 1

	)

47 
	#HAVE_STRINGS_H
 1

	)

50 
	#HAVE_STRING_H
 1

	)

53 
	#HAVE_SYS_STAT_H
 1

	)

56 
	#HAVE_SYS_TYPES_H
 1

	)

59 
	#HAVE_TERMIOS_H
 1

	)

62 
	#HAVE_UNISTD_H
 1

	)

65 
	#HAVE_VFORK
 1

	)

71 
	#HAVE_VPRINTF
 1

	)

74 
	#HAVE_WORKING_FORK
 1

	)

77 
	#HAVE_WORKING_VFORK
 1

	)

80 
	#PACKAGE
 "libgøph"

	)

83 
	#PACKAGE_BUGREPORT
 "Áøz_ms@ªdiffmaû.com"

	)

86 
	#PACKAGE_NAME
 "libgøph"

	)

89 
	#PACKAGE_STRING
 "libgøph 1.0.2"

	)

92 
	#PACKAGE_TARNAME
 "libgøph"

	)

95 
	#PACKAGE_VERSION
 "1.0.2"

	)

98 
	#RETSIGTYPE
 

	)

101 
	#STDC_HEADERS
 1

	)

104 
	#VERSION
 "1.0.2"

	)

	@graphics.h

26 #i‚de‡
GRAPHICS_H


27 
	#GRAPHICS_H
 1

	)

30 
	~<SDL/SDL.h
>

31 
	~<uni°d.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sig«l.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<time.h
>

39 #ifde‡
__˝lu•lus


47 
	e_drivî
{
DETECT
=0, 
USER
, 
VGA
=9};

48 
	egøphics_modes
{
VGALO
=0, 
VGAMED
, 
VGAHI
, 
VGAMAX
, 
VGA640
, 
VGA800
, 
VGA1024
, 
USERMODE
};

52 
	e_cﬁ‹
{
BLACK
=0, 
BLUE
, 
GREEN
, 
CYAN
, 
RED
, 
MAGENTA
, 
BROWN
, 
LIGHTGRAY
, 
DARKGRAY
,
LIGHTBLUE
, 
LIGHTGREEN
, 
LIGHTCYAN
, 
LIGHTRED
, 
LIGHTMAGENTA
, 
YELLOW
, 
WHITE
};

57 
SDL_SurÁ˚
 *
s¸ìn
;

58 
SDL_SurÁ˚
 *
F⁄t_surÁ˚
;

59 
Uöt32
 
_fgcﬁ‹
, 
_bgcﬁ‹
, 
_f⁄tcﬁ‹
;

60 
pid_t
 
_pid
;

65 
öôgøph
(*
gøphdrivî
,*
gøphmode
,*
∑thtodrivî
);

66 
˛o£gøph
();

67 
£tgøphmode
(
gmode
);

68 
gëgøphmode
();

69 
ª°‹e¸tmode
();

70 
gëmaxx
();

71 
gëmaxy
();

72 
puçixñ
(
x
, 
y
, 
cﬁ‹
);

73 
gëpixñ
(, );

74 
£tbkcﬁ‹
(
cﬁ‹
);

75 
gëbkcﬁ‹
();

76 
£tcﬁ‹
(
cﬁ‹
);

77 
gëcﬁ‹
();

78 
gëmaxcﬁ‹
();

79 * 
gëdrivî«me
();

80 * 
gëmodíame
(
mode_numbî
);

81 
gëmaxmode
();

82 
dëe˘gøph
(* 
gøphdrivî
, * 
gøphmode
);

83 
gëmodî™ge
(
gøphdrivî
, * 
lomode
, * 
himode
);

84 
dñay
();

85 
£tf⁄tcﬁ‹
(
cﬁ‹
);

86 
gëf⁄tcﬁ‹
();

93 
öôülize_£âögs
 ();

94 
m≠pixñ
(, );

95 
˛ùpixñ
(*, *);

97 
m≠w‹d
(,,);

98 
m≠vw‹d
(,,);

99 
cﬁ‹ªv
(c⁄° 
Uöt8
);

100 
Uöt8
 
cﬁ‹å™s
(const );

101 
˘æbªak
();

102 
öth™dÀr
();

103 
ß„_upd©e
(
t›
, 
À·
, 
right
, 
bŸtom
);

106 
	#CHECK_INITIALIZATION
\

107 i‡(!
	`gëív
("LIBGRAPHICS_ACTIVE")) \

109 
	`Ârötf
(
°dîr
, "*** The graphics system hasÇot been initialized!\n"); \

110 
	`Ârötf
(
°dîr
, "*** Call initgraph() beforeÅryingÅo use graphics functions.\n"); \

111 
	`exô
(-1); \

112 }

	)

114 °ru˘ {
x
;
y
;}
CP
;

116 
	~"gπext.h
"

117 
	~"sh≠es.h
"

118 
	~"pﬁyg⁄.h
"

120 #ifde‡
__˝lu•lus


	@grtext.h

25 
	~<SDL/SDL.h
>

26 
	~<SDL/SDL_image.h
>

27 
	~<°dio.h
>

28 
	~<°d¨g.h
>

29 
	~<°dlib.h
>

30 
	~<˘y≥.h
>

31 
	~<uni°d.h
>

32 
	~<ãrmios.h
>

33 
	~<°rög.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	#gëch
 
grgëch


39 
	#gëche
 
grgëche


40 
	#¥ötf
 
gΩrötf


	)

41 
	#sˇnf
 
grsˇnf


	)

42 
	#putch¨
 
gΩutch¨


	)

43 
	#gëch¨
 
grgëch¨


	)

44 
	#SCAN_BUF
 256

	)

49 
ouâext
(* 
ãxt°rög
);

50 
ouâextxy
(
x
, 
y
, * 
ãxt°rög
);

51 
ãxtheight
 (*
ãxt°rög
);

52 
ãxtwidth
 (*
ãxt°rög
);

57 
grgëch
();

58 
grgëche
();

59 
gΩrötf
(c⁄° * 
ãxt
,...);

60 
grsˇnf
(c⁄° * 
ãxt
,...);

61 
gΩutch¨
();

62 
grgëch¨
();

71 
SDL_SurÁ˚
 *
	mSurÁ˚
;

72 
	mCh¨Pos
[512];

73 
	mh
;

74 } 
	tSF⁄t_F⁄tInfo
;

77 
SF⁄t_F⁄tInfo
 
	gI¡î«lF⁄t
;

82 
SDL_SurÁ˚
 *
s¸ìn
;

83 
Uöt32
 
_fgcﬁ‹
, 
_bgcﬁ‹
;

87 °ru˘ {
	mx
; 
	my
;}
	gTP
;

95 
InôF⁄t
 (
SDL_SurÁ˚
 *
F⁄t
);

96 
InôF⁄t2
(
SF⁄t_F⁄tInfo
 *
F⁄t
);

97 
Uöt32
 
GëPixñ
(
SDL_SurÁ˚
 *
SurÁ˚
, 
Söt32
 
X
, Söt32 
Y
);

103 
MPutSåög
 (*
ãxt
);

104 
MPutSåög2
(
SF⁄t_F⁄tInfo
 *
F⁄t
, *
ãxt
);

111 
F⁄t_I≈ut
(*
öput
, 
num
);

116 
make•a˚
(
SF⁄t_F⁄tInfo
 *
F⁄t
, 
ch
);

119 
	#CHECK_INITIALIZATION
 \

120 i‡(!
	`gëív
("LIBGRAPHICS_ACTIVE"))\

122 
	`Ârötf
(
°dîr
, "*** The graphics system hasÇot been initialized!\n"); \

123 
	`Ârötf
(
°dîr
, "*** Call initgraph() beforeÅryingÅo use graphics functions.\n"); \

124 
	`exô
(-1); \

125 }

	)

	@guile-libgraph.c

24 
	~<gøphics.h
>

25 
	~<libguûe.h
>

27 
	#SCM_INUMR
(
X
Ë
	`SCM_INUM
 (
	`scm_öexa˘_to_exa˘
 (X))

	)

30 
scm_t_bôs
 
	gs¸ìn_èg
;

35 
	#FUNC_NAME
 "öôgøph"

	)

36 
SCM
 
	$scm_öôgøph
(
SCM
 
drivî
, SCM 
mode
, SCM 
∑th_to_drivî
)

38 
gd
, 
gm
;

39 
	`SCM_VALIDATE_INUM
 (1, 
drivî
);

40 
	`SCM_VALIDATE_INUM
 (2, 
mode
);

42 
gd
 = 
	`SCM_INUM
 (
drivî
);

43 
gm
 = 
	`SCM_INUM
 (
mode
);

44 
	`öôgøph
(&
gd
, &
gm
, 0);

46  
SCM_UNSPECIFIED
;

47 
	}
}

48 #unde‡
FUNC_NAME


51 
	#FUNC_NAME
 "˛o£gøph"

	)

52 
SCM
 
	$scm_˛o£gøph
 ()

54 
	`˛o£gøph
 ();

55  
SCM_UNSPECIFIED
;

56 
	}
}

57 #unde‡
FUNC_NAME


60 
	#FUNC_NAME
 "dëe˘gøph"

	)

61 
SCM
 
	$scm_dëe˘gøph
 (
SCM
 
drivî
, SCM 
mode
)

63 
gd
, 
gm
;

64 
	`SCM_VALIDATE_INUM
 (1, 
drivî
);

65 
	`SCM_VALIDATE_SYMBOL
 (2, 
mode
);

67 
gd
 = 
	`SCM_INUM
 (
drivî
);

68 
	`dëe˘gøph
 (&
gd
, &
gm
);

69 
	`scm_c_deföe
 (
	`SCM_SYMBOL_CHARS
 (
mode
), 
	`SCM_MAKINUM
 (
gm
));

70  
SCM_UNSPECIFIED
;

71 
	}
}

72 #unde‡
FUNC_NAME


75 
	#FUNC_NAME
 "£tgøphmode"

	)

76 
SCM
 
	$scm_£tgøphmode
 (
SCM
 
mode
)

78 
	`SCM_VALIDATE_INUM
 (1, 
mode
);

79 
	`£tgøphmode
 (
	`SCM_INUM
 (
mode
));

80  
SCM_UNSPECIFIED
;

81 
	}
}

82 #unde‡
FUNC_NAME


85 
	#FUNC_NAME
 "gëgøphmode"

	)

86 
SCM
 
	$scm_gëgøphmode
 ()

88  
	`SCM_MAKINUM
 (
	`gëgøphmode
 ());

89 
	}
}

90 #unde‡
FUNC_NAME


92 
	#FUNC_NAME
 "ª°‹e¸tmode"

	)

93 
SCM
 
	$scm_ª°‹e¸tmode
 ()

95 
	`ª°‹e¸tmode
 ();

96  
SCM_UNSPECIFIED
;

97 
	}
}

98 #unde‡
FUNC_NAME


101 
	#FUNC_NAME
 "gëmaxx"

	)

102 
SCM
 
	$scm_gëmaxx
 ()

104  
	`SCM_MAKINUM
 (
	`gëmaxx
 ());

105 
	}
}

106 #unde‡
FUNC_NAME


109 
	#FUNC_NAME
 "gëmaxy"

	)

110 
SCM
 
	$scm_gëmaxy
 ()

112  
	`SCM_MAKINUM
 (
	`gëmaxy
 ());

113 
	}
}

114 #unde‡
FUNC_NAME


117 
	#FUNC_NAME
 "˛órdevi˚"

	)

118 
SCM
 
	$scm_˛órdevi˚
 ()

120 
	`˛órdevi˚
();

121  
SCM_UNSPECIFIED
;

122 
	}
}

123 #unde‡
FUNC_NAME


126 
	#FUNC_NAME
 "puçixñ"

	)

127 
SCM
 
	$scm_puçixñ
 (
SCM
 
x
, SCM 
y
, SCM 
cﬁ‹
)

129 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

130 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

131 
	`SCM_VALIDATE_INUM
 (3, 
cﬁ‹
);

133 
	`puçixñ
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
), 
	`SCM_INUM
 (
cﬁ‹
));

134  
SCM_UNSPECIFIED
;

135 
	}
}

136 #unde‡
FUNC_NAME


139 
	#FUNC_NAME
 "gëpixñ"

	)

140 
SCM
 
	$scm_gëpixñ
 (
SCM
 
x
, SCM 
y
)

142 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

143 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

145  
	`SCM_MAKINUM
 (
	`gëpixñ
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
)));

146 
	}
}

147 #unde‡
FUNC_NAME


150 
	#FUNC_NAME
 "£tcﬁ‹"

	)

151 
SCM
 
	$scm_£tcﬁ‹
 (
SCM
 
cﬁ‹
)

153 
	`SCM_VALIDATE_INUM
 (1, 
cﬁ‹
);

154 
	`£tcﬁ‹
 (
	`SCM_INUM
 (
cﬁ‹
));

155  
SCM_UNSPECIFIED
;

156 
	}
}

157 #unde‡
FUNC_NAME


160 
	#FUNC_NAME
 "gëcﬁ‹"

	)

161 
SCM
 
	$scm_gëcﬁ‹
 ()

163  
	`SCM_MAKINUM
 (
	`gëcﬁ‹
 ());

164 
	}
}

165 #unde‡
FUNC_NAME


168 
	#FUNC_NAME
 "£tbkcﬁ‹"

	)

169 
SCM
 
	$scm_£tbkcﬁ‹
 (
SCM
 
cﬁ‹
)

171 
	`SCM_VALIDATE_INUM
 (1, 
cﬁ‹
);

172 
	`£tbkcﬁ‹
 (
	`SCM_INUM
 (
cﬁ‹
));

173  
SCM_UNSPECIFIED
;

174 
	}
}

175 #unde‡
FUNC_NAME


178 
	#FUNC_NAME
 "gëbkcﬁ‹"

	)

179 
SCM
 
	$scm_gëbkcﬁ‹
 ()

181  
	`SCM_MAKINUM
 (
	`gëbkcﬁ‹
 ());

182 
	}
}

183 #unde‡
FUNC_NAME


186 
	#FUNC_NAME
 "gëx"

	)

187 
SCM
 
	$scm_gëx
 ()

189  
	`SCM_MAKINUM
 (
	`gëx
 ());

190 
	}
}

191 #unde‡
FUNC_NAME


194 
	#FUNC_NAME
 "gëy"

	)

195 
SCM
 
	$scm_gëy
 ()

197  
	`SCM_MAKINUM
 (
	`gëy
 ());

198 
	}
}

199 #unde‡
FUNC_NAME


202 
	#FUNC_NAME
 "movëo"

	)

203 
SCM
 
	$scm_movëo
 (
SCM
 
x
, SCM 
y
)

205 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

206 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

207 
	`movëo
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
));

208  
SCM_UNSPECIFIED
;

209 
	}
}

210 #unde‡
FUNC_NAME


212 
	#FUNC_NAME
 "movîñ"

	)

213 
SCM
 
	$scm_movîñ
 (
SCM
 
dx
, SCM 
dy
)

215 
	`SCM_VALIDATE_NUMBER
 (1, 
dx
);

216 
	`SCM_VALIDATE_NUMBER
 (2, 
dy
);

217 
	`movîñ
 (
	`SCM_INUMR
 (
dx
), SCM_INUMR (
dy
));

218  
SCM_UNSPECIFIED
;

219 
	}
}

220 #unde‡
FUNC_NAME


223 
	#FUNC_NAME
 "£tf⁄tcﬁ‹"

	)

224 
SCM
 
	$scm_£tf⁄tcﬁ‹
 (
SCM
 
cﬁ‹
)

226 
	`SCM_VALIDATE_INUM
 (1, 
cﬁ‹
);

227 
	`£tf⁄tcﬁ‹
 (
	`SCM_INUM
 (
cﬁ‹
));

228  
SCM_UNSPECIFIED
;

229 
	}
}

230 #unde‡
FUNC_NAME


233 
	#FUNC_NAME
 "gëf⁄tcﬁ‹"

	)

234 
SCM
 
	$scm_gëf⁄tcﬁ‹
 ()

236  
	`SCM_MAKINUM
 (
	`gëf⁄tcﬁ‹
 ());

237 
	}
}

238 #unde‡
FUNC_NAME


241 
	#FUNC_NAME
 "löe"

	)

242 
SCM
 
	$scm_löe
 (
SCM
 
x1
, SCM 
y1
, SCM 
x2
, SCM 
y2
)

244 
	`SCM_VALIDATE_NUMBER
 (1, 
x1
);

245 
	`SCM_VALIDATE_NUMBER
 (2, 
y1
);

246 
	`SCM_VALIDATE_NUMBER
 (3, 
x2
);

247 
	`SCM_VALIDATE_NUMBER
 (4, 
y1
);

249 
	`löe
 (
	`SCM_INUMR
 (
x1
), SCM_INUMR (
y1
), SCM_INUMR (
x2
),\

250 
	`SCM_INUMR
 (
y2
));

251  
SCM_UNSPECIFIED
;

252 
	}
}

253 #unde‡
FUNC_NAME


256 
	#FUNC_NAME
 "löëo"

	)

257 
SCM
 
	$scm_löëo
 (
SCM
 
x
, SCM 
y
)

259 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

260 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

262 
	`löëo
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
));

263  
SCM_UNSPECIFIED
;

264 
	}
}

265 #unde‡
FUNC_NAME


268 
	#FUNC_NAME
 "löîñ"

	)

269 
SCM
 
	$scm_löîñ
 (
SCM
 
dx
, SCM 
dy
)

271 
	`SCM_VALIDATE_NUMBER
 (1, 
dx
);

272 
	`SCM_VALIDATE_NUMBER
 (2, 
dy
);

274 
	`löîñ
 (
	`SCM_INUMR
 (
dx
), SCM_INUMR (
dy
));

275  
SCM_UNSPECIFIED
;

276 
	}
}

277 #unde‡
FUNC_NAME


280 
	#FUNC_NAME
 "gëlöe£âögs"

	)

281 
SCM
 
	$gr_gëlöe£âögs
 ()

283 
löe£âög°y≥
 
£âögs
;

284 
	`gëlöe£âögs
 (&
£âögs
);

285  
	`scm_li°_3
 (
	`SCM_MAKINUM
 (
£âögs
.
löe°yÀ
),

286 
	`SCM_MAKINUM
 (
£âögs
.
u∑âîn
),

287 
	`SCM_MAKINUM
 (
£âögs
.
thick√ss
));

288 
	}
}

289 #unde‡
FUNC_NAME


292 
	#FUNC_NAME
 "£éöe°yÀ"

	)

293 
SCM
 
	$gr_£éöe°yÀ
 (
SCM
 
löe°yÀ
, SCM 
u∑âîn
, SCM 
thick√ss
)

295 
	`SCM_VALIDATE_INUM
 (1, 
löe°yÀ
);

296 
	`SCM_VALIDATE_INUM
 (2, 
u∑âîn
);

297 
	`SCM_VALIDATE_INUM
 (3, 
thick√ss
);

298 
	`£éöe°yÀ
 (
	`SCM_INUM
 (
löe°yÀ
),

299 
	`SCM_INUM
 (
u∑âîn
),

300 
	`SCM_INUM
 (
thick√ss
));

301  
SCM_UNSPECIFIED
;

302 
	}
}

303 #unde‡
FUNC_NAME


306 
	#FUNC_NAME
 "cú˛e"

	)

307 
SCM
 
	$scm_cú˛e
 (
SCM
 
xc
, SCM 
yc
, SCM 
ødius
)

309 
	`SCM_VALIDATE_NUMBER
 (1, 
xc
);

310 
	`SCM_VALIDATE_NUMBER
 (2, 
yc
);

311 
	`SCM_VALIDATE_INUM
 (3, 
ødius
);

313 
	`cú˛e
 (
	`SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), 
	`SCM_INUM
 (
ødius
));

314  
SCM_UNSPECIFIED
;

315 
	}
}

316 #unde‡
FUNC_NAME


318 
	#FUNC_NAME
 "¨c"

	)

319 
SCM
 
scm_¨c
 (SCM 
xc
, SCM 
yc
, SCM 
°™gÀ
, SCM 
íd™gÀ
,\

320 
SCM
 
ødius
)

322 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

323 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

324 
SCM_VALIDATE_NUMBER
 (3, 
°™gÀ
);

325 
SCM_VALIDATE_NUMBER
 (4, 
íd™gÀ
);

326 
SCM_VALIDATE_NUMBER
 (5, 
ødius
);

328 
¨c
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
°™gÀ
),\

329 
SCM_INUMR
 (
íd™gÀ
), SCM_INUMR (
ødius
));

330  
	gSCM_UNSPECIFIED
;

332 #unde‡
FUNC_NAME


335 
	#FUNC_NAME
 "põ¶i˚"

	)

336 
SCM
 
scm_põ¶i˚
 (SCM 
xc
, SCM 
yc
, SCM 
°™gÀ
, SCM 
íd™gÀ
,\

337 
SCM
 
ødius
)

339 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

340 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

341 
SCM_VALIDATE_NUMBER
 (3, 
°™gÀ
);

342 
SCM_VALIDATE_NUMBER
 (4, 
íd™gÀ
);

343 
SCM_VALIDATE_NUMBER
 (5, 
ødius
);

345 
põ¶i˚
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
°™gÀ
),\

346 
SCM_INUMR
 (
íd™gÀ
), SCM_INUMR (
ødius
));

347  
	gSCM_UNSPECIFIED
;

349 #unde‡
FUNC_NAME


352 
	#FUNC_NAME
 "ª˘™gÀ"

	)

353 
SCM
 
	$scm_ª˘™gÀ
 (
SCM
 
À·
, SCM 
t›
, SCM 
right
, SCM 
bŸtom
)

355 
	`SCM_VALIDATE_NUMBER
 (1, 
À·
);

356 
	`SCM_VALIDATE_NUMBER
 (2, 
t›
);

357 
	`SCM_VALIDATE_NUMBER
 (3, 
right
);

358 
	`SCM_VALIDATE_NUMBER
 (4, 
bŸtom
);

359 
	`ª˘™gÀ
 (
	`SCM_INUMR
 (
À·
), SCM_INUMR (
t›
), SCM_INUMR (
right
),\

360 
	`SCM_INUMR
 (
bŸtom
));

361  
SCM_UNSPECIFIED
;

362 
	}
}

363 #unde‡
FUNC_NAME


366 
	#FUNC_NAME
 "døwpﬁy"

	)

367 
SCM
 
	$scm_døwpﬁy
 (
SCM
 
pﬁypoöts
)

369 
≈
, *
µ
, 
i
;

370 
SCM
 
cuº
;

371 
	`SCM_ASSERT
 (
	`scm_li°_p
(
pﬁypoöts
Ë=
SCM_BOOL_T
,Öolypoints,

372 
SCM_ARG1
, 
FUNC_NAME
);

373 
≈
 = 
	`scm_ûígth
 (
pﬁypoöts
) / 2;

374 
µ
 = 
	`ˇŒoc
 (
≈
*2, ());

375 
i
=0; i < 
≈
*2; i++)

377 
cuº
 = 
	`SCM_CAR
 (
pﬁypoöts
);

378 
	`SCM_VALIDATE_NUMBER
 (2, 
cuº
);

379 
µ
[
i
] = 
	`SCM_INUMR
 (
cuº
);

380 
pﬁypoöts
 = 
	`SCM_CDR
 (polypoints);

382 
	`døwpﬁy
 (
≈
, 
µ
);

383  
SCM_UNSPECIFIED
;

384 
	}
}

385 #unde‡
FUNC_NAME


387 
	#FUNC_NAME
 "fûÕﬁy"

	)

388 
SCM
 
	$scm_fûÕﬁy
 (
SCM
 
pﬁypoöts
)

390 
≈
, *
µ
, 
i
;

391 
SCM
 
cuº
;

392 
	`SCM_ASSERT
 (
	`scm_li°_p
(
pﬁypoöts
Ë=
SCM_BOOL_T
,Öolypoints,

393 
SCM_ARG1
, 
FUNC_NAME
);

394 
≈
 = 
	`scm_ûígth
 (
pﬁypoöts
) / 2;

395 
µ
 = 
	`ˇŒoc
 (
≈
*2, ());

396 
i
=0; i < 
≈
*2; i++)

398 
cuº
 = 
	`SCM_CAR
 (
pﬁypoöts
);

399 
	`SCM_VALIDATE_NUMBER
 (2, 
cuº
);

400 
µ
[
i
] = 
	`SCM_INUMR
 (
cuº
);

401 
pﬁypoöts
 = 
	`SCM_CDR
 (polypoints);

403 
	`fûÕﬁy
 (
≈
, 
µ
);

404  
SCM_UNSPECIFIED
;

405 
	}
}

406 #unde‡
FUNC_NAME


409 
	#FUNC_NAME
 "ñlù£"

	)

410 
SCM
 
scm_ñlù£
 (SCM 
xc
, SCM 
yc
, SCM 
°™gÀ
,\

411 
SCM
 
íd™gÀ
, SCM 
xødius
, SCM 
yødius
)

413 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

414 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

415 
SCM_VALIDATE_NUMBER
 (3, 
°™gÀ
);

416 
SCM_VALIDATE_NUMBER
 (4, 
íd™gÀ
);

417 
SCM_VALIDATE_NUMBER
 (5, 
xødius
);

418 
SCM_VALIDATE_NUMBER
 (6, 
yødius
);

420 
ñlù£
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
°™gÀ
),\

421 
SCM_INUMR
 (
íd™gÀ
), SCM_INUMR (
xødius
), SCM_INUMR (
yødius
));

422  
	gSCM_UNSPECIFIED
;

424 #unde‡
FUNC_NAME


427 
	#FUNC_NAME
 "fûÀŒù£"

	)

428 
SCM
 
scm_fûÀŒù£
 (SCM 
xc
, SCM 
yc
, SCM 
xødius
,\

429 
SCM
 
yødius
)

431 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

432 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

433 
SCM_VALIDATE_NUMBER
 (5, 
xødius
);

434 
SCM_VALIDATE_NUMBER
 (6, 
yødius
);

436 
fûÀŒù£
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
xødius
),\

437 
SCM_INUMR
 (
yødius
));

438  
	gSCM_UNSPECIFIED
;

440 #unde‡
FUNC_NAME


443 
	#FUNC_NAME
 "gíñlù£"

	)

444 
SCM
 
scm_gíñlù£
 (SCM 
xc
, SCM 
yc
, SCM 
xødius
,\

445 
SCM
 
yødius
, SCM 
™gÀ
)

447 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

448 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

449 
SCM_VALIDATE_NUMBER
 (3, 
xødius
);

450 
SCM_VALIDATE_NUMBER
 (4, 
yødius
);

451 
SCM_VALIDATE_NUMBER
 (5, 
™gÀ
);

453 
gíñlù£
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
xødius
),\

454 
SCM_INUMR
 (
yødius
), SCM_INUMR (
™gÀ
));

456  
	gSCM_UNSPECIFIED
;

458 #unde‡
FUNC_NAME


462 
	#FUNC_NAME
 "£˘‹"

	)

463 
SCM
 
scm_£˘‹
 (SCM 
xc
, SCM 
yc
, SCM 
°™gÀ
,\

464 
SCM
 
íd™gÀ
, SCM 
xødius
, SCM 
yødius
)

466 
SCM_VALIDATE_NUMBER
 (1, 
xc
);

467 
SCM_VALIDATE_NUMBER
 (2, 
yc
);

468 
SCM_VALIDATE_NUMBER
 (3, 
°™gÀ
);

469 
SCM_VALIDATE_NUMBER
 (4, 
íd™gÀ
);

470 
SCM_VALIDATE_NUMBER
 (5, 
xødius
);

471 
SCM_VALIDATE_NUMBER
 (6, 
yødius
);

473 
£˘‹
 (
SCM_INUMR
 (
xc
), SCM_INUMR (
yc
), SCM_INUMR (
°™gÀ
),\

474 
SCM_INUMR
 (
íd™gÀ
), SCM_INUMR (
xødius
), SCM_INUMR (
yødius
));

475  
	gSCM_UNSPECIFIED
;

477 #unde‡
FUNC_NAME


480 
	#FUNC_NAME
 "Êoodfûl"

	)

481 
SCM
 
	$scm_Êoodfûl
 (
SCM
 
x
, SCM 
y
, SCM 
bound¨ycﬁ‹
)

483 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

484 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

485 
	`SCM_VALIDATE_INUM
 (3, 
bound¨ycﬁ‹
);

486 
	`Êoodfûl
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
), 
	`SCM_INUM
 (
bound¨ycﬁ‹
));

487  
SCM_UNSPECIFIED
;

488 
	}
}

489 #unde‡
FUNC_NAME


492 
	#FUNC_NAME
 "b¨"

	)

493 
SCM
 
	$scm_b¨
 (
SCM
 
À·
, SCM 
t›
, SCM 
right
, SCM 
bŸtom
)

495 
	`SCM_VALIDATE_NUMBER
 (1, 
À·
);

496 
	`SCM_VALIDATE_NUMBER
 (2, 
t›
);

497 
	`SCM_VALIDATE_NUMBER
 (3, 
right
);

498 
	`SCM_VALIDATE_NUMBER
 (4, 
bŸtom
);

499 
	`b¨
 (
	`SCM_INUMR
 (
À·
), SCM_INUMR (
t›
), SCM_INUMR (
right
),\

500 
	`SCM_INUMR
 (
bŸtom
));

501  
SCM_UNSPECIFIED
;

502 
	}
}

503 #unde‡
FUNC_NAME


505 
	#FUNC_NAME
 "b¨3d"

	)

506 
SCM
 
scm_b¨3d
 (SCM 
À·
, SCM 
t›
, SCM 
right
, SCM 
bŸtom
,\

507 
SCM
 
dïth
, SCM 
t›Êag
)

509 
SCM_VALIDATE_NUMBER
 (1, 
À·
);

510 
SCM_VALIDATE_NUMBER
 (2, 
t›
);

511 
SCM_VALIDATE_NUMBER
 (3, 
right
);

512 
SCM_VALIDATE_NUMBER
 (4, 
bŸtom
);

513 
SCM_VALIDATE_NUMBER
 (5, 
dïth
);

514 
SCM_VALIDATE_BOOL
 (6, 
t›Êag
);

515 
b¨3d
 (
SCM_INUMR
 (
À·
), SCM_INUMR (
t›
), SCM_INUMR (
right
),\

516 
SCM_INUMR
 (
bŸtom
), SCM_INUMR (
dïth
), 
SCM_NFALSEP
 (
t›Êag
));

517  
	gSCM_UNSPECIFIED
;

519 #unde‡
FUNC_NAME


522 
	#FUNC_NAME
 "gëmaxcﬁ‹"

	)

523 
SCM
 
	$scm_gëmaxcﬁ‹
 ()

525  
	`SCM_MAKINUM
 (
	`gëmaxcﬁ‹
 ());

526 
	}
}

527 #unde‡
FUNC_NAME


529 
	#FUNC_NAME
 "ouâext"

	)

530 
SCM
 
	$scm_ouâext
 (
SCM
 
ãxt°rög
)

532 
	`SCM_VALIDATE_STRING
 (1, 
ãxt°rög
);

533 
	`ouâext
 (
	`SCM_STRING_CHARS
 (
ãxt°rög
));

534  
SCM_UNSPECIFIED
;

535 
	}
}

536 #unde‡
FUNC_NAME


538 
	#FUNC_NAME
 "ouâextxy"

	)

539 
SCM
 
	$scm_ouâextxy
 (
SCM
 
x
, SCM 
y
, SCM 
ãxt°rög
)

541 
	`SCM_VALIDATE_NUMBER
 (1, 
x
);

542 
	`SCM_VALIDATE_NUMBER
 (2, 
y
);

543 
	`SCM_VALIDATE_STRING
 (3, 
ãxt°rög
);

544 
	`ouâextxy
 (
	`SCM_INUMR
 (
x
), SCM_INUMR (
y
),\

545 
	`SCM_STRING_CHARS
 (
ãxt°rög
));

546  
SCM_UNSPECIFIED
;

547 
	}
}

548 #unde‡
FUNC_NAME


552 
	#FUNC_NAME
 "ãxtheight"

	)

553 
SCM
 
	$scm_ãxtheight
 (
SCM
 
ãxt°rög
)

555 
	`SCM_VALIDATE_STRING
 (1, 
ãxt°rög
);

556  
	`SCM_MAKINUM
 (
	`ãxtheight
 (
	`SCM_STRING_CHARS
 (
ãxt°rög
)));

557 
	}
}

558 #unde‡
FUNC_NAME


563 
	#FUNC_NAME
 "ãxtwidth"

	)

564 
SCM
 
	$scm_ãxtwidth
 (
SCM
 
ãxt°rög
)

566 
	`SCM_VALIDATE_STRING
 (1, 
ãxt°rög
);

567  
	`SCM_MAKINUM
 (
	`ãxtwidth
 (
	`SCM_STRING_CHARS
 (
ãxt°rög
)));

568 
	}
}

569 #unde‡
FUNC_NAME


572 
	#FUNC_NAME
 "gëmaxmode"

	)

573 
SCM
 
	$scm_gëmaxmode
 ()

575  
	`SCM_MAKINUM
 (
	`gëmaxmode
 ());

576 
	}
}

577 #unde‡
FUNC_NAME


580 
	#FUNC_NAME
 "gëmodî™ge"

	)

581 
SCM
 
	$scm_gëmodî™ge
 (
SCM
 
gd
, SCM 
lomode
, SCM 
himode
)

583 
lo
, 
hi
;

584 
	`SCM_VALIDATE_INUM
 (1, 
gd
);

585 
	`SCM_VALIDATE_SYMBOL
 (2, 
lomode
);

586 
	`SCM_VALIDATE_SYMBOL
 (3, 
himode
);

587 
	`gëmodî™ge
 (
	`SCM_INUM
 (
gd
), &
lo
, &
hi
);

588 
	`scm_c_deföe
 (
	`SCM_SYMBOL_CHARS
 (
lomode
), 
	`SCM_MAKINUM
 (
lo
));

589 
	`scm_c_deföe
 (
	`SCM_SYMBOL_CHARS
 (
himode
), 
	`SCM_MAKINUM
 (
hi
));

590  
SCM_UNSPECIFIED
;

591 
	}
}

592 #unde‡
FUNC_NAME


596 
	#FUNC_NAME
 "gëdrivî«me"

	)

597 
SCM
 
	$scm_gëdrivî«me
 ()

599 *
«me
 = 
	`gëdrivî«me
 ();

600 
SCM
 
scm_°r
 = 
	`scm_mem2°rög
 (
«me
, 
	`°æí
 (name));

601 
	`‰ì
 (
«me
);

602  
scm_°r
;

603 
	}
}

604 #unde‡
FUNC_NAME


607 
	#FUNC_NAME
 "gëmodíame"

	)

608 
SCM
 
	$scm_gëmodíame
 (
SCM
 
mode_numbî
)

610 *
«me
;

611 
SCM
 
scm_°r
;

612 
	`SCM_VALIDATE_INUM
 (1, 
mode_numbî
);

613 
«me
 = 
	`gëmodíame
 (
	`SCM_INUM
 (
mode_numbî
));

614 
scm_°r
 = 
	`scm_mem2°rög
 (
«me
, 
	`°æí
 (name));

615 
	`‰ì
(
«me
);

616  
scm_°r
;

617 
	}
}

618 #unde‡
FUNC_NAME


621 
	#FUNC_NAME
 "gë¨cco‹ds"

	)

622 
SCM
 
	$scm_gë¨cco‹ds
 (
SCM
 
¨cco‹ds
)

624 
¨cco‹d°y≥
 
¨c_c
;

625 
SCM
 
¨c_scm
;

626 
	`SCM_VALIDATE_SYMBOL
 (1, 
¨cco‹ds
);

627 
	`gë¨cco‹ds
 (&
¨c_c
);

628 
¨c_scm
 = 
	`scm_c⁄s
 (
	`SCM_MAKINUM
 (
¨c_c
.
x
), scm_c⁄†(SCM_MAKINUM (¨c_c.
y
), scm_c⁄†(SCM_MAKINUM (¨c_c.
x°¨t
), scm_c⁄†(SCM_MAKINUM (¨c_c.
y°¨t
), scm_c⁄†(SCM_MAKINUM (¨c_c.
xíd
), scm_c⁄†(SCM_MAKINUM (¨c_c.
yíd
), 
SCM_EOL
))))));

630 
	`scm_c_deföe
 (
	`SCM_SYMBOL_CHARS
 (
¨cco‹ds
), 
¨c_scm
);

631  
SCM_UNSPECIFIED
;

632 
	}
}

633 #unde‡
FUNC_NAME


635 
	#FUNC_NAME
 "kbhô"

	)

636 
SCM
 
	$scm_kbhô
 ()

638 i‡(
	`kbhô
 ())

639  
SCM_BOOL_T
;

641  
SCM_BOOL_F
;

642 
	}
}

643 #unde‡
FUNC_NAME


646 
	#FUNC_NAME
 "gëch"

	)

647 
SCM
 
	$scm_gëch
 ()

649  
	`SCM_MAKE_CHAR
 (
	`gëch
 ());

650 
	}
}

651 #unde‡
FUNC_NAME


653 
	#FUNC_NAME
 "gëche"

	)

654 
SCM
 
	$scm_gëche
 ()

656  
	`SCM_MAKE_CHAR
 (
	`gëche
 ());

657 
	}
}

658 #unde‡
FUNC_NAME


660 
	#FUNC_NAME
 "gr-dñay"

	)

661 
SCM
 
	$scm_dñay
 (
SCM
 
mûi£c
)

663 
	`SCM_VALIDATE_NUMBER
 (1, 
mûi£c
);

664 
	`dñay
 (
	`SCM_INUMR
 (
mûi£c
));

665  
mûi£c
;

666 
	}
}

667 #unde‡
FUNC_NAME


670 
	#FUNC_NAME
 "gëch¨"

	)

671 
SCM
 
	$scm_gëch¨
 ()

673  
	`SCM_MAKE_CHAR
 (()
	`gëch¨
());

674 
	}
}

675 #unde‡
FUNC_NAME


678 
	#FUNC_NAME
 "putch¨"

	)

679 
SCM
 
	$scm_putch¨
 (
SCM
 
ch¨a˘î
)

681 
	`SCM_VALIDATE_CHAR
 (1, 
ch¨a˘î
);

682  
	`SCM_MAKE_CHAR
 (()
	`putch¨
 (
	`SCM_CHAR
 (
ch¨a˘î
)));

683 
	}
}

684 #unde‡
FUNC_NAME


688 
	#FUNC_NAME
 "gë-s¸ìn"

	)

689 
SCM
 
	$gr_gë_s¸ìn
 ()

691 
SDL_SurÁ˚
 *
ßve
;

692 
ßve
 = 
	`SDL_C⁄vîtSurÁ˚
 (
s¸ìn
, s¸ìn->
f‹m©
, 
SDL_SWSURFACE
);

694 
	`SCM_RETURN_NEWSMOB
 (
s¸ìn_èg
, 
ßve
);

695 
	}
}

696 #unde‡
FUNC_NAME


700 
	#FUNC_NAME
 "£t-s¸ìn"

	)

701 
SCM
 
	$gr_£t_s¸ìn
 (
SCM
 
√ws¸ìn
)

703 
	`SCM_ASSERT
 (
	`SCM_SMOB_PREDICATE
 (
s¸ìn_èg
, 
√ws¸ìn
),Çewscreen,

704 
SCM_ARG2
, 
FUNC_NAME
);

705 
	`SDL_BlôSurÁ˚
 ((
SDL_SurÁ˚
 *)
	`SCM_SMOB_DATA
 (
√ws¸ìn
),

706 0, 
s¸ìn
, 0);

708  (
SCM_UNSPECIFIED
);

709 
	}
}

710 #unde‡
FUNC_NAME


714 
	#FUNC_NAME
 "swôch-s¸ìn"

	)

715 
SCM
 
	$gr_swôch_s¸ìn
 (
SCM
 
√ws¸ìn
)

717 
SCM
 
ﬁds¸ìn
;

718 
	`SCM_ASSERT
 (
	`SCM_SMOB_PREDICATE
 (
s¸ìn_èg
, 
√ws¸ìn
),Çewscreen,

719 
SCM_ARG2
, 
FUNC_NAME
);

720 
ﬁds¸ìn
 = 
	`gr_gë_s¸ìn
();

721 
	`gr_£t_s¸ìn
 (
√ws¸ìn
);

722  (
ﬁds¸ìn
);

723 
	}
}

724 #unde‡
FUNC_NAME


727 
	#FUNC_NAME
 "bg-swôch-s¸ìn"

	)

728 
SCM
 
	$gr_bg_swôch_s¸ìn
 (
SCM
 
√ws¸ìn
)

730 
SDL_SurÁ˚
 *
backup
;

731 
	`SCM_ASSERT
 (
	`SCM_SMOB_PREDICATE
 (
s¸ìn_èg
, 
√ws¸ìn
),Çewscreen,

732 
SCM_ARG2
, 
FUNC_NAME
);

733 
backup
 = 
s¸ìn
;

734 
s¸ìn
 = (
SDL_SurÁ˚
 *)
	`SCM_SMOB_DATA
 (
√ws¸ìn
);

735 
	`SCM_RETURN_NEWSMOB
 (
s¸ìn_èg
, 
backup
);

736 
	}
}

737 #unde‡
FUNC_NAME


740 
size_t


741 
	$‰ì_s¸ìn
 (
SCM
 
s¸ìn_smob
)

743 
	`SDL_FªeSurÁ˚
 ((
SDL_SurÁ˚
 *)
	`SCM_SMOB_DATA
 (
s¸ìn_smob
));

745 
	}
}

749 
	$¥öt_s¸ìn
 (
SCM
 
s¸ìn_smob
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
)

751 *
ouçut
;

752 
	`a•rötf
 (&
ouçut
, "#<s¸ì¿%d>", 
s¸ìn_smob
);

753 
	`scm_puts
 (
ouçut
, 
p‹t
);

754 
	`‰ì
 (
ouçut
);

757 
	}
}

760 
	$deföe_c⁄°™ts
 ()

762 
	`scm_c_deföe
 ("DETECT", 
	`SCM_MAKINUM
 (
DETECT
));

763 
	`scm_c_deföe
 ("USER", 
	`SCM_MAKINUM
 (
USER
));

764 
	`scm_c_deföe
 ("VGA", 
	`SCM_MAKINUM
 (
VGA
));

765 
	`scm_c_deföe
 ("VGALO", 
	`SCM_MAKINUM
 (
VGALO
));

766 
	`scm_c_deföe
 ("VGAMED", 
	`SCM_MAKINUM
(
VGAMED
));

767 
	`scm_c_deföe
 ("VGAHI", 
	`SCM_MAKINUM
(
VGAHI
));

768 
	`scm_c_deföe
 ("VGAMAX", 
	`SCM_MAKINUM
(
VGAMAX
));

769 
	`scm_c_deföe
 ("VGA640", 
	`SCM_MAKINUM
(
VGA640
));

770 
	`scm_c_deföe
 ("VGA800", 
	`SCM_MAKINUM
(
VGA800
));

771 
	`scm_c_deföe
 ("VGA1024", 
	`SCM_MAKINUM
(
VGA1024
));

772 
	`scm_c_deföe
 ("USERMODE", 
	`SCM_MAKINUM
(
USERMODE
));

773 
	`scm_c_deföe
 ("BLACK", 
	`SCM_MAKINUM
(
BLACK
));

774 
	`scm_c_deföe
 ("BLUE", 
	`SCM_MAKINUM
(
BLUE
));

775 
	`scm_c_deföe
 ("GREEN", 
	`SCM_MAKINUM
(
GREEN
));

776 
	`scm_c_deföe
 ("CYAN", 
	`SCM_MAKINUM
(
CYAN
));

777 
	`scm_c_deföe
 ("RED", 
	`SCM_MAKINUM
(
RED
));

778 
	`scm_c_deföe
 ("MAGENTA", 
	`SCM_MAKINUM
(
MAGENTA
));

779 
	`scm_c_deföe
 ("BROWN", 
	`SCM_MAKINUM
(
BROWN
));

780 
	`scm_c_deföe
 ("LIGHTGRAY", 
	`SCM_MAKINUM
(
LIGHTGRAY
));

781 
	`scm_c_deföe
 ("DARKGRAY", 
	`SCM_MAKINUM
(
DARKGRAY
));

782 
	`scm_c_deföe
 ("LIGHTBLUE", 
	`SCM_MAKINUM
(
LIGHTBLUE
));

783 
	`scm_c_deföe
 ("LIGHTGREEN", 
	`SCM_MAKINUM
(
LIGHTGREEN
));

784 
	`scm_c_deföe
 ("LIGHTCYAN", 
	`SCM_MAKINUM
(
LIGHTCYAN
));

785 
	`scm_c_deföe
 ("LIGHTRED", 
	`SCM_MAKINUM
(
LIGHTRED
));

786 
	`scm_c_deföe
 ("LIGHTMAGENTA", 
	`SCM_MAKINUM
(
LIGHTMAGENTA
));

787 
	`scm_c_deföe
 ("YELLOW", 
	`SCM_MAKINUM
(
YELLOW
));

788 
	`scm_c_deföe
 ("WHITE", 
	`SCM_MAKINUM
(
WHITE
));

789 
	`scm_c_deföe
 ("SOLID_LINE", 
	`SCM_MAKINUM
 (
SOLID_LINE
));

790 
	`scm_c_deföe
 ("DOTTED_LINE", 
	`SCM_MAKINUM
 (
DOTTED_LINE
));

791 
	`scm_c_deföe
 ("CENTER_LINE", 
	`SCM_MAKINUM
 (
CENTER_LINE
));

792 
	`scm_c_deföe
 ("DASHED_LINE", 
	`SCM_MAKINUM
 (
DASHED_LINE
));

793 
	`scm_c_deföe
 ("USERBIT_LINE", 
	`SCM_MAKINUM
 (
USERBIT_LINE
));

794 
	`scm_c_deföe
 ("NORM_WIDTH", 
	`SCM_MAKINUM
 (
NORM_WIDTH
));

795 
	`scm_c_deföe
 ("THICK_WIDTH", 
	`SCM_MAKINUM
 (
THICK_WIDTH
));

796 
	}
}

798 
	$deföe_¥o˚duªs
 ()

800 
	`scm_c_deföe_gsubr
 ("öôgøph", 2, 1, 0, 
scm_öôgøph
);

801 
	`scm_c_deföe_gsubr
 ("˛o£gøph", 0, 0, 0, 
scm_˛o£gøph
);

802 
	`scm_c_deföe_gsubr
 ("dëe˘gøph", 2, 0, 0, 
scm_dëe˘gøph
);

803 
	`scm_c_deföe_gsubr
 ("£tgøphmode", 1, 0, 0, 
scm_£tgøphmode
);

804 
	`scm_c_deföe_gsubr
 ("gëgøphmode", 0, 0, 0, 
scm_gëgøphmode
);

805 
	`scm_c_deföe_gsubr
 ("ª°‹e¸tmode", 0, 0, 0, 
scm_ª°‹e¸tmode
);

806 
	`scm_c_deföe_gsubr
 ("gëmaxx", 0, 0, 0, 
scm_gëmaxx
);

807 
	`scm_c_deföe_gsubr
 ("gëmaxy", 0, 0, 0, 
scm_gëmaxy
);

808 
	`scm_c_deföe_gsubr
 ("˛órdevi˚", 0, 0, 0, 
scm_˛órdevi˚
);

809 
	`scm_c_deföe_gsubr
 ("puçixñ", 3, 0, 0, 
scm_puçixñ
);

810 
	`scm_c_deföe_gsubr
 ("gëpixñ", 2, 0, 0, 
scm_gëpixñ
);

811 
	`scm_c_deföe_gsubr
 ("£tcﬁ‹", 1, 0, 0, 
scm_£tcﬁ‹
);

812 
	`scm_c_deföe_gsubr
 ("gëcﬁ‹", 0, 0, 0, 
scm_gëcﬁ‹
);

813 
	`scm_c_deföe_gsubr
 ("£tbkcﬁ‹", 1, 0, 0, 
scm_£tbkcﬁ‹
);

814 
	`scm_c_deföe_gsubr
 ("gëbkcﬁ‹", 0, 0, 0, 
scm_gëbkcﬁ‹
);

815 
	`scm_c_deföe_gsubr
 ("gëx", 0, 0, 0, 
scm_gëx
);

816 
	`scm_c_deföe_gsubr
 ("gëy", 0, 0, 0, 
scm_gëy
);

817 
	`scm_c_deföe_gsubr
 ("movëo", 2, 0, 0, 
scm_movëo
);

818 
	`scm_c_deföe_gsubr
 ("movîñ", 2, 0, 0, 
scm_movîñ
);

819 
	`scm_c_deföe_gsubr
 ("£tf⁄tcﬁ‹", 1, 0, 0, 
scm_£tf⁄tcﬁ‹
);

820 
	`scm_c_deföe_gsubr
 ("gëf⁄tcﬁ‹", 0, 0, 0, 
scm_gëf⁄tcﬁ‹
);

821 
	`scm_c_deföe_gsubr
 ("löe", 4, 0, 0, 
scm_löe
);

822 
	`scm_c_deföe_gsubr
 ("gëlöe£âögs", 0, 0, 0, 
gr_gëlöe£âögs
);

823 
	`scm_c_deföe_gsubr
 ("£éöe°yÀ", 3, 0, 0, 
gr_£éöe°yÀ
);

824 
	`scm_c_deföe_gsubr
 ("löëo", 2, 0, 0, 
scm_löëo
);

825 
	`scm_c_deföe_gsubr
 ("löîñ", 2, 0, 0, 
scm_löîñ
);

826 
	`scm_c_deföe_gsubr
 ("cú˛e", 3, 0, 0, 
scm_cú˛e
);

827 
	`scm_c_deföe_gsubr
 ("¨c", 5, 0, 0, 
scm_¨c
);

828 
	`scm_c_deföe_gsubr
 ("põ¶i˚", 5, 0, 0, 
scm_põ¶i˚
);

829 
	`scm_c_deföe_gsubr
 ("ª˘™gÀ", 4, 0, 0, 
scm_ª˘™gÀ
);

830 
	`scm_c_deföe_gsubr
 ("døwpﬁy", 1, 0, 0, 
scm_døwpﬁy
);

831 
	`scm_c_deföe_gsubr
 ("fûÕﬁy", 1, 0, 0, 
scm_fûÕﬁy
);

832 
	`scm_c_deföe_gsubr
 ("ñlù£", 6, 0, 0, 
scm_ñlù£
);

833 
	`scm_c_deföe_gsubr
 ("fûÀŒù£", 4, 0, 0, 
scm_fûÀŒù£
);

834 
	`scm_c_deföe_gsubr
 ("gíñlù£", 5, 0, 0, 
scm_gíñlù£
);

835 
	`scm_c_deföe_gsubr
 ("£˘‹", 6, 0, 0, 
scm_£˘‹
);

836 
	`scm_c_deföe_gsubr
 ("Êoodfûl", 3, 0, 0, 
scm_Êoodfûl
);

837 
	`scm_c_deföe_gsubr
 ("b¨", 4, 0, 0, 
scm_b¨
);

838 
	`scm_c_deföe_gsubr
 ("b¨3d", 6, 0, 0, 
scm_b¨3d
);

839 
	`scm_c_deföe_gsubr
 ("gëmaxcﬁ‹", 0, 0, 0, 
scm_gëmaxcﬁ‹
);

840 
	`scm_c_deföe_gsubr
 ("ouâext", 1, 0, 0, 
scm_ouâext
);

841 
	`scm_c_deföe_gsubr
 ("ouâextxy", 3, 0, 0, 
scm_ouâextxy
);

842 
	`scm_c_deföe_gsubr
 ("ãxtheight", 1, 0, 0, 
scm_ãxtheight
);

843 
	`scm_c_deföe_gsubr
 ("ãxtwidth", 1, 0, 0, 
scm_ãxtwidth
);

844 
	`scm_c_deföe_gsubr
 ("gëmaxmode", 0, 0, 0, 
scm_gëmaxmode
);

845 
	`scm_c_deföe_gsubr
 ("gëmodî™ge", 3, 0, 0, 
scm_gëmodî™ge
);

846 
	`scm_c_deföe_gsubr
 ("gëdrivî«me", 0, 0, 0, 
scm_gëdrivî«me
);

847 
	`scm_c_deföe_gsubr
 ("gëmodíame", 1, 0, 0, 
scm_gëmodíame
);

848 
	`scm_c_deföe_gsubr
 ("gë¨cco‹ds", 1, 0, 0, 
scm_gë¨cco‹ds
);

849 
	`scm_c_deföe_gsubr
 ("kbhô", 0, 0, 0, 
scm_kbhô
);

850 
	`scm_c_deföe_gsubr
 ("gëch", 0, 0, 0, 
scm_gëch
);

851 
	`scm_c_deföe_gsubr
 ("gëche", 0, 0, 0, 
scm_gëche
);

852 
	`scm_c_deföe_gsubr
 ("gr-dñay", 1, 0, 0, 
scm_dñay
);

853 
	`scm_c_deföe_gsubr
 ("gëch¨", 0, 0, 0, 
scm_gëch¨
);

854 
	`scm_c_deföe_gsubr
 ("putch¨", 1, 0, 0, 
scm_putch¨
);

855 
	`scm_c_deföe_gsubr
 ("gë-s¸ìn", 0, 0, 0, 
gr_gë_s¸ìn
);

856 
	`scm_c_deföe_gsubr
 ("£t-s¸ìn", 1, 0, 0, 
gr_£t_s¸ìn
);

857 
	`scm_c_deföe_gsubr
 ("swôch-s¸ìn", 1, 0, 0, 
gr_swôch_s¸ìn
);

858 
	`scm_c_deföe_gsubr
 ("bg-swôch-s¸ìn", 1, 0, 0, 
gr_bg_swôch_s¸ìn
);

859 
	}
}

865 
	$scm_öô_libgøph
 ()

867 
s¸ìn_èg
 = 
	`scm_make_smob_ty≥
 ("s¸ìn", (
SDL_SurÁ˚
 *));

868 
	`scm_£t_smob_‰ì
 (
s¸ìn_èg
, 
‰ì_s¸ìn
);

869 
	`scm_£t_smob_¥öt
 (
s¸ìn_èg
, 
¥öt_s¸ìn
);

870 
	`scm_£t_smob_equÆp
 (
s¸ìn_èg
, 0);

872 
	`deföe_c⁄°™ts
 ();

873 
	`deföe_¥o˚duªs
 ();

874 
	}
}

	@libgraph.c

25 
	~"gøphics.h
"

28 
	$˘æbªak
()

30 
quô
=0;

31 
SDL_Evít
 
evít
;

32 
SDLMod
 
md
;

33 
	`¶ìp
(1);

34  !
quô
 ){

35 i‡(
	`gëµid
()==1Ë
	`exô
(0);

36 i‡(
	`SDL_PﬁlEvít
 (&
evít
))

38 
evít
.
ty≥
){

39 
SDL_KEYUP
:

40 
md
 = 
evít
.
key
.
keysym
.
mod
;

41 if((
md
 && 
KMOD_RCTRL
Ë|| (md && 
KMOD_LCTRL
) )

42 i‡(
evít
.
key
.
keysym
.
sym
==
SDLK_c
)

44 
	`Ârötf
(
°dîr
,"Keyboard Interrupt detected. Quitting...\n");

45 
	`kûl
(
	`gëµid
(),
SIGUSR1
);

46 
	`exô
(0);

49 
SDL_ACTIVEEVENT
:

50 i‡((
evít
.
a˘ive
.
°©e
 =
SDL_APPINPUTFOCUS
) &&\

51 
evít
.
a˘ive
.
gaö
)

52 
	`kûl
(
	`gëµid
(), 
SIGUSR2
);

54 
SDL_QUIT
:

55 
quô
 = 1;

63 
	`¶ìp
(1);

67 
	}
}

70 
	$öth™dÀr
(
x
)

72 
	`˛o£gøph
();

73 
	`exô
(0);

74 
	}
}

78 
	$ª‰esh_öãºu±
 (
x
)

80 
	`SDL_Upd©eRe˘
 (
s¸ìn
, 0, 0, 0, 0);

81 
	}
}

85 
	$öôgøph
(*
gøphdrivî
,*
gøphmode
,*
∑thtodrivî
)

87 
x
=640, 
y
;

88 
_öôÊag
=
SDL_SWSURFACE
;

90 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 )

92 
	`Ârötf
(
°dîr
, "U«bÀÅÿöô SDL: %s\n", 
	`SDL_GëEº‹
());

93 
	`exô
(-1);

95 
	`©exô
(
˛o£gøph
);

98 
_pid
 = 
	`f‹k
();

100 (!
_pid
Ë
	`˘æbªak
();

103 
	`sig«l
(
SIGUSR1
, 
öth™dÀr
);

104 
	`sig«l
 (
SIGUSR2
, 
ª‰esh_öãºu±
);

107 i‡(*
gøphdrivî
 =
DETECT
)

108 *
gøphmode
 = 
VGAHI
;

109 i‡(*
gøphdrivî
 =
USER
)

111 
y
 = *
gøphmode
 % 1000;

112 
x
 = (*
gøphmode
 / 1000) % 1000;

113 *
gøphmode
 = 
USERMODE
;

116 *
gøphmode
){

117 
VGALO
 :

118 
y
 = 200;

120 
VGAMED
 :

121 
y
 = 350;

123 
VGAMAX
 :

124 
x
 = 800,
y
 = 600;

126 
VGA640
 :

127 
y
 = 480;

128 
_öôÊag
 |
SDL_FULLSCREEN
;

130 
VGA800
 :

131 
x
 = 800, 
y
 = 600;

132 
_öôÊag
 |
SDL_FULLSCREEN
;

134 
VGA1024
 :

135 
x
 = 1024, 
y
 = 768;

136 
_öôÊag
 |
SDL_FULLSCREEN
;

138 
VGAHI
 :

140 
y
 = 480;

146 *
ic⁄∑th
;

147 
	`a•rötf
 (&
ic⁄∑th
, "%s%s", 
FONTDIR
, "icon.bmp");

148 
	`SDL_WM_SëIc⁄
 (
	`SDL_LﬂdBMP
 (
ic⁄∑th
), 
NULL
);

149 
	`‰ì
 (
ic⁄∑th
);

153 
	`SDL_WM_SëC≠ti⁄
("SDL-libgraph -- Graphics on GNU/Linux", 0);

157 
s¸ìn
 = 
	`SDL_SëVideoMode
(
x
, 
y
, 8, 
_öôÊag
);

158 i‡–
s¸ìn
 =
NULL
 ) {

159 
	`Ârötf
(
°dîr
, "U«bÀÅÿ£àvideo: %s\n", 
	`SDL_GëEº‹
());

160 
	`exô
(-1);

163 
	`öôülize_£âögs
 ();

164 
	}
}

168 
	$˛o£gøph
()

170 
	`kûl
(
_pid
, 
SIGKILL
);

171 
	`SDL_Quô
();

172 
	`un£ãnv
("LIBGRAPHICS_ACTIVE");

173 
	}
}

176 
	$öôülize_£âögs
 ()

178 
_fgcﬁ‹
 = 
	`cﬁ‹å™s
(
WHITE
);

179 
_bgcﬁ‹
 = 
	`cﬁ‹å™s
(
BLACK
);

180 
_f⁄tcﬁ‹
 = 
WHITE
;

181 
	`puãnv
("LIBGRAPHICS_ACTIVE=1");

184 
	`£tf⁄tcﬁ‹
(
_f⁄tcﬁ‹
);

185 
_öã∫Æ_löe°yÀ
.
löe°yÀ
 = 
SOLID_LINE
;

186 
_öã∫Æ_löe°yÀ
.
thick√ss
 = 
NORM_WIDTH
;

187 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0xffff;

188 
	}
}

190 
	$£tgøphmode
(
gmode
)

192 
gdrivî
 = 
VGA
;

193 
	`öôgøph
(&
gdrivî
,&
gmode
,0);

194 
	}
}

197 
	$gëgøphmode
()

199 
CHECK_INITIALIZATION


200 
	`gëmaxy
()){

201 199 :  
VGALO
;

202 349 :  
VGAMED
;

203 479 :  
VGAHI
;

204 599 :  
VGAMAX
;

205 767 :  
VGA1024
;

206  :  
USERMODE
;

208 
	}
}

210 
	$ª°‹e¸tmode
()

212 
	`˛o£gøph
();

213 
	}
}

215 
	$gëmaxx
()

217 
CHECK_INITIALIZATION


218  (
s¸ìn
->
w
 - 1);

219 
	}
}

221 
	$gëmaxy
()

223 
CHECK_INITIALIZATION


224  (
s¸ìn
->
h
 - 1);

225 
	}
}

228 
	$m≠pixñ
(
x
, 
y
)

230 
Uöt8
* 
buÂ
;

231 i‡(
x
 > 
s¸ìn
->
w
 || 
y
 > s¸ìn->
h
 || x < 0 || y < 0)

233 
	`Ârötf
(
°dîr
, "PixñÑeque° ouào‡ønge!!\t(%d,%d)\n", 
x
, 
y
);

236 
buÂ
 = (
Uöt8
 *)
s¸ìn
->
pixñs
 + 
y
*s¸ìn->
pôch
 + 
x
;

237 *
buÂ
 = 
_fgcﬁ‹
;

238 
	}
}

241 
	$˛ùpixñ
(*
x
, *
y
)

243 i‡(*
x
 < 0)

244 *
x
 = 0;

245 i‡(*
x
 > 
s¸ìn
->
w
)

246 *
x
 = 
s¸ìn
->
w
;

247 i‡(*
y
 < 0)

248 *
y
 = 0;

249 i‡(*
y
 > 
s¸ìn
->
h
)

250 *
y
 = 
s¸ìn
->
h
;

251 
	}
}

254 
	$m≠w‹d
(
x
, 
y
, 
w‹d
)

256 
Uöt8
* 
buÂ
;

257 i‡(
x
+
w‹d
 < 0)

259 
x
 -
w‹d
;

260 
w‹d
 -= 0;

262 i‡(
x
 > 
s¸ìn
->
w
 || 
y
 > s¸ìn->
h
 || x < 0 || y < 0)

264 
	`Ârötf
(
°dîr
, "PixñÑeque° ouào‡ønge!!\t(%d,%d)\n", 
x
, 
y
);

267 i‡(
x
+
w‹d
 > 
s¸ìn
->
w
)

268 
w‹d
 = 
s¸ìn
->
w
 - 
x
;

269 
buÂ
 = (
Uöt8
 *)
s¸ìn
->
pixñs
 + 
y
*s¸ìn->
pôch
 + 
x
;

273 ; 
w‹d
 >= 0; word--)

275 *
buÂ
 = 
_fgcﬁ‹
;

276 
buÂ
++;

278 
	}
}

280 
	$m≠vw‹d
(
x
, 
y
, 
w‹d
)

282 
Uöt8
* 
buÂ
;

283 i‡(
w‹d
<0)

285 
y
 -
w‹d
;

286 
w‹d
 -= 0;

289 i‡(
x
 > 
s¸ìn
->
w
 || 
y
 > s¸ìn->
h
 || x < 0 || y < 0)

291 
	`Ârötf
(
°dîr
, "PixñÑeque° ouào‡ønge!!\t(%d,%d)\n", 
x
, 
y
);

295 i‡(
y
+
w‹d
 > 
s¸ìn
->
h
)

296 
w‹d
 = 
s¸ìn
->
h
 - 
y
;

297 
buÂ
 = (
Uöt8
 *)
s¸ìn
->
pixñs
 + 
y
*s¸ìn->
pôch
 + 
x
;

301 ; 
w‹d
 >= 0; word--)

303 *
buÂ
 = 
_fgcﬁ‹
;

304 
buÂ
 +
s¸ìn
->
pôch
;

306 
	}
}

308 
	$puçixñ
(
x
, 
y
, 
cﬁ‹
)

310 
‹ig_cﬁ‹
;

311 
CHECK_INITIALIZATION


312 
‹ig_cﬁ‹
 = 
	`gëcﬁ‹
();

313 
	`£tcﬁ‹
(
cﬁ‹
);

314 
	`m≠pixñ
(
x
,
y
);

315 
	`£tcﬁ‹
(
‹ig_cﬁ‹
);

316 
	`SDL_Upd©eRe˘
(
s¸ìn
, 
x
, 
y
, 1, 1);

317 
	}
}

320 
	$gëpixñ
(
x
, 
y
)

322 
Uöt8
* 
buÂ
;

323 
Uöt8
 
cﬁ‹
;

324 
CHECK_INITIALIZATION


325 i‡(
x
 > 
s¸ìn
->
w
 || 
y
 > s¸ìn->
h
 || x < 0 || y < 0)

327 
	`Ârötf
(
°dîr
, "gëpixñ(Ëªque° ouào‡ønge!!\t(%d,%d)\n", 
x
, 
y
);

328  
	`cﬁ‹ªv
(
_fgcﬁ‹
);

330 
buÂ
 = (
Uöt8
 *)
s¸ìn
->
pixñs
 + 
y
*s¸ìn->
pôch
 + 
x
;

331 
cﬁ‹
 = *
buÂ
;

332  
	`cﬁ‹ªv
(
cﬁ‹
);

333 
	}
}

336 
Uöt8
 
	$cﬁ‹å™s
(c⁄° 
cﬁ‹
)

338 
Uöt8
 
å™s
;

339 
cﬁ‹
){

340 0 : 
å™s
 = 0; ;

341 1 : 
å™s
 = 3; ;

342 2 : 
å™s
 = 28; ;

343 3 : 
å™s
 = 31; ;

344 4 : 
å™s
 = 224; ;

345 5 : 
å™s
 = 227; ;

346 6 : 
å™s
 = 136; ;

347 7 : 
å™s
 = 219; ;

348 8 : 
å™s
 = 73; ;

349 9 : 
å™s
 = 143; ;

350 10 : 
å™s
 = 158; ;

351 11 : 
å™s
 = 191; ;

352 12 : 
å™s
 = 237; ;

353 13 : 
å™s
 = 247; ;

354 14 : 
å™s
 = 252; ;

356  : 
å™s
 = 255; ;

358  
å™s
;

359 
	}
}

362 
	$cﬁ‹ªv
(c⁄° 
Uöt8
 
cﬁ‹
)

364 
ªv
;

365 
cﬁ‹
){

366 0 : 
ªv
 = 0; ;

367 3 : 
ªv
 = 1; ;

368 28 : 
ªv
 = 2; ;

369 31 : 
ªv
 = 3; ;

370 224 : 
ªv
 = 4; ;

371 227 : 
ªv
 = 5; ;

372 136 : 
ªv
 = 6; ;

373 219 : 
ªv
 = 7; ;

374 73 : 
ªv
 = 8; ;

375 143 : 
ªv
 = 9; ;

376 158 : 
ªv
 = 10; ;

377 191 : 
ªv
 = 11; ;

378 237 : 
ªv
 = 12; ;

379 247 : 
ªv
 = 13; ;

380 252 : 
ªv
 = 14; ;

382  : 
ªv
 = 15; ;

384  
ªv
;

385 
	}
}

388 
	$£tbkcﬁ‹
(
cﬁ‹
)

390 
SDL_Re˘
* 
d°ª˘
;

391 
Uöt8
* 
buÂ
;

392 
CHECK_INITIALIZATION


393 
d°ª˘
=0;

394 
_bgcﬁ‹
 = 
	`cﬁ‹å™s
(
cﬁ‹
);

395 
	`SDL_FûlRe˘
(
s¸ìn
, 
d°ª˘
, 
_bgcﬁ‹
);

396 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0,0,0,0);

397 
	}
}

400 
	$gëbkcﬁ‹
()

402  
	`cﬁ‹ªv
(
_bgcﬁ‹
);

403 
	}
}

406 
	$£tcﬁ‹
(
cﬁ‹
)

408 
_fgcﬁ‹
 = 
	`cﬁ‹å™s
(
cﬁ‹
);

409 
	}
}

412 
	$gëcﬁ‹
()

414  
	`cﬁ‹ªv
(
_fgcﬁ‹
);

415 
	}
}

418 
	$gëmaxcﬁ‹
()

421 
	}
}

424 * 
	$gëdrivî«me
()

426  
	`°rdup
 ("EGAVGA");

427 
	}
}

430 * 
	$gëmodíame
(
mode_numbî
)

432 * 
modíame
;

433 
mode_numbî
)

435 
VGALO
 : 
modíame
 = 
	`°rdup
 ("640 x 200 VGA");;

436 
VGAMED
 : 
modíame
 = 
	`°rdup
 ("640 x 350 VGA");;

437 
VGAHI
 : 
modíame
 = 
	`°rdup
 ("640 x 480 VGA");;

438 
VGAMAX
 : 
modíame
 = 
	`°rdup
 ("800 x 600 VGA");;

439 
VGA640
 : 
modíame
 = 
	`°rdup
 ("640 x 480 VGA - fullscreen");;

440 
VGA800
 : 
modíame
 = 
	`°rdup
 ("800 x 600 VGA - fullscreen");;

441 
VGA1024
 : 
modíame
 = 
	`°rdup
 ("1024 x 800 VGA - fullscreeen");;

442  : 
modíame
 = 
	`°rdup
 ("User specified");

444  
modíame
;

445 
	}
}

447 
	$gëmaxmode
()

449  
VGA1024
;

450 
	}
}

453 
	$dëe˘gøph
(* 
gøphdrivî
, * 
gøphmode
)

455 
drivî
 = 
VGA
;

456 *
gøphmode
 = 
VGAMAX
;

457 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE"))

458 
	`˛o£gøph
();

459 
	`öôgøph
(&
drivî
, 
gøphmode
, "");

460 
	}
}

463 
	$gëmodî™ge
(
gøphdrivî
, * 
lomode
, * 
himode
)

465 i‡((
gøphdrivî
 =
VGA
) || (graphdriver == -1))

467 *
lomode
 = 
VGALO
;

468 *
himode
 = 
VGA1024
;

472 *
lomode
 = -1;

473 *
himode
 = -1;

475 
	}
}

478 
	$ß„_upd©e
(
À·
, 
t›
, 
right
, 
bŸtom
)

480 
	`˛ùpixñ
(&
À·
, &
t›
);

481 
	`˛ùpixñ
(&
right
, &
bŸtom
);

482 
	`SDL_Upd©eRe˘
(
s¸ìn
, 
À·
, 
t›
, 
	`abs
(
right
-À·),ábs(
bŸtom
-top));

483 
	}
}

486 
	$dñay
(
mûi£c
)

488 
time•ec
 
waô
;

489 if(
mûi£c
>=1000)

491 
waô
.
tv_£c
=
mûi£c
/1000;

492 
mûi£c
-=(
waô
.
tv_£c
*1000);

495 
waô
.
tv_£c
=0;

496 
waô
.
tv_n£c
=
mûi£c
*1000000;

497 
	`«no¶ìp
(&
waô
,0);

499 
	}
}

503 
	$£tf⁄tcﬁ‹
(
cﬁ‹
)

505 *
f⁄ç©h
;

506 
CHECK_INITIALIZATION


507 
cﬁ‹
)

509 
WHITE
 :

510 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "white.png");

512 
BLACK
 :

513 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "black.png");

515 
RED
 :

516 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "red.png");

518 
BLUE
 :

519 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "blue.png");

521 
GREEN
 :

522 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "green.png");

524 
CYAN
 :

525 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "cyan.png");

527 
MAGENTA
 :

528 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "magenta.png");

530 
YELLOW
 :

531 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "yellow.png");

533 
LIGHTGREEN
 :

534 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "lightgreen.png");

536 
LIGHTBLUE
 :

537 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "lightblue.png");

539 
LIGHTMAGENTA
 :

540 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "lightmagenta.png");

542 
LIGHTRED
 :

543 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "lightred.png");

545 
BROWN
 :

546 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "brown.png");

548 
LIGHTGRAY
 :

549 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "lightgray.png");

551 
DARKGRAY
 :

552 
	`a•rötf
(&
f⁄ç©h
, "%s%s", 
FONTDIR
, "darkgray.png");

555 
	`Ârötf
(
°dîr
, "F⁄àcﬁ‹Ñeque°ed i†u«vaûabÀ -- %d\n", 
cﬁ‹
);

558 
	`SDL_FªeSurÁ˚
(
F⁄t_surÁ˚
);

559 
F⁄t_surÁ˚
 = 
	`IMG_Lﬂd
(
f⁄ç©h
);

560 
	`InôF⁄t
(
F⁄t_surÁ˚
);

561 
	`‰ì
(
f⁄ç©h
);

562 
	}
}

565 
	$gëf⁄tcﬁ‹
()

567 (
_f⁄tcﬁ‹
);

568 
	}
}

	@polygon.c

25 
	~"pﬁyg⁄.h
"

28 
	$døwpﬁy
(
numpoöts
, *
pﬁypoöts
)

30 
i
, 
x1
, 
y1
, 
x2
, 
y2
;

32 
CHECK_INITIALIZATION


34 
i
=0; i<
numpoöts
-1; i++)

36 
x1
 = 
pﬁypoöts
[2*
i
];

37 
y1
 = 
pﬁypoöts
[2*
i
+1];

38 
x2
 = 
pﬁypoöts
[2*
i
+2];

39 
y2
 = 
pﬁypoöts
[2*
i
+3];

40 
	`löe
(
x1
, 
y1
, 
x2
, 
y2
);

43 
	}
}

46 
	$fûÕﬁy
(
numpoöts
, * 
pﬁypoöts
)

48 
i
;

50 
CHECK_INITIALIZATION


52 
_sˇ∆i°
 = 
	`ˇŒoc
(
s¸ìn
->
h
, (
sˇ≈t
));

53 
	`_‰ìli°
();

54 
i
=0; i<
s¸ìn
->
h
; i++)

55 
_sˇ∆i°
[
i
]=0;

56 
	`_makñi°
(
numpoöts
, 
pﬁypoöts
);

57 
	`_fûÕﬁy
();

58 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0,0,0,0);

59 
	`_‰ìli°
();

60 
	`‰ì
(
_sˇ∆i°
);

61 
	}
}

64 
	$_‰ìli°
()

66 
i
;

67 
sˇ≈t
* 
cuº
,*
¥ev
;

68 
i
=0; i<
s¸ìn
->
h
; i++)

69 i‡(
_sˇ∆i°
[
i
])

71 
cuº
=
_sˇ∆i°
[
i
];

72 
cuº
->
√xt
)

74 
¥ev
=
cuº
;

75 
cuº
 = cuº->
√xt
;

76 
	`‰ì
(
¥ev
);

78 
	`‰ì
(
cuº
);

80 
	}
}

83 
	$_fûÕﬁy
()

85 
i
;

86 
i
=0; i<
s¸ìn
->
h
; i++)

87 i‡(
_sˇ∆i°
[
i
])

89 
sˇ≈t
* 
cuº
=
_sˇ∆i°
[
i
];

90 
cuº
!=0)

92 i‡(
cuº
->
√xt
==0)

94 
	`m≠pixñ
(
cuº
->
x
,
i
);

95 
cuº
 = cuº->
√xt
;

99 
sˇ≈t
* 
p2
;

100 
p2
=
cuº
->
√xt
;

101 
	`m≠w‹d
(
cuº
->
x
,
i
,
p2
->x-curr->x);

102 
cuº
 = 
p2
->
√xt
;

106 
	}
}

110 * 
	$gëpﬁy
(* 
num
)

112 
i
;

113 * 
li°
;

114 
	`¥ötf
("EnterÅheÇumber of vertices : ");

115 
	`sˇnf
("%d",
num
);

116 
li°
=(*)
	`ˇŒoc
(2*(*
num
+1), ());

117 
i
=0; i<*
num
; i++)

119 
	`¥ötf
("Vîãx %d => ",
i
);

120 
	`sˇnf
("%d %d",&
li°
[2*
i
],&list[2*i+1]);

122 
li°
[2*(*
num
)] =Üist[0];

123 
li°
[2*(*
num
)+1] =Üist[1];

124 (*
num
)++;

125  
li°
;

126 
	}
}

129 
	$_makñi°
(
numpoöts
, *
pﬁypoöts
)

131 
i
, 
x1
, 
y1
, 
x2
, 
y2
;

132 
i
=0; i<
numpoöts
-1; i++)

134 
x1
 = 
pﬁypoöts
[2*
i
];

135 
y1
 = 
pﬁypoöts
[2*
i
+1];

136 
x2
 = 
pﬁypoöts
[2*
i
+2];

137 
y2
 = 
pﬁypoöts
[2*
i
+3];

138 i‡(
y1
 !
y2
)

139 
	`_dda
(
x1
, 
y1
, 
x2
, 
y2
);

140 i‡(
i
<
numpoöts
-2)

141 if((
y2
>
y1
 && y2<
pﬁypoöts
[2*
i
+5])\

142 || (
y2
<
y1
 && y2>
pﬁypoöts
[2*
i
+5]))

144 
sˇ≈t
* 
exåa
 = (sˇ≈t*)
	`mÆloc
((scanpt));

145 
exåa
->
x
 = 
x2
;

146 
	`_ö£π±
(
exåa
, 
y2
);

149 
	}
}

152 
	$_dda
(
x1
, 
y1
, 
x2
, 
y2
)

154 
dx
=
x2
-
x1
, 
dy
=
y2
-
y1
, 
°ïs
, 
yﬁd
;

155 
xöc
, 
yöc
, 
x
, 
y
;

156 
sˇ≈t
* 
√w
;

157 
°ïs
 = 
	`abs
(
dx
)>˜bs(
dy
)?ábs(dx):abs(dy);

158 
xöc
 = ()
dx
/
°ïs
;

159 
yöc
 = ()
dy
/
°ïs
;

160 
yﬁd
 = (
y1
<
y2
)? ()
	`röt
(y1-1):()rint(y1+1);

161 
x
=
x1
, 
y
=
y1
; 
°ïs
 ;x+=
xöc
, y+=
yöc
, steps--)

163 i‡(()
	`röt
(
y
)!
yﬁd
)

165 
√w
=(
sˇ≈t
*)
	`mÆloc
((scanpt));

166 
√w
->
x
=()
	`röt
(x);

167 
	`_ö£π±
(
√w
,()
	`röt
(
y
));

168 
yﬁd
=()
	`röt
(
y
);

171 i‡(
y2
!=
yﬁd
)

173 
√w
 = (
sˇ≈t
*)
	`mÆloc
((scanpt));

174 
√w
->
x
 = 
x2
;

175 
	`_ö£π±
(
√w
, 
y2
);

177 
	}
}

181 
	$_ö£π±
(
sˇ≈t
* 
√w
, 
row
)

183 
sˇ≈t
 *
cuº
,*
¥ev
;

184 i‡(
_sˇ∆i°
[
row
]==0)

186 
_sˇ∆i°
[
row
] = 
√w
;

187 
_sˇ∆i°
[
row
]->
√xt
 = 0;

190 
¥ev
 = 
_sˇ∆i°
[
row
];

191 i‡(
¥ev
->
x
 > 
√w
->x)

193 
√w
->
√xt
=
¥ev
;

194 
_sˇ∆i°
[
row
]=
√w
;

197 
cuº
 = 
¥ev
->
√xt
;

198 i‡(!
cuº
)

200 
¥ev
->
√xt
=
√w
;

201 
¥ev
->
√xt
->next=0;

206 if(
cuº
->
x
 >
√w
->x)

208 
√w
->
√xt
 = 
cuº
;

209 
¥ev
->
√xt
=
√w
;

212 i‡(!
cuº
->
√xt
)

214 
cuº
->
√xt
=
√w
;

215 
cuº
->
√xt
->next=0;

218 
¥ev
 = 
cuº
;

219 
cuº
 = cuº->
√xt
;

221 
	}
}

225 
	$gëpﬁysize
(
num
, * 
li°
,* 
xmö
, * 
ymö
, * 
xmax
, * 
ymax
)

227 
i
, 
x1
, 
y1
, 
x2
, 
y2
;

228 *
xmax
 = 
li°
[0];

229 *
ymax
 = 
li°
[1];

230 *
xmö
 = 
li°
[0];

231 *
ymö
 = 
li°
[1];

232 
i
=0; i<
num
; i++)

234 i‡(
li°
[2*
i
]>*
xmax
) *xmax=list[2*i];

236 i‡(
li°
[2*
i
]<*
xmö
) *xmin=list[2*i];

237 i‡(
li°
[2*
i
+1]>*
ymax
) *ymax=list[2*i+1];

239 i‡(
li°
[2*
i
+1]<*
ymö
) *ymin=list[2*i+1];

241 
	}
}

	@polygon.h

26 
	~<SDL/SDL.h
>

27 
	~<m©h.h
>

28 
	~<°dlib.h
>

31 
SDL_SurÁ˚
 *
s¸ìn
;

32 
Uöt32
 
_fgcﬁ‹
, 
_bgcﬁ‹
;

35 
s˛n
 
	tsˇ≈t
;

36 
	ss˛n


38 
	mx
;

39 
sˇ≈t
* 
	m√xt
;

42 
sˇ≈t
** 
	g_sˇ∆i°
;

47 
fûÕﬁy
(
numpoöts
, *
pﬁypoöts
);

48 
døwpﬁy
(
numpoöts
, *
pﬁypoöts
);

53 * 
gëpﬁy
(*);

57 
_‰ìli°
();

58 
_makñi°
(, *);

59 
_fûÕﬁy
();

60 
_dda
(, , , );

61 
_ö£π±
(
sˇ≈t
*, );

62 
gëpﬁysize
(, *, *, *, *, *);

66 
	#CHECK_INITIALIZATION
 \

67 i‡(!
	`gëív
("LIBGRAPHICS_ACTIVE")) \

69 
	`Ârötf
(
°dîr
, "*** The graphics system hasÇot been initialized!\n"); \

70 
	`Ârötf
(
°dîr
, "*** Call initgraph() beforeÅryingÅo use graphics functions.\n"); \

71 
	`exô
(-1); \

72 }

	)

	@sample.c

1 
	~<°dlib.h
>

2 
	~"gøphics.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
gdrivî
,
gmode
;

7 
dµoöts
[14] = {200, 150, 300, 250, 400, 150, 425, 350, 300, 275, 150, 350, 200, 150};

8 
Âpoöts
[14] = {500, 150, 600, 250, 700, 150, 725, 350, 600, 275, 450, 350, 500, 150};

9 
gdrivî
 = 
VGA
;
gmode
=
VGAMAX
;

10 
	`öôgøph
(&
gdrivî
,&
gmode
,"");

11 
	`¥ötf
("libgraph shapesánd colors demo\n");

13 
	`£tcﬁ‹
(
RED
);

14 
	`£tf⁄tcﬁ‹
(
RED
);

15 
	`ouâextxy
(5, 60, "line");

16 
	`löe
(200, 20, 700, 100);

17 
	`£tcﬁ‹
(
BLUE
);

18 
	`£tf⁄tcﬁ‹
(
BLUE
);

19 
	`ouâextxy
(5, 200, "circleárcÖieslice");

20 
	`cú˛e
(300, 200, 50);

21 
	`¨c
 (500, 200, 180, 280, 50);

22 
	`põ¶i˚
(680, 200, 0, 110, 50);

23 
	`£tcﬁ‹
(
LIGHTGREEN
);

24 
	`põ¶i˚
(680, 200, 111, 210, 50);

25 
	`£tcﬁ‹
(
LIGHTRED
);

26 
	`põ¶i˚
(680, 200, 210, 360, 50);

27 
	`£tcﬁ‹
(
YELLOW
);

28 
	`£tf⁄tcﬁ‹
(
YELLOW
);

29 
	`ouâextxy
(5, 400, "ellipse fillellipse sector");

30 
	`ñlù£
(300, 400, 0, 360, 100, 50);

31 
	`fûÀŒù£
(500, 400, 50, 110);

32 
	`£˘‹
(680, 400, 0, 110, 100, 50);

33 
	`£tcﬁ‹
(
LIGHTGRAY
);

34 
	`£˘‹
(680, 400, 111, 210, 100, 50);

35 
	`£tcﬁ‹
(
MAGENTA
);

36 
	`£˘‹
(680, 400, 211, 360, 100, 50);

37 
	`gëch
();

38 
	`˛órdevi˚
();

39 
	`£tf⁄tcﬁ‹
(
WHITE
);

40 
	`¥ötf
("libgraph shapesánd colors demo\n");

41 
	`£tcﬁ‹
(
GREEN
);

42 
	`£tf⁄tcﬁ‹
(
GREEN
);

43 
	`ouâextxy
(5, 60, "rectangle");

44 
	`ª˘™gÀ
(200, 40, 600, 130);

45 
	`£tcﬁ‹
(
CYAN
);

46 
	`£tf⁄tcﬁ‹
(
CYAN
);

47 
	`ouâextxy
(5, 200, "drawpoly fillpoly");

48 
	`døwpﬁy
(7, 
dµoöts
);

49 
	`fûÕﬁy
(7, 
Âpoöts
);

50 
	`£tcﬁ‹
(
LIGHTBLUE
);

51 
	`£tf⁄tcﬁ‹
(
LIGHTBLUE
);

52 
	`ouâextxy
(5, 450, "bar bar3d");

53 
	`b¨
(200, 350, 270, 525);

54 
	`b¨3d
(500, 350, 570, 525, 30, 1);

55 
	`gëch
();

57 
	`˛o£gøph
();

59 
	}
}

	@shapes.c

24 
	~"sh≠es.h
"

27 °ru˘ {
x
; 
y
;}
CP
;

31 
	$˛órdevi˚
()

33 
CHECK_INITIALIZATION


34 
	`£tbkcﬁ‹
(
	`gëbkcﬁ‹
());

35 
CP
.
x
 = 0;

36 
CP
.
y
 = 0;

37 
	}
}

41 
	$gëx
()

43  
CP
.
x
;

44 
	}
}

47 
	$gëy
()

49  
CP
.
y
;

50 
	}
}

53 
	$movëo
(
x
, 
y
)

55 
CP
.
x
 = (x>
	`gëmaxx
())? getmaxx() : x;

56 
CP
.
y
 = (y>
	`gëmaxy
())? getmaxy() : y;

57 
CP
.
x
 = (x<0)? 0 : x;

58 
CP
.
y
 = (y<0)? 0 : y;

59 
	}
}

62 
	$movîñ
(
dx
, 
dy
)

64 
CP
.
x
 +
dx
;

65 
CP
.
y
 +
dy
;

66 
	`movëo
(
CP
.
x
, CP.
y
);

67 
	}
}

71 
	$Á°löe
(
x1
, 
y1
, 
x2
, 
y2
)

73 
dx
=
	`abs
(
x1
-
x2
), 
dy
˜bs(
y1
-
y2
), 
p
;

74 
öc
;

75 i‡(!
dy
)

76 
x1
<
x2
? 
	`m≠w‹d
(x1, 
y1
, 
dx
Ë: m≠w‹d(x2, 
y2
, dx);

78 i‡(!
dx
)

79 
y1
<
y2
? 
	`m≠vw‹d
(
x1
, y1, 
dy
Ë: m≠vw‹d(
x2
, y2, dy);

81 i‡(
dx
>=
dy
)

83 
p
 = 2*
dy
-
dx
;

84 i‡(
x1
 >
x2
)

86 
	`SWAP
(
x1
, 
x2
, )

87 
	`SWAP
(
y1
, 
y2
, )

89 
	`m≠pixñ
(
x1
, 
y1
);

90 i‡(
y2
>=
y1
Ë
öc
=1;

91 
öc
=-1;

93 
x1
 < 
x2
)

95 
x1
++;

96 i‡(
p
<0)

97 
p
 +2*
dy
;

100 
y1
+=
öc
;

101 
p
 +2*(
dy
-
dx
);

103 
	`m≠pixñ
(
x1
,
y1
);

108 
p
 = 2*
dx
-
dy
;

109 i‡(
y1
 >
y2
)

111 
	`SWAP
(
x1
, 
x2
, )

112 
	`SWAP
(
y1
, 
y2
, )

114 
	`m≠pixñ
(
x1
, 
y1
);

116 i‡(
x2
>=
x1
Ë
öc
=1;

117 
öc
=-1;

119 
y1
 < 
y2
)

121 
y1
++;

122 i‡(
p
<0)

123 
p
 +2*
dx
;

126 
x1
 +
öc
;

127 
p
 +2*(
dx
-
dy
);

129 
	`m≠pixñ
(
x1
,
y1
);

132 
	}
}

136 
	$thicklöe
(
x1
, 
y1
, 
x2
, 
y2
)

138 
dx
=
	`abs
(
x1
-
x2
), 
dy
˜bs(
y1
-
y2
), 
p
;

139 
öc
, 
width
 = 
_öã∫Æ_löe°yÀ
.
thick√ss
;

141 i‡(!
dy
)

143 i‡(
x1
 >
x2
)

144 
	`SWAP
 (
x1
, 
x2
, );

145 
y1
 -(
width
/2), 
y2
 += (width/2); y1 <= y2; y1++)

146 
	`m≠w‹d
(
x1
, 
y1
, 
dx
);

150 i‡(!
dx
)

152 i‡(
y1
 >
y2
)

153 
	`SWAP
 (
y1
, 
y2
, );

154 
x1
 -(
width
/2), 
x2
 += (width/2); x1 <= x2; x1++)

155 
	`m≠vw‹d
(
x1
, 
y1
, 
dy
);

158 i‡(
dx
>=
dy
)

160 
width
 = 
	`Ãöt
 (width * (()
dx
Ë/ 
	`sqπ
 (dx*dx + 
dy
*dy));

161 
p
 = 2*
dy
-
dx
;

162 i‡(
x1
 >
x2
)

164 
	`SWAP
(
x1
, 
x2
, );

165 
	`SWAP
(
y1
, 
y2
, );

167 
y1
 -
	`Ãöt
 (
width
/2);

168 
y2
 -
	`Ãöt
 (
width
/2);

169 
	`m≠vw‹d
 (
x1
, 
y1
, 
width
);

171 i‡(
y2
>=
y1
)

172 
öc
=1;

174 
öc
=-1;

176 
x1
 < 
x2
)

178 
x1
++;

179 i‡(
p
<0)

180 
p
 +2*
dy
;

183 
y1
+=
öc
;

184 
p
 +2*(
dy
-
dx
);

186 
	`m≠vw‹d
 (
x1
, 
y1
, 
width
);

191 
width
 = 
	`Ãöt
 (width * (()
dy
Ë/ 
	`sqπ
 (
dx
*dx + dy*dy));

192 
p
 = 2*
dx
-
dy
;

193 i‡(
y1
 >
y2
)

195 
	`SWAP
(
x1
, 
x2
, );

196 
	`SWAP
(
y1
, 
y2
, );

198 
x1
 -
	`Ãöt
 (
width
/2);

199 
x2
 -
	`Ãöt
 (
width
/2);

200 
	`m≠w‹d
 (
x1
, 
y1
, 
width
);

202 i‡(
x2
>=
x1
Ë
öc
=1;

203 
öc
=-1;

205 
y1
 < 
y2
)

207 
y1
++;

208 i‡(
p
<0)

209 
p
 +2*
dx
;

212 
x1
 +
öc
;

213 
p
 +2*(
dx
-
dy
);

215 
	`m≠w‹d
 (
x1
, 
y1
, 
width
);

218 
	}
}

222 
	$Á°_löe°yÀ
(
x1
, 
y1
, 
x2
, 
y2
)

224 
dx
=
	`abs
(
x1
-
x2
), 
dy
˜bs(
y1
-
y2
), 
p
;

225 
öc
;

226 
uöt16_t
 
∑âîn
 = 
_öã∫Æ_löe°yÀ
.
u∑âîn
;

228 i‡(!
dy
)

230 i‡(
x1
 >
x2
)

231 
	`SWAP
 (
x1
, 
x2
, );

232 ; 
x1
 <
x2
; x1++, 
∑âîn
 = 
	`ROT
(pattern))

233 i‡(
∑âîn
 & 0x1)

234 
	`m≠pixñ
(
x1
, 
y1
);

238 i‡(!
dx
)

240 i‡(
y1
 >
y2
)

241 
	`SWAP
 (
y1
, 
y2
, );

242 ; 
y1
 <
y2
; y1++, 
∑âîn
 = 
	`ROT
(pattern))

243 i‡(
∑âîn
 & 0x1)

244 
	`m≠pixñ
(
x1
, 
y1
);

247 i‡(
dx
>=
dy
)

249 
p
 = 2*
dy
-
dx
;

250 i‡(
x1
 >
x2
)

252 
	`SWAP
(
x1
, 
x2
, );

253 
	`SWAP
(
y1
, 
y2
, );

255 
	`m≠pixñ
 (
x1
, 
y1
);

256 
öc
 = (
y2
>=
y1
)? 1 : -1;

258 
x1
 < 
x2
)

260 
x1
++;

261 
∑âîn
 = 
	`ROT
 (pattern);

262 i‡(
p
<0)

263 
p
 +2*
dy
;

266 
y1
+=
öc
;

267 
p
 +2*(
dy
-
dx
);

269 i‡(
∑âîn
 & 0x1)

270 
	`m≠pixñ
 (
x1
, 
y1
);

275 
p
 = 2*
dx
-
dy
;

276 i‡(
y1
 >
y2
)

278 
	`SWAP
(
x1
, 
x2
, );

279 
	`SWAP
(
y1
, 
y2
, );

281 
	`m≠pixñ
 (
x1
, 
y1
);

282 
öc
 = (
x2
>=
x1
)? 1 : -1;

284 
y1
 < 
y2
)

286 
y1
++;

287 
∑âîn
 = 
	`ROT
 (pattern);

288 i‡(
p
<0)

289 
p
 +2*
dx
;

292 
x1
 +
öc
;

293 
p
 +2*(
dx
-
dy
);

295 i‡(
∑âîn
 & 0x1)

296 
	`m≠pixñ
 (
x1
, 
y1
);

299 
	}
}

306 
	$thick_löe°yÀ
(
x1
, 
y1
, 
x2
, 
y2
)

308 
dx
=
	`abs
(
x1
-
x2
), 
dy
˜bs(
y1
-
y2
), 
p
;

309 
öc
, 
width
 = 
_öã∫Æ_löe°yÀ
.
thick√ss
;

310 
uöt16_t
 
∑âîn
 = 
_öã∫Æ_löe°yÀ
.
u∑âîn
;

312 i‡(!
dy
)

314 i‡(
x1
 >
x2
)

315 
	`SWAP
 (
x1
, 
x2
, );

316 
y1
 -(
width
/2); 
x1
 <
x2
; x1++, 
∑âîn
 = 
	`ROT
 (pattern))

317 (
∑âîn
 & 0x1)? 
	`m≠vw‹d
(
x1
, 
y1
, 
width
) : 0;

321 i‡(!
dx
)

323 i‡(
y1
 >
y2
)

324 
	`SWAP
 (
y1
, 
y2
, );

325 
x1
 -(
width
/2); 
y1
 <
y2
; y1++, 
∑âîn
 = 
	`ROT
 (pattern))

326 (
∑âîn
 & 0x1)? 
	`m≠w‹d
(
x1
, 
y1
, 
width
) : 0;

329 i‡(
dx
>=
dy
)

331 
width
 = 
	`Ãöt
 (width * (()
dx
Ë/ 
	`sqπ
 (dx*dx + 
dy
*dy));

332 
p
 = 2*
dy
-
dx
;

333 i‡(
x1
 >
x2
)

335 
	`SWAP
(
x1
, 
x2
, );

336 
	`SWAP
(
y1
, 
y2
, );

338 
y1
 -
	`Ãöt
 (
width
/2);

339 
y2
 -
	`Ãöt
 (
width
/2);

340 
	`m≠vw‹d
 (
x1
, 
y1
, 
width
);

341 
öc
 = (
y2
>=
y1
)? 1 : -1;

343 
x1
 < 
x2
)

345 
x1
++;

346 
∑âîn
 = 
	`ROT
 (pattern);

347 i‡(
p
<0)

348 
p
 +2*
dy
;

351 
y1
+=
öc
;

352 
p
 +2*(
dy
-
dx
);

354 (
∑âîn
 & 0x1)? 
	`m≠vw‹d
 (
x1
, 
y1
, 
width
) : 0;

359 
width
 = 
	`Ãöt
 (width * (()
dy
Ë/ 
	`sqπ
 (
dx
*dx + dy*dy));

360 
p
 = 2*
dx
-
dy
;

361 i‡(
y1
 >
y2
)

363 
	`SWAP
(
x1
, 
x2
, );

364 
	`SWAP
(
y1
, 
y2
, );

366 
x1
 -
	`Ãöt
 (
width
/2);

367 
x2
 -
	`Ãöt
 (
width
/2);

368 
	`m≠w‹d
 (
x1
, 
y1
, 
width
);

369 
öc
 = (
x2
>=
x1
)? 1 : -1;

371 
y1
 < 
y2
)

373 
y1
++;

374 
∑âîn
 = 
	`ROT
 (pattern);

375 i‡(
p
<0)

376 
p
 +2*
dx
;

379 
x1
 +
öc
;

380 
p
 +2*(
dx
-
dy
);

382 (
∑âîn
 & 0x1)? 
	`m≠w‹d
 (
x1
, 
y1
, 
width
) : 0;

385 
	}
}

393 
	$löe
(
x1
, 
y1
, 
x2
, 
y2
)

395 
CHECK_INITIALIZATION
;

396 i‡(
_öã∫Æ_löe°yÀ
.
löe°yÀ
 =
SOLID_LINE
)

398 i‡(
_öã∫Æ_löe°yÀ
.
thick√ss
 =
NORM_WIDTH
)

399 
	`Á°löe
(
x1
, 
y1
, 
x2
, 
y2
);

401 
	`thicklöe
 (
x1
, 
y1
, 
x2
, 
y2
);

405 i‡(
_öã∫Æ_löe°yÀ
.
thick√ss
 =
NORM_WIDTH
)

406 
	`Á°_löe°yÀ
 (
x1
, 
y1
, 
x2
, 
y2
);

408 
	`thick_löe°yÀ
 (
x1
, 
y1
, 
x2
, 
y2
);

411 i‡(
x1
 > 
x2
)

412 
	`SWAP
(
x1
, 
x2
, );

413 i‡(
y1
 > 
y2
)

414 
	`SWAP
(
y1
, 
y2
, );

416 
	`ß„_upd©e
(
x1
-
_öã∫Æ_löe°yÀ
.
thick√ss
, 
y1
-_internal_linestyle.thickness,

417 
x2
+
_öã∫Æ_löe°yÀ
.
thick√ss
, 
y2
+_internal_linestyle.thickness);

418 
	}
}

421 
	$löîñ
(
dx
, 
dy
)

424 
	`löe
(
CP
.
x
, CP.
y
, CP.x+
dx
, CP.y+
dy
);

425 
CP
.
x
 +
dx
;

426 
CP
.
y
 +
dy
;

427 
	}
}

429 
	$löëo
(
x
, 
y
)

431 
	`löe
(
CP
.
x
, CP.
y
, x, y);

432 
CP
.
x
 = x;

433 
CP
.
y
 = y;

434 
	}
}

437 
	$m≠sympixñ
(
x
, 
y
, 
xc
, 
yc
, 
symnum
)

439 
symnum
){

441 
	`m≠pixñ
(
y
+
xc
, 
x
+
yc
);

442 
	`m≠pixñ
(
y
+
xc
, -
x
+
yc
);

443 
	`m≠pixñ
(-
y
+
xc
, 
x
+
yc
);

444 
	`m≠pixñ
(-
y
+
xc
, -
x
+
yc
);

446 
	`m≠pixñ
(-
x
+
xc
, -
y
+
yc
);

447 
	`m≠pixñ
(-
x
+
xc
, 
y
+
yc
);

449 
	`m≠pixñ
(
x
+
xc
, -
y
+
yc
);

450 
	`m≠pixñ
(
x
+
xc
, 
y
+
yc
);

453 
	`m≠pixñ
(-
x
+
xc
, 
y
+
yc
);

454 
	`m≠pixñ
(
x
+
xc
, 
y
+
yc
);

456 
	}
}

460 
	$cú˛e
(
xc
, 
yc
, 
ødius
)

462 
x
, 
y
, 
p
=1-
ødius
;

464 
CHECK_INITIALIZATION


466 
x
=0, 
y
=
ødius
, 
p
=1-radius; x<=y; x++)

468 
	`m≠sympixñ
(
x
, 
y
, 
xc
, 
yc
, 8);

469 i‡(
p
>=0)

471 
p
 +(2*
x
 - 2*
y
 + 1);

472 
y
--;

475 
p
 +(2*
x
 + 3);

477 
	`ß„_upd©e
(
xc
-
ødius
, 
yc
-radius, xc+radius+1, yc+radius+1);

478 
	}
}

481 
	$¨c
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
ødius
)

483 
xﬁd
, 
yﬁd
, 
x√w
, 
y√w
;

484 
söthëa
, 
co°hëa
, 
thëa
;

485 
num
;

487 
CHECK_INITIALIZATION


489 
_œ°_¨c
.
x
 = 
xc
;

490 
_œ°_¨c
.
y
 = 
yc
;

492 
thëa
 = 
	`MAX
((1.0/
ødius
), 0.001) ;

493 
num
 = ()
	`röt
(
M_PI
 * 
	`abs
 (
íd™gÀ
-
°™gÀ
Ë/ 180.0 / 
thëa
);

495 
söthëa
 = 
	`sö
(
thëa
);

496 
co°hëa
 = 
	`cos
(
thëa
);

498 
xﬁd
 = 
ødius
 * 
	`cos
(
M_PI
 * 
°™gÀ
 / 180.0);

499 
yﬁd
 = 
ødius
 * 
	`sö
(
M_PI
 * 
°™gÀ
 / 180.0);

501 
_œ°_¨c
.
x°¨t
 = 
xﬁd
;

502 
_œ°_¨c
.
y°¨t
 = 
yﬁd
;

504 ; 
num
;Çum--)

506 
x√w
 = 
xﬁd
 * 
co°hëa
 - 
yﬁd
 * 
söthëa
;

507 
y√w
 = 
xﬁd
 * 
söthëa
 + 
yﬁd
 * 
co°hëa
;

508 
	`m≠pixñ
(()
	`röt
(
x√w
+
xc
), (Ïöt(
y√w
+
yc
));

509 
xﬁd
 = 
x√w
, 
yﬁd
 = 
y√w
;

512 
_œ°_¨c
.
x°¨t
 = 
xﬁd
;

513 
_œ°_¨c
.
y°¨t
 = 
yﬁd
;

515 
	`ß„_upd©e
(
xc
-
ødius
, 
yc
-radius, xc+radius+1, yc+radius+1);

516 
	}
}

519 
	$gë¨cco‹ds
(
¨cco‹d°y≥
 *
giví_°ru˘
)

521 *
giví_°ru˘
 = 
_œ°_¨c
;

522 
	}
}

525 
	$põ¶i˚
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
ødius
)

527 
™gÀ
;

528 
x
, 
y
;

530 
	`¨c
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
ødius
);

532 
x
 = 
	`röt
(
xc
 + 
ødius
 * 
	`cos
(()
°™gÀ
*
M_PI
/180));

533 
y
 = 
	`röt
(
yc
 + 
ødius
 * 
	`sö
(()
°™gÀ
*
M_PI
/180));

534 
	`Á°löe
(
xc
, 
yc
, ()
x
, ()
y
);

536 
x
 = 
	`röt
(
xc
 + 
ødius
 * 
	`cos
(()
íd™gÀ
*
M_PI
/180));

537 
y
 = 
	`röt
(
yc
 + 
ødius
 * 
	`sö
(()
íd™gÀ
*
M_PI
/180));

538 
	`Á°löe
(
xc
, 
yc
, ()
x
, ()
y
);

540 
™gÀ
 = (
°™gÀ
 + 
íd™gÀ
)/2;

541 
x
 = 
	`röt
(
xc
 + 
ødius
/2.0 * 
	`cos
(()
™gÀ
*
M_PI
/180));

542 
y
 = 
	`röt
(
yc
 + 
ødius
/2.0 * 
	`sö
(()
™gÀ
*
M_PI
/180));

544 
	`_bound¨yfûl
(()
x
, ()
y
, 
	`gëcﬁ‹
());

546 
	`ß„_upd©e
(
xc
-
ødius
, 
yc
-radius, xc+radius+1, yc+radius+1);

547 
	}
}

551 
	$ª˘™gÀ
(
À·
, 
t›
, 
right
, 
bŸtom
)

553 
CHECK_INITIALIZATION
;

555 
	`löe
(
À·
,
t›
,
right
,top);

556 
	`löe
(
right
,
t›
,right,
bŸtom
);

557 
	`löe
(
right
,
bŸtom
,
À·
,bottom);

558 
	`löe
(
À·
,
bŸtom
,À·,
t›
);

559 
	}
}

563 
	$ñlù£
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
rx
, 
ry
)

565 
xﬁd
, 
yﬁd
, 
x√w
, 
y√w
;

566 
sö_rxbyry
, 
sö_rybyrx
, 
co°hëa
, 
thëa
;

567 
num
;

569 
CHECK_INITIALIZATION


571 
thëa
 = 
	`MAX
(1.00 / (MAX(
rx
, 
ry
)), 0.001);

572 
num
 = ()
	`röt
(
M_PI
 * 
	`abs
 (
íd™gÀ
-
°™gÀ
Ë/ 180.0 / 
thëa
);

574 
sö_rxbyry
 = ()
rx
/
ry
 * 
	`sö
(
thëa
);

575 
sö_rybyrx
 = ()
ry
/
rx
 * 
	`sö
(
thëa
);

576 
co°hëa
 = 
	`cos
(
thëa
);

578 
xﬁd
 = 
rx
 * 
	`cos
(
M_PI
 * 
°™gÀ
 / 180.0);

579 
yﬁd
 = 
ry
 * 
	`sö
(
M_PI
 * 
°™gÀ
 / 180.0);

581 ; 
num
;Çum--)

583 
x√w
 = 
xﬁd
 * 
co°hëa
 - 
yﬁd
 * 
sö_rxbyry
;

584 
y√w
 = 
xﬁd
 * 
sö_rybyrx
 + 
yﬁd
 * 
co°hëa
;

585 
	`m≠pixñ
(()
	`röt
(
x√w
+
xc
), (Ïöt(
y√w
+
yc
));

586 
xﬁd
 = 
x√w
, 
yﬁd
 = 
y√w
;

589 
	`ß„_upd©e
(
xc
-
rx
, 
yc
-
ry
, xc+rx+1, yc+ry+1);

590 
	}
}

593 
	$£˘‹
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
rx
, 
ry
)

595 
xﬁd
, 
yﬁd
, 
x√w
, 
y√w
;

596 
sö_rxbyry
, 
sö_rybyrx
, 
co°hëa
, 
thëa
;

597 
num
;

599 
CHECK_INITIALIZATION


601 
thëa
 = 
	`MAX
(1.00 / (MAX(
rx
, 
ry
)), 0.001);

602 
num
 = ()
	`röt
(
M_PI
 * (
íd™gÀ
-
°™gÀ
Ë/ 180.0 / 
thëa
);

604 
sö_rxbyry
 = ()
rx
/
ry
 * 
	`sö
(
thëa
);

605 
sö_rybyrx
 = ()
ry
/
rx
 * 
	`sö
(
thëa
);

606 
co°hëa
 = 
	`cos
(
thëa
);

608 
xﬁd
 = 
rx
 * 
	`cos
(
M_PI
 * 
°™gÀ
 / 180.0);

609 
yﬁd
 = 
ry
 * 
	`sö
(
M_PI
 * 
°™gÀ
 / 180.0);

610 
	`löe
(
xc
, 
yc
, 
xﬁd
+xc, 
yﬁd
+yc);

611 ; 
num
;Çum--)

613 
x√w
 = 
xﬁd
 * 
co°hëa
 - 
yﬁd
 * 
sö_rxbyry
;

614 
y√w
 = 
xﬁd
 * 
sö_rybyrx
 + 
yﬁd
 * 
co°hëa
;

615 
	`m≠pixñ
(()
	`röt
(
x√w
+
xc
), (Ïöt(
y√w
+
yc
));

616 
xﬁd
 = 
x√w
, 
yﬁd
 = 
y√w
;

618 
	`löe
(
xc
, 
yc
, 
x√w
+xc, 
y√w
+yc);

619 
thëa
 = (
°™gÀ
+
íd™gÀ
)/2.0;

621 
x√w
 = 
	`röt
(
xc
 + 
rx
/2.0 * 
	`cos
(
thëa
*
M_PI
/180));

622 
y√w
 = 
	`röt
(
yc
 + 
rx
/2.0 * 
	`sö
(
thëa
*
M_PI
/180));

624 
	`_bound¨yfûl
(()
x√w
, ()
y√w
, 
	`gëcﬁ‹
());

625 
	`ß„_upd©e
(
xc
-
rx
, 
yc
-
ry
, xc+rx+1, yc+ry+1);

626 
	}
}

630 
	$_bound¨yfûl
(
x
, 
y
, 
cﬁ‹
)

632 
cuº
;

633 i‡(
x
>
s¸ìn
->
w
 || x<0 || 
y
>s¸ìn->
h
 || y<0)

635 
cuº
 = 
	`gëpixñ
(
x
, 
y
);

636 i‡((
cuº
 !
	`gëcﬁ‹
()Ë&& (cuº!
cﬁ‹
))

638 
	`m≠pixñ
(
x
, 
y
);

639 
	`_bound¨yfûl
(
x
+1, 
y
, 
cﬁ‹
);

640 
	`_bound¨yfûl
(
x
-1, 
y
, 
cﬁ‹
);

641 
	`_bound¨yfûl
(
x
, 
y
+1, 
cﬁ‹
);

642 
	`_bound¨yfûl
(
x
, 
y
-1, 
cﬁ‹
);

644 
	}
}

647 
	$Êoodfûl
(
x
, 
y
, 
cﬁ‹
)

649 
CHECK_INITIALIZATION


650 
	`_bound¨yfûl
(
x
, 
y
, 
cﬁ‹
);

651 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0,0,0,0);

652 
	}
}

655 
	$fûÀŒù£
(
xc
, 
yc
, 
rx
, 
ry
)

657 
x
, 
y
;

658 
p1
, 
p2
, 
rx2
, 
ry2
;

660 
CHECK_INITIALIZATION


662 
rx2
 = 
rx
*rx;

663 
ry2
 = 
ry
*ry;

664 
x
=0;

665 
y
=
ry
;

666 
	`m≠sympixñ
(
x
, 
y
, 
xc
, 
yc
, 2);

667 
p1

ry2
-
rx2
*
ry
+rx2/4;

671 
x
++;

672 if(
p1
<0)

673 
p1
+2*
ry2
*
x
+ry2;

675 
y
--;

676 
p1
+2*
ry2
*
x
-2*
rx2
*
y
+1+ry2;

678 
	`m≠w‹d
(-
x
+
xc
, 
y
+
yc
, 2*x);

679 
	`m≠w‹d
(-
x
+
xc
, -
y
+
yc
, 2*x);

680 } 
ry2
*
x
<
rx2
*
y
);

682 
p2
 = (
ry2
*(
x
+1/2)*(x+1/2Ë+ 
rx2
*(
y
-1)*(y-1) -rx2*ry2);

685 
y
--;

686 i‡(
p2
>0)

687 
p2
+-2*
rx2
*
y
 +Ñx2;

689 
x
++;

690 
p2
+2*
ry2
*
x
 - 2*
rx2
*
y
 +Ñx2;

692 
	`m≠w‹d
(-
x
+
xc
, 
y
+
yc
, 2*x);

693 
	`m≠w‹d
(-
x
+
xc
, -
y
+
yc
, 2*x);

694 } 
y
>=0);

695 
	`ß„_upd©e
(
xc
-
rx
, 
yc
-
ry
, xc+rx+1, yc+ry+1);

696 
	}
}

700 
	$gíñlù£
(
xc
, 
yc
, 
rx
, 
ry
, 
™gÀ
)

702 
x
, 
y
;

703 
p1
, 
p2
, 
rx2
, 
ry2
;

704 
co°
, 
söt
;

705 
thëa
 = 
™gÀ
 * 
M_PI
 / 180;

706 
co°
 = 
	`cos
 (
thëa
), 
söt
 = 
	`sö
 (theta);

708 
CHECK_INITIALIZATION


710 i‡(
ry
 <= 0)Ñy = 1;

711 i‡(
rx
 <= 0)Ñx = 1;

712 
rx2
 = 
rx
*rx;

713 
ry2
 = 
ry
*ry;

714 
x
=0;

715 
y
=
ry
;

717 
	`m≠pixñ
(()
	`röt
(
x
*
co°
 - 
y
*
söt
 + 
xc
),

718 ()
	`röt
(
x
*
söt
 + 
y
*
co°
 + 
yc
));

719 
	`m≠pixñ
(()
	`röt
(-
x
*
co°
 + 
y
*
söt
 + 
xc
),

720 ()
	`röt
(-
x
*
söt
 - 
y
*
co°
 + 
yc
));

722 
p1

ry2
-
rx2
*
ry
+rx2/4;

726 
x
++;

727 if(
p1
<0)

728 
p1
+2*
ry2
*
x
+ry2;

730 
y
--;

731 
p1
+2*
ry2
*
x
-2*
rx2
*
y
+1+ry2;

734 
	`m≠pixñ
(()
	`röt
(
x
*
co°
 - 
y
*
söt
 + 
xc
),

735 ()
	`röt
(
x
*
söt
 + 
y
*
co°
 + 
yc
));

736 
	`m≠pixñ
(()
	`röt
(-
x
*
co°
 + 
y
*
söt
 + 
xc
),

737 ()
	`röt
(-
x
*
söt
 - 
y
*
co°
 + 
yc
));

739 
	`m≠pixñ
(()
	`röt
(
x
*
co°
 + 
y
*
söt
 + 
xc
),

740 ()
	`röt
(
x
*
söt
 - 
y
*
co°
 + 
yc
));

741 
	`m≠pixñ
(()
	`röt
(-
x
*
co°
 - 
y
*
söt
 + 
xc
),

742 ()
	`röt
(-
x
*
söt
 + 
y
*
co°
 + 
yc
));

744 } 
ry2
*
x
<
rx2
*
y
);

747 
p2
 = (
ry2
*(
x
+1/2)*(x+1/2Ë+ 
rx2
*(
y
-1)*(y-1) -rx2*ry2);

751 
y
--;

752 i‡(
p2
>0)

753 
p2
+-2*
rx2
*
y
 +Ñx2;

756 
x
++;

757 
p2
+2*
ry2
*
x
 - 2*
rx2
*
y
 +Ñx2;

760 
	`m≠pixñ
(()
	`röt
(
x
*
co°
 - 
y
*
söt
 + 
xc
),

761 ()
	`röt
(
x
*
söt
 + 
y
*
co°
 + 
yc
));

762 
	`m≠pixñ
(()
	`röt
(-
x
*
co°
 + 
y
*
söt
 + 
xc
),

763 ()
	`röt
(-
x
*
söt
 - 
y
*
co°
 + 
yc
));

765 
	`m≠pixñ
(()
	`röt
(
x
*
co°
 + 
y
*
söt
 + 
xc
),

766 ()
	`röt
(
x
*
söt
 - 
y
*
co°
 + 
yc
));

767 
	`m≠pixñ
(()
	`röt
(-
x
*
co°
 - 
y
*
söt
 + 
xc
),

768 ()
	`röt
(-
x
*
söt
 + 
y
*
co°
 + 
yc
));

770 } 
y
>=0);

771 
rx
 = 
	`MAX
 (rx, 
ry
);

772 
	`ß„_upd©e
(
xc
 - 
rx
, 
yc
 -Ñx, xc +Ñx, yc +Ñx);

773 
	}
}

778 
	$b¨
(
À·
, 
t›
, 
right
, 
bŸtom
)

780 
y
=
t›
, 
dx
 = 
right
-
À·
;

782 
CHECK_INITIALIZATION


784 
y
 <
bŸtom
)

786 
	`m≠w‹d
(
À·
 , 
y
, 
dx
);

787 
y
++;

789 
	`ß„_upd©e
(
À·
, 
t›
, 
right
+1, 
bŸtom
+1);

790 
	}
}

793 
	$b¨3d
(
À·
, 
t›
, 
right
, 
bŸtom
,

794 
dïth
, 
t›Êag
)

796 
x
, 
y
;

797 
	`b¨
(
À·
, 
t›
, 
right
, 
bŸtom
);

798 
	`movëo
(
right
, 
bŸtom
);

799 
	`löîñ
(
dïth
*
	`cos
(
M_PI
/6), -dïth*
	`sö
(M_PI/6));

800 
	`löîñ
(0, 
t›
-
bŸtom
);

801 i‡(
t›Êag
)

803 
	`löîñ
(
À·
-
right
, 0);

804 
	`löëo
(
À·
, 
t›
);

805 
	`movëo
(
right
, 
t›
);

806 
	`löîñ
(
dïth
*
	`cos
(
M_PI
/6), -dïth*
	`sö
(M_PI/6));

808 
	}
}

811 
	$gëlöe£âögs
 (
löe£âög°y≥
 *
de°
)

813 *
de°
 = 
_öã∫Æ_löe°yÀ
;

814 
	}
}

817 
	$£éöe°yÀ
 (
löe°yÀ
, 
u∑âîn
, 
thick√ss
)

819 
_öã∫Æ_löe°yÀ
.
löe°yÀ
 =Üinestyle;

821 
löe°yÀ
) {

822 
SOLID_LINE
 :

823 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0xffff; ;

824 
DOTTED_LINE
 :

825 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0x3333; ;

826 
CENTER_LINE
 :

827 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0x0c3f; ;

828 
DASHED_LINE
 :

829 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0x1f1f; ;

830 
USERBIT_LINE
 :

831 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = (
uöt16_t
)upattern; ;

833 
_öã∫Æ_löe°yÀ
.
u∑âîn
 = 0xffff; ;

836 
_öã∫Æ_löe°yÀ
.
thick√ss
 = (thickness <= 0)? 1:thickness;

837 
	}
}

	@shapes.h

26 
	~<SDL/SDL.h
>

27 
	~<m©h.h
>

28 
	~<°döt.h
>

30 
	#SWAP
(
A
,
B
,
TYPE
Ë{TYPE 
ãmp
=A; A=B; BÒemp;}

	)

31 
	#MAX
(
A
,
B
Ë(A)>(B)? (AË: (B)

	)

32 
	#ROT
(
∑âîn
Ë((’©ã∫Ë>> 0x1Ë| (’©ã∫Ë<< 0xf))

	)

35 
	elöe_°yÀs
 {

36 
	mSOLID_LINE
,

37 
	mDOTTED_LINE
,

38 
	mCENTER_LINE
,

39 
	mDASHED_LINE
,

40 
	mUSERBIT_LINE


44 
	elöe_widths
 {
	mNORM_WIDTH
=1, 
	mTHICK_WIDTH
=3};

48 
SDL_SurÁ˚
 *
s¸ìn
;

49 
Uöt32
 
_fgcﬁ‹
, 
_bgcﬁ‹
;

52 
	s¨cco‹d°y≥
 {

53 
	mx
, 
	my
;

54 
	mx°¨t
, 
	my°¨t
;

55 
	mxíd
, 
	myíd
;

60 
	slöe£âög°y≥
 {

61 
	mlöe°yÀ
;

62 
uöt16_t
 
	mu∑âîn
;

63 
	mthick√ss
;

67 
˛órdevi˚
();

69 
gëx
();

71 
gëy
();

73 
movëo
(
x
, 
y
);

75 
movîñ
(
dx
, 
dy
);

77 
löe
(
x1
, 
y1
, 
x2
, 
y2
);

79 
löîñ
(
dx
, 
dy
);

81 
löëo
(
x
, 
y
);

83 
cú˛e
(
xc
, 
yc
, 
ødius
);

85 
¨c
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
ødius
);

87 
põ¶i˚
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
ødius
);

89 
ª˘™gÀ
(
À·
, 
t›
, 
right
, 
bŸtom
);

91 
ñlù£
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
rx
, 
ry
);

93 
£˘‹
(
xc
, 
yc
, 
°™gÀ
, 
íd™gÀ
, 
rx
, 
ry
);

95 
Êoodfûl
(
x
, 
y
, 
cﬁ‹
);

97 
fûÀŒù£
(
xc
, 
yc
, 
rx
, 
ry
);

99 
gíñlù£
(
xc
, 
yc
, 
rx
, 
ry
, 
thëa
);

101 
b¨
(
À·
, 
t›
, 
right
, 
bŸtom
);

103 
b¨3d
(
À·
, 
t›
, 
right
, 
bŸtom
,

104 
dïth
, 
t›Êag
);

107 
gëlöe£âögs
 (
löe£âög°y≥
 *);

109 
£éöe°yÀ
 (
löe°yÀ
, 
u∑âîn
, 
thick√ss
);

113 
_bound¨yfûl
(, , );

115 
¨cco‹d°y≥
 
	g_œ°_¨c
;

121 
löe£âög°y≥
 
	g_öã∫Æ_löe°yÀ
;

124 
	#CHECK_INITIALIZATION
 \

125 i‡(!
	`gëív
("LIBGRAPHICS_ACTIVE")) \

127 
	`Ârötf
(
°dîr
, "*** The graphics system hasÇot been initialized!\n"); \

128 
	`Ârötf
(
°dîr
, "*** Call initgraph() beforeÅryingÅo use graphics functions.\n"); \

129 
	`exô
(-1); \

130 }

	)

	@text.c

24 
	~"gπext.h
"

26 °ru˘ {
x
;
y
;}
CP
;

31 
Uöt32
 
	$GëPixñ
(
SDL_SurÁ˚
 *
SurÁ˚
, 
Söt32
 
X
, Söt32 
Y
)

34 
Uöt8
 *
bôs
;

35 
Uöt32
 
Bµ
;

37 i‡(
X
<0Ë
	`Âuts
("SFONT ERROR: xÅoÿsmÆ»ö GëPixñ. Rï‹àthi†tÿ<k¨lb@gmx.√t>", 
°dîr
);

38 i‡(
X
>=
SurÁ˚
->
w
Ë
	`Âuts
("SFONT ERROR: xÅoÿbig i¿GëPixñ. Rï‹àthi†tÿ<k¨lb@gmx.√t>", 
°dîr
);

40 
Bµ
 = 
SurÁ˚
->
f‹m©
->
ByãsPîPixñ
;

42 
bôs
 = ((
Uöt8
 *)
SurÁ˚
->
pixñs
)+
Y
*SurÁ˚->
pôch
+
X
*
Bµ
;

45 
Bµ
) {

47  *((
Uöt8
 *)
SurÁ˚
->
pixñs
 + 
Y
 * SurÁ˚->
pôch
 + 
X
);

50  *((
Uöt16
 *)
SurÁ˚
->
pixñs
 + 
Y
 * SurÁ˚->
pôch
/2 + 
X
);

53 
Uöt8
 
r
, 
g
, 
b
;

54 
r
 = *((
bôs
)+
SurÁ˚
->
f‹m©
->
Rshi·
/8);

55 
g
 = *((
bôs
)+
SurÁ˚
->
f‹m©
->
Gshi·
/8);

56 
b
 = *((
bôs
)+
SurÁ˚
->
f‹m©
->
Bshi·
/8);

57  
	`SDL_M≠RGB
(
SurÁ˚
->
f‹m©
, 
r
, 
g
, 
b
);

61  *((
Uöt32
 *)
SurÁ˚
->
pixñs
 + 
Y
 * SurÁ˚->
pôch
/4 + 
X
);

66 
	}
}

68 
	$InôF⁄t2
(
SF⁄t_F⁄tInfo
 *
F⁄t
)

70 
x
 = 0, 
i
 = 0;

72 i‡–
F⁄t
->
SurÁ˚
==
NULL
 ) {

73 
	`Ârötf
(
°dîr
, "The font hasÇot beenÜoaded!\n");

74 
	`exô
(1);

77 i‡(
	`SDL_MUSTLOCK
(
F⁄t
->
SurÁ˚
)Ë
	`SDL_LockSurÁ˚
(Font->Surface);

79  
x
 < 
F⁄t
->
SurÁ˚
->
w
 ) {

80 if(
	`GëPixñ
(
F⁄t
->
SurÁ˚
,
x
,0)==
	`SDL_M≠RGB
(F⁄t->SurÁ˚->
f‹m©
,255,0,255)) {

81 
F⁄t
->
Ch¨Pos
[
i
++]=
x
;

82 –
x
 < 
F⁄t
->
SurÁ˚
->
w
-1Ë&& (
	`GëPixñ
(F⁄t->SurÁ˚,x,0)==
	`SDL_M≠RGB
(F⁄t->SurÁ˚->
f‹m©
,255,0,255)))

83 
x
++;

84 
F⁄t
->
Ch¨Pos
[
i
++]=
x
;

86 
x
++;

88 i‡(
	`SDL_MUSTLOCK
(
F⁄t
->
SurÁ˚
)Ë
	`SDL_U∆ockSurÁ˚
(Font->Surface);

90 
F⁄t
->
h
=F⁄t->
SurÁ˚
->h;

91 
	`SDL_SëCﬁ‹Key
(
F⁄t
->
SurÁ˚
, 
SDL_SRCCOLORKEY
, 
	`GëPixñ
(F⁄t->SurÁ˚, 0, F⁄t->SurÁ˚->
h
-1));

92 
	}
}

95 
	$InôF⁄t
(
SDL_SurÁ˚
 *
F⁄t
)

97 
I¡î«lF⁄t
.
SurÁ˚
=
F⁄t
;

98 
	`InôF⁄t2
(&
I¡î«lF⁄t
);

99 
	}
}

102 
	$make•a˚
(
SF⁄t_F⁄tInfo
 *
F⁄t
, 
ch
)

104 
SDL_Re˘
 
d°ª˘
;

105 
Uöt8
* 
buÂ
;

106 
x1
,
y1
=0,
ofs
;

109 i‡(
ch
==' ') {

110 
TP
.
x
-=
F⁄t
->
Ch¨Pos
[2]-Font->CharPos[1];

111 i‡(
TP
.
x
<0) TP.x=0;

112 
d°ª˘
.
w
 = 
F⁄t
->
Ch¨Pos
[2]-Font->CharPos[1];

115 
ofs
=(
ch
-33)*2+1;

116 
d°ª˘
.
w
 = (
F⁄t
->
Ch¨Pos
[
ofs
+2]+Font->CharPos[ofs+1])/2-(Font->CharPos[ofs]+Font->CharPos[ofs-1])/2;

117 
TP
.
x
 -(
F⁄t
->
Ch¨Pos
[
ofs
+1]-Font->CharPos[ofs]);

118 i‡(
TP
.
x
<0) TP.x = 0;

120 
d°ª˘
.
h
 = 
F⁄t
->
SurÁ˚
->h-1;

121 
x1
=
TP
.
x
; x1<TP.x+
d°ª˘
.
w
; x1++)

122 
y1
=
TP
.
y
; y1<TP.y+
d°ª˘
.
h
; y1++)

124 
buÂ
 = (
Uöt8
 *)
s¸ìn
->
pixñs
 + 
y1
*s¸ìn->
pôch
 + 
x1
;

125 *
buÂ
 = 
_bgcﬁ‹
;

127 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 
TP
.
y
, 
x1
, 
y1
);

131 
	}
}

134 
	$MPutSåög2
(
SF⁄t_F⁄tInfo
 *
F⁄t
, *
ãxt
)

136 
ofs
;

137 
√wlöe
=0;

138 
i
=0;

139 
SDL_Re˘
 
§¸e˘
,
d°ª˘
;

141 
ãxt
[
i
]!='\0') {

142 i‡(
ãxt
[
i
]==' ') {

143 
TP
.
x
+=
F⁄t
->
Ch¨Pos
[2]-Font->CharPos[1];

144 
i
++;

146 i‡(
ãxt
[
i
]=='\n') {

147 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0 ,
TP
.
y
, TP.
x
, TP.y+
F⁄t
->
SurÁ˚
->
h
-1);

148 
TP
.
x
 = 0;

149 
TP
.
y
 = TP.y+
F⁄t
->
SurÁ˚
->
h
-1;

150 
i
++;

151 
√wlöe
++;

153 i‡(
ãxt
[
i
]=='\t') {

154 
TP
.
x
 = TP.x + 8*(
F⁄t
->
Ch¨Pos
[2]-Font->CharPos[1]);

155 
i
++;

158 
ofs
=(
ãxt
[
i
]-33)*2+1;

159 
§¸e˘
.
w
 = 
d°ª˘
.w = (
F⁄t
->
Ch¨Pos
[
ofs
+2]+Font->CharPos[ofs+1])/2\

160 -(
F⁄t
->
Ch¨Pos
[
ofs
]+Font->CharPos[ofs-1])/2;

161 
§¸e˘
.
h
 = 
d°ª˘
.h = 
F⁄t
->
SurÁ˚
->h-1;

162 
§¸e˘
.
x
 = (
F⁄t
->
Ch¨Pos
[
ofs
]+Font->CharPos[ofs-1])/2;

163 
§¸e˘
.
y
 = 1;

164 i‡–
s¸ìn
->
w
 - 
TP
.
x
 <
d°ª˘
.w)

166 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0 , 
TP
.
y
, TP.
x
, TP.y+
§¸e˘
.y);

167 
TP
.
x
 = 
s¸ìn
->
w
 - TP.x;

168 
TP
.
y
 = TP.y+
d°ª˘
.
h
;

169 
√wlöe
++;

171 i‡–
s¸ìn
->
h
-
TP
.
y
 <
§¸e˘
.h)

174 
Uöt8
* 
buÂ
;

175 
x1
,
y1
,
c
=0;

176 
	`SDL_Upd©eRe˘
(
s¸ìn
,0,0,0,0);

177 
c
!=' ')

178 
c
=
	`grgëch
();

179 
x1
=0,
buÂ
=(
Uöt8
 *)
s¸ìn
->
pixñs
; x1<=s¸ìn->
w
; x1++)

180 
y1
=0; y1<=
s¸ìn
->
h
; y1++,
buÂ
++)

181 *
buÂ
 = 
_bgcﬁ‹
;

182 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0,0,0,0);

183 
TP
.
y
 = 
s¸ìn
->
h
-TP.y;

186 
d°ª˘
.
x
 = 
TP
.x-()(
F⁄t
->
Ch¨Pos
[
ofs
]-Font->CharPos[ofs-1])/2;

187 
d°ª˘
.
y
 = 
TP
.y;

189 
	`SDL_BlôSurÁ˚
–
F⁄t
->
SurÁ˚
, &
§¸e˘
, 
s¸ìn
, &
d°ª˘
);

190 
	`SDL_Upd©eRe˘
(
s¸ìn
,
d°ª˘
.
x
,d°ª˘.
y
,d°ª˘.
w
,d°ª˘.
h
);

191 
TP
.
x
 +
F⁄t
->
Ch¨Pos
[
ofs
+1]-Font->CharPos[ofs];

192 
i
++;

195 
	}
}

197 
	$MPutSåög
(*
ãxt
)

199 
	`MPutSåög2
(&
I¡î«lF⁄t
, 
ãxt
);

200 
	}
}

203 
	$F⁄t_I≈ut
(*
öput
, 
num
)

205 
SDL_Evít
 
evít
;

206 
ch
 = 0,
i
=0,
cou¡
=0;

207 
quô
=0;

208 *
cuºít
=
öput
;

209  !
quô
 )

210 i‡(
	`SDL_PﬁlEvít
–&
evít
 ))

211  
evít
.
ty≥
 ){

212 
SDL_KEYDOWN
:

213 
ch
=
evít
.
key
.
keysym
.
sym
;

214 i‡(
	`i•röt
(
ch
))

216 i‡(!
i
)

217 
cuºít
=
öput
;

219 
cuºít
++;

220 
öput
[
i
]=
ch
;

221 
öput
[++
i
]='\0';

222 
	`MPutSåög
(
cuºít
);

224 i‡(
ch
==
SDLK_BACKSPACE
 && 
i
>0)

226 
i
--;

227 
cuºít
--;

228 
	`make•a˚
(&
I¡î«lF⁄t
, 
öput
[
i
]);

229 
öput
[
i
]='\0';

232 
SDL_KEYUP
:

233 i‡(
evít
.
key
.
keysym
.
sym
!=
SDLK_RETURN
)

237 
cou¡
++;

238 
TP
.
x
 = 0;

239 
TP
.
y
 +
I¡î«lF⁄t
.
SurÁ˚
->
h
;

240 
öput
[
i
]=' ';

241 
öput
[++
i
]='\0';

242 
cuºít
++;

243 i‡(
cou¡
<
num
)

246 
SDL_QUIT
:

247 
quô
 = 1;

253 
	`SDL_Dñay
(10);

254 
	}
}

257 
	$grgëch
()

259 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

264 
c
;

265 
ãrmios
 
èâr
,
ßved_©åibuãs
;

266 
	`tcgë©å
 (
STDIN_FILENO
, &
ßved_©åibuãs
);

267 
	`tcgë©å
 (
STDIN_FILENO
, &
èâr
);

268 
èâr
.
c_lÊag
 &~(
ICANON
|
ECHO
);

269 
	`tc£èâr
 (
STDIN_FILENO
, 
TCSAFLUSH
, &
èâr
);

270 
	`ªad
(
STDIN_FILENO
, &
c
,1);

271 
	`tc£èâr
 (
STDIN_FILENO
, 
TCSANOW
, &
ßved_©åibuãs
);

272  
c
;

276 
quô
=0,
c
;

277 
SDL_Evít
 
evít
;

278  !
quô
 )

279 i‡(
	`SDL_PﬁlEvít
–&
evít
 ))

280  
evít
.
ty≥
 ){

281 
SDL_KEYDOWN
:

282 
c
=
evít
.
key
.
keysym
.
sym
;

283 i‡(
	`i•röt
(
c
Ë|| c==
SDLK_RETURN
)

284  
c
;

286 
SDL_ACTIVEEVENT
:

287 i‡((
evít
.
a˘ive
.
°©e
 =
SDL_APPINPUTFOCUS
)\

288 && 
evít
.
a˘ive
.
gaö
)

289 
	`ª‰esh_öãºu±
(0);

291 
SDL_QUIT
:

292 
quô
 = 1;

300 
	`SDL_WaôEvít
(0);

304 
	}
}

307 
	$grgëche
()

309 
c
 = 
	`grgëch
();

310 
	`gΩrötf
("%c", 
c
);

311 (
c
);

312 
	}
}

315 
	$kbhô
()

317 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

319 
c
, 
ﬁdÊags
 = 
	`f˙é
(
STDIN_FILENO
, 
F_GETFL
, 0);

320 
ãrmios
 
èâr
,
ßved_©åibuãs
;

321 
	`f˙é
(
STDIN_FILENO
, 
F_SETFL
, 
ﬁdÊags
|
O_NONBLOCK
);

322 
	`tcgë©å
 (
STDIN_FILENO
, &
ßved_©åibuãs
);

323 
	`tcgë©å
 (
STDIN_FILENO
, &
èâr
);

324 
èâr
.
c_lÊag
 &~(
ICANON
|
ECHO
);

325 
	`tc£èâr
 (
STDIN_FILENO
, 
TCSANOW
, &
èâr
);

326 i‡((
	`ªad
(
STDIN_FILENO
, &
c
, 1)Ë!
EOF
)

328 
	`f˙é
(
STDIN_FILENO
, 
F_SETFL
, 
ﬁdÊags
);

329 
	`tc£èâr
 (
STDIN_FILENO
, 
TCSAFLUSH
, &
ßved_©åibuãs
);

330 
	`ungëc
(
c
, 
°dö
);

331 (
c
);

335 
	`f˙é
(
STDIN_FILENO
, 
F_SETFL
, 
ﬁdÊags
);

336 
	`dñay
(100);

337 
	`tc£èâr
 (
STDIN_FILENO
, 
TCSANOW
, &
ßved_©åibuãs
);

343 
SDL_Evít
 
evít
;

344 if(
	`SDL_PﬁlEvít
(&
evít
Ë&& (evít.
ty≥
 =
SDL_KEYDOWN
))

346 
	`SDL_PushEvít
(&
evít
);

347 (
evít
.
key
.
keysym
.
sym
);

350 i‡((
evít
.
ty≥
 =
SDL_ACTIVEEVENT
Ë&&”vít.
a˘ive
.
°©e
 =
SDL_APPINPUTFOCUS
Ë&&Évít.a˘ive.
gaö
)

351 
	`ª‰esh_öãºu±
(0);

352 
	`SDL_Dñay
(100);

356 
	}
}

358 
	$gΩrötf
(c⁄° * 
ãxt
,...)

360 
va_li°
 
≠
;

361 
num
=0;

362 
	`va_°¨t
 (
≠
, 
ãxt
);

364 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

366 
num
 = 
	`v¥ötf
(
ãxt
, 
≠
);

370 *
ouçut
;

371 
num
 = 
	`va•rötf
(&
ouçut
, 
ãxt
, 
≠
);

373 
	`MPutSåög
(
ouçut
);

374 
	`‰ì
(
ouçut
);

376 
	`va_íd
(
≠
);

377  
num
;

378 
	}
}

381 
	$grsˇnf
(c⁄° * 
ãxt
,...)

383 
va_li°
 
≠
;

384 
num
=0;

385 
	`va_°¨t
 (
≠
, 
ãxt
);

387 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

389 
num
 = 
	`vsˇnf
(
ãxt
, 
≠
);

393 
öput
[
SCAN_BUF
];

394 
ãm∂©e
[]="1 2 3 4 5 6 7 8 9 10";

396 
SDL_Evít
 
evít
;

397 
SDLMod
 
md
;

398 
ch
 = 0,
i
=0;

399 
quô
=0;

400 *
cuºít
=
öput
;

401 
num
 = 
	`vssˇnf
(&
ãm∂©e
,
ãxt
,
≠
);

402 
	`SDL_E«bÀKeyRïót
–
SDL_DEFAULT_REPEAT_DELAY
, 
SDL_DEFAULT_REPEAT_INTERVAL
);

403 
	`SDL_E«bÀUNICODE
(1);

404  !
quô
 )

405 i‡(
	`SDL_PﬁlEvít
–&
evít
 ))

406  
evít
.
ty≥
 ){

407 
SDL_KEYDOWN
:

408 
ch
=
evít
.
key
.
keysym
.
unicode
;

409 i‡(
	`i•röt
(
ch
Ë&& 
i
<
SCAN_BUF
-1)

411 i‡(!
i
Ë
cuºít
=
öput
; current++;

412 
öput
[
i
]=
ch
;

413 
öput
[++
i
]='\0';

414 
	`MPutSåög
(
cuºít
);

417 i‡(
ch
==
SDLK_BACKSPACE
 && 
i
>0)

419 
i
--;

420 
cuºít
--;

421 
	`make•a˚
(&
I¡î«lF⁄t
, 
öput
[
i
]);

422 
öput
[
i
]='\0';

425 
SDL_KEYUP
:

426 
md
 = 
evít
.
key
.
keysym
.
mod
;

427 if–(
md
 & 
KMOD_RCTRL
Ë|| ( md & 
KMOD_LCTRL
 ) )

428 {i‡(
evít
.
key
.
keysym
.
sym
==
SDLK_c
)

430 
	`MPutSåög
("\nKeyboard Interrupt detected. Qutting...\n");

431 
	`SDL_Dñay
(200);

432 
	`exô
(0);

435 i‡(
evít
.
key
.
keysym
.
sym
!=
SDLK_RETURN
) ;

438 i‡(
i
<
SCAN_BUF
-1 && 
TP
.
x
!=0)

440 
öput
[
i
]=' ';

441 
öput
[++
i
]='\0';

442 
cuºít
++;

444 
öput
[
i
]='\0';

445 
TP
.
x
 = 0;

446 
TP
.
y
 +
I¡î«lF⁄t
.
SurÁ˚
->
h
;

447 i‡(
	`vssˇnf
(&
öput
,
ãxt
,
≠
Ë< 
num
) ;

451 
SDL_QUIT
:

452 
quô
 = 1;

454 
SDL_ACTIVEEVENT
:

455 i‡((
evít
.
a˘ive
.
°©e
 =
SDL_APPINPUTFOCUS
)\

456 && 
evít
.
a˘ive
.
gaö
)

457 
	`ª‰esh_öãºu±
(0);

464 
SDL_Evít
 
evít
;

465 
	`MPutSåög
("_");

466 
	`SDL_WaôEvít
(&
evít
);

467 
	`SDL_PushEvít
(&
evít
);

468 
	`make•a˚
(&
I¡î«lF⁄t
,'_');

471 
	`va_íd
(
≠
);

472  
num
;

473 
	}
}

475 
	$grgëch¨
()

477 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

479 (
	`gëc
(
°dö
));

483 
c
=
	`grgëch
();

484 
	`gΩutch¨
(
c
);

485 (
c
);

487 
	}
}

490 
	$gΩutch¨
(
c
)

492 i‡(
	`gëív
("LIBGRAPHICS_ACTIVE")==0)

494 (
	`putc
(
c
, 
°dout
));

498 
c
;

499 
	`gΩrötf
("%c", 
c
);

500 (
c
);

502 
	}
}

505 
	$ouâext
(* 
ãxt°rög
)

507 
xbak
 = 
TP
.
x
, 
ybak
 = TP.
y
;

508 
CHECK_INITIALIZATION


509 
TP
.
x
 = 
CP
.x, TP.
y
 = CP.y;

510 
	`MPutSåög
(
ãxt°rög
);

511 
TP
.
x
 = 
xbak
, TP.
y
 = 
ybak
;

512 
	}
}

514 
	$ouâextxy
(
x
, 
y
, * 
ãxt°rög
)

516 
xbak
 = 
TP
.
x
, 
ybak
 = TP.
y
;

517 
CHECK_INITIALIZATION


518 
TP
.
x
 = x, TP.
y
 = y;

519 
	`MPutSåög
(
ãxt°rög
);

520 
TP
.
x
 = 
xbak
, TP.
y
 = 
ybak
;

521 
	}
}

525 
	$ãxtheight
 (*
ãxt°rög
)

527 
CHECK_INITIALIZATION


528  (
I¡î«lF⁄t
.
h
);

529 
	}
}

532 
	$ãxtwidth
 (*
ãxt
)

534 
ofs
;

535 
i
 = 0;

536 
cou¡
 = 0;

538 
CHECK_INITIALIZATION


539 
ãxt
[
i
]!='\0') {

540 i‡(
ãxt
[
i
]==' ') {

541 
cou¡
 +
I¡î«lF⁄t
.
Ch¨Pos
[2]-InternalFont.CharPos[1];

542 
i
++;

544 i‡(
ãxt
[
i
]=='\n') {

545 
i
++;

547 i‡(
ãxt
[
i
]=='\t') {

548 
cou¡
 ++ 8*(
I¡î«lF⁄t
.
Ch¨Pos
[2]-InternalFont.CharPos[1]);

549 
i
++;

552 
ofs
=(
ãxt
[
i
]-33)*2+1;

553 
cou¡
 +
I¡î«lF⁄t
.
Ch¨Pos
[
ofs
+1]-InternalFont.CharPos[ofs];

554 
i
++;

557  (
cou¡
+5);

559 
	}
}

	@/usr/include/SDL/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_image.h

25 #i‚de‡
_SDL_IMAGE_H


26 
	#_SDL_IMAGE_H


	)

28 
	~"SDL.h
"

29 
	~"SDL_vîsi⁄.h
"

30 
	~"begö_code.h
"

33 #ifde‡
__˝lu•lus


39 
	#SDL_IMAGE_MAJOR_VERSION
 1

	)

40 
	#SDL_IMAGE_MINOR_VERSION
 2

	)

41 
	#SDL_IMAGE_PATCHLEVEL
 10

	)

46 
	#SDL_IMAGE_VERSION
(
X
) \

48 (
X
)->
maj‹
 = 
SDL_IMAGE_MAJOR_VERSION
; \

49 (
X
)->
mö‹
 = 
SDL_IMAGE_MINOR_VERSION
; \

50 (
X
)->
∑tch
 = 
SDL_IMAGE_PATCHLEVEL
; \

51 }

	)

57 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
IMG_Löked_Vîsi⁄
();

61 
	gIMG_INIT_JPG
 = 0x00000001,

62 
	gIMG_INIT_PNG
 = 0x00000002,

63 
	gIMG_INIT_TIF
 = 0x00000004

64 } 
	tIMG_InôFœgs
;

70 
DECLSPEC
 
SDLCALL
 
IMG_Inô
(
Êags
);

73 
DECLSPEC
 
SDLCALL
 
IMG_Quô
();

83 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTy≥d_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, *
ty≥
);

85 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd
(c⁄° *
fûe
);

86 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

91 
DECLSPEC
 
SDLCALL
 
IMG_InvîtAÕha
(
⁄
);

94 
DECLSPEC
 
SDLCALL
 
IMG_isICO
(
SDL_RW›s
 *
§c
);

95 
DECLSPEC
 
SDLCALL
 
IMG_isCUR
(
SDL_RW›s
 *
§c
);

96 
DECLSPEC
 
SDLCALL
 
IMG_isBMP
(
SDL_RW›s
 *
§c
);

97 
DECLSPEC
 
SDLCALL
 
IMG_isGIF
(
SDL_RW›s
 *
§c
);

98 
DECLSPEC
 
SDLCALL
 
IMG_isJPG
(
SDL_RW›s
 *
§c
);

99 
DECLSPEC
 
SDLCALL
 
IMG_isLBM
(
SDL_RW›s
 *
§c
);

100 
DECLSPEC
 
SDLCALL
 
IMG_isPCX
(
SDL_RW›s
 *
§c
);

101 
DECLSPEC
 
SDLCALL
 
IMG_isPNG
(
SDL_RW›s
 *
§c
);

102 
DECLSPEC
 
SDLCALL
 
IMG_isPNM
(
SDL_RW›s
 *
§c
);

103 
DECLSPEC
 
SDLCALL
 
IMG_isTIF
(
SDL_RW›s
 *
§c
);

104 
DECLSPEC
 
SDLCALL
 
IMG_isXCF
(
SDL_RW›s
 *
§c
);

105 
DECLSPEC
 
SDLCALL
 
IMG_isXPM
(
SDL_RW›s
 *
§c
);

106 
DECLSPEC
 
SDLCALL
 
IMG_isXV
(
SDL_RW›s
 *
§c
);

109 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdICO_RW
(
SDL_RW›s
 *
§c
);

110 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdCUR_RW
(
SDL_RW›s
 *
§c
);

111 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
);

112 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdGIF_RW
(
SDL_RW›s
 *
§c
);

113 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdJPG_RW
(
SDL_RW›s
 *
§c
);

114 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdLBM_RW
(
SDL_RW›s
 *
§c
);

115 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPCX_RW
(
SDL_RW›s
 *
§c
);

116 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNG_RW
(
SDL_RW›s
 *
§c
);

117 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNM_RW
(
SDL_RW›s
 *
§c
);

118 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTGA_RW
(
SDL_RW›s
 *
§c
);

119 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTIF_RW
(
SDL_RW›s
 *
§c
);

120 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXCF_RW
(
SDL_RW›s
 *
§c
);

121 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXPM_RW
(
SDL_RW›s
 *
§c
);

122 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXV_RW
(
SDL_RW›s
 *
§c
);

124 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_RódXPMFromAºay
(**
xpm
);

127 
	#IMG_SëEº‹
 
SDL_SëEº‹


	)

128 
	#IMG_GëEº‹
 
SDL_GëEº‹


	)

131 #ifde‡
__˝lu•lus


134 
	~"˛o£_code.h
"

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/libguile.h

1 #i‚de‡
SCM_LIBGUILE_H


2 
	#SCM_LIBGUILE_H


	)

24 
	~<gmp.h
>

26 #ifde‡
__˝lu•lus


30 
	~"libguûe/__scm.h
"

31 
	~"libguûe/Æi°.h
"

32 
	~"libguûe/¨bôîs.h
"

33 
	~"libguûe/async.h
"

34 
	~"libguûe/boﬁón.h
"

35 
	~"libguûe/ch¨s.h
"

36 
	~"libguûe/c⁄töu©i⁄s.h
"

37 
	~"libguûe/dy∆.h
"

38 
	~"libguûe/dynwöd.h
"

39 
	~"libguûe/eq.h
"

40 
	~"libguûe/îr‹.h
"

41 
	~"libguûe/evÆ.h
"

42 
	~"libguûe/evÆext.h
"

43 
	~"libguûe/exãnsi⁄s.h
"

44 
	~"libguûe/„©uª.h
"

45 
	~"libguûe/fûesys.h
"

46 
	~"libguûe/Êuids.h
"

47 
	~"libguûe/Â‹ts.h
"

48 
	~"libguûe/futuªs.h
"

49 
	~"libguûe/gc.h
"

50 
	~"libguûe/gdböt.h
"

51 
	~"libguûe/go›s.h
"

52 
	~"libguûe/gsubr.h
"

53 
	~"libguûe/gu¨düns.h
"

54 
	~"libguûe/hash.h
"

55 
	~"libguûe/hashèb.h
"

56 
	~"libguûe/öô.h
"

57 
	~"libguûe/i€xt.h
"

58 
	~"libguûe/rdñim.h
"

59 
	~"libguûe/rw.h
"

60 
	~"libguûe/keyw‹ds.h
"

61 
	~"libguûe/li°.h
"

62 
	~"libguûe/lﬂd.h
"

63 
	~"libguûe/ma¸os.h
"

64 
	~"libguûe/mÆlocs.h
"

65 
	~"libguûe/moduÀs.h
"

66 
	~"libguûe/√t_db.h
"

67 
	~"libguûe/numbîs.h
"

68 
	~"libguûe/obje˘s.h
"

69 
	~"libguûe/obj¥›.h
"

70 
	~"libguûe/›ti⁄s.h
"

71 
	~"libguûe/∑ús.h
"

72 
	~"libguûe/p‹ts.h
"

73 
	~"libguûe/posix.h
"

74 
	~"libguûe/¥öt.h
"

75 
	~"libguûe/¥o˝r›.h
"

76 
	~"libguûe/¥›îtõs.h
"

77 
	~"libguûe/¥ocs.h
"

78 
	~"libguûe/øm≠.h
"

79 
	~"libguûe/øndom.h
"

80 
	~"libguûe/ªad.h
"

81 
	~"libguûe/roŸ.h
"

82 
	~"libguûe/scmsigs.h
"

83 
	~"libguûe/s¸ùt.h
"

84 
	~"libguûe/simpos.h
"

85 
	~"libguûe/smob.h
"

86 
	~"libguûe/¢¨f.h
"

87 
	~"libguûe/sockë.h
"

88 
	~"libguûe/s‹t.h
"

89 
	~"libguûe/§˝r›.h
"

90 
	~"libguûe/°ackchk.h
"

91 
	~"libguûe/°ime.h
"

92 
	~"libguûe/°rögs.h
"

93 
	~"libguûe/§fi-13.h
"

94 
	~"libguûe/§fi-14.h
"

95 
	~"libguûe/°r‹dî.h
"

96 
	~"libguûe/°Ω‹ts.h
"

97 
	~"libguûe/°ru˘.h
"

98 
	~"libguûe/symbﬁs.h
"

99 
	~"libguûe/ègs.h
"

100 
	~"libguûe/throw.h
"

101 
	~"libguûe/unif.h
"

102 
	~"libguûe/vÆid©e.h
"

103 
	~"libguûe/vÆues.h
"

104 
	~"libguûe/v¨übÀ.h
"

105 
	~"libguûe/ve˘‹s.h
"

106 
	~"libguûe/§fi-4.h
"

107 
	~"libguûe/vîsi⁄.h
"

108 
	~"libguûe/vp‹ts.h
"

109 
	~"libguûe/wóks.h
"

110 
	~"libguûe/backåa˚.h
"

111 
	~"libguûe/debug.h
"

112 
	~"libguûe/°acks.h
"

113 
	~"libguûe/thªads.h
"

114 
	~"libguûe/ölöe.h
"

116 
	~"libguûe/discouøged.h
"

117 
	~"libguûe/dïªˇãd.h
"

119 #ifde‡
__˝lu•lus


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #ifde‡
__USE_UNIX98


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

21 #i‚de‡
_TERMIOS_H


25 
	tcc_t
;

26 
	t•ìd_t
;

27 
	ttcÊag_t
;

29 
	#NCCS
 32

	)

30 
	sãrmios


32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

40 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

41 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

45 
	#VINTR
 0

	)

46 
	#VQUIT
 1

	)

47 
	#VERASE
 2

	)

48 
	#VKILL
 3

	)

49 
	#VEOF
 4

	)

50 
	#VTIME
 5

	)

51 
	#VMIN
 6

	)

52 
	#VSWTC
 7

	)

53 
	#VSTART
 8

	)

54 
	#VSTOP
 9

	)

55 
	#VSUSP
 10

	)

56 
	#VEOL
 11

	)

57 
	#VREPRINT
 12

	)

58 
	#VDISCARD
 13

	)

59 
	#VWERASE
 14

	)

60 
	#VLNEXT
 15

	)

61 
	#VEOL2
 16

	)

64 
	#IGNBRK
 0000001

	)

65 
	#BRKINT
 0000002

	)

66 
	#IGNPAR
 0000004

	)

67 
	#PARMRK
 0000010

	)

68 
	#INPCK
 0000020

	)

69 
	#ISTRIP
 0000040

	)

70 
	#INLCR
 0000100

	)

71 
	#IGNCR
 0000200

	)

72 
	#ICRNL
 0000400

	)

73 
	#IUCLC
 0001000

	)

74 
	#IXON
 0002000

	)

75 
	#IXANY
 0004000

	)

76 
	#IXOFF
 0010000

	)

77 
	#IMAXBEL
 0020000

	)

78 
	#IUTF8
 0040000

	)

81 
	#OPOST
 0000001

	)

82 
	#OLCUC
 0000002

	)

83 
	#ONLCR
 0000004

	)

84 
	#OCRNL
 0000010

	)

85 
	#ONOCR
 0000020

	)

86 
	#ONLRET
 0000040

	)

87 
	#OFILL
 0000100

	)

88 
	#OFDEL
 0000200

	)

89 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


90 
	#NLDLY
 0000400

	)

91 
	#NL0
 0000000

	)

92 
	#NL1
 0000400

	)

93 
	#CRDLY
 0003000

	)

94 
	#CR0
 0000000

	)

95 
	#CR1
 0001000

	)

96 
	#CR2
 0002000

	)

97 
	#CR3
 0003000

	)

98 
	#TABDLY
 0014000

	)

99 
	#TAB0
 0000000

	)

100 
	#TAB1
 0004000

	)

101 
	#TAB2
 0010000

	)

102 
	#TAB3
 0014000

	)

103 
	#BSDLY
 0020000

	)

104 
	#BS0
 0000000

	)

105 
	#BS1
 0020000

	)

106 
	#FFDLY
 0100000

	)

107 
	#FF0
 0000000

	)

108 
	#FF1
 0100000

	)

111 
	#VTDLY
 0040000

	)

112 
	#VT0
 0000000

	)

113 
	#VT1
 0040000

	)

115 #ifde‡
__USE_MISC


116 
	#XTABS
 0014000

	)

120 #ifde‡
__USE_MISC


121 
	#CBAUD
 0010017

	)

123 
	#B0
 0000000

	)

124 
	#B50
 0000001

	)

125 
	#B75
 0000002

	)

126 
	#B110
 0000003

	)

127 
	#B134
 0000004

	)

128 
	#B150
 0000005

	)

129 
	#B200
 0000006

	)

130 
	#B300
 0000007

	)

131 
	#B600
 0000010

	)

132 
	#B1200
 0000011

	)

133 
	#B1800
 0000012

	)

134 
	#B2400
 0000013

	)

135 
	#B4800
 0000014

	)

136 
	#B9600
 0000015

	)

137 
	#B19200
 0000016

	)

138 
	#B38400
 0000017

	)

139 #ifde‡
__USE_MISC


140 
	#EXTA
 
B19200


	)

141 
	#EXTB
 
B38400


	)

143 
	#CSIZE
 0000060

	)

144 
	#CS5
 0000000

	)

145 
	#CS6
 0000020

	)

146 
	#CS7
 0000040

	)

147 
	#CS8
 0000060

	)

148 
	#CSTOPB
 0000100

	)

149 
	#CREAD
 0000200

	)

150 
	#PARENB
 0000400

	)

151 
	#PARODD
 0001000

	)

152 
	#HUPCL
 0002000

	)

153 
	#CLOCAL
 0004000

	)

154 #ifde‡
__USE_MISC


155 
	#CBAUDEX
 0010000

	)

157 
	#B57600
 0010001

	)

158 
	#B115200
 0010002

	)

159 
	#B230400
 0010003

	)

160 
	#B460800
 0010004

	)

161 
	#B500000
 0010005

	)

162 
	#B576000
 0010006

	)

163 
	#B921600
 0010007

	)

164 
	#B1000000
 0010010

	)

165 
	#B1152000
 0010011

	)

166 
	#B1500000
 0010012

	)

167 
	#B2000000
 0010013

	)

168 
	#B2500000
 0010014

	)

169 
	#B3000000
 0010015

	)

170 
	#B3500000
 0010016

	)

171 
	#B4000000
 0010017

	)

172 
	#__MAX_BAUD
 
B4000000


	)

173 #ifde‡
__USE_MISC


174 
	#CIBAUD
 002003600000

	)

175 
	#CMSPAR
 010000000000

	)

176 
	#CRTSCTS
 020000000000

	)

180 
	#ISIG
 0000001

	)

181 
	#ICANON
 0000002

	)

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


183 
	#XCASE
 0000004

	)

185 
	#ECHO
 0000010

	)

186 
	#ECHOE
 0000020

	)

187 
	#ECHOK
 0000040

	)

188 
	#ECHONL
 0000100

	)

189 
	#NOFLSH
 0000200

	)

190 
	#TOSTOP
 0000400

	)

191 #ifde‡
__USE_MISC


192 
	#ECHOCTL
 0001000

	)

193 
	#ECHOPRT
 0002000

	)

194 
	#ECHOKE
 0004000

	)

195 
	#FLUSHO
 0010000

	)

196 
	#PENDIN
 0040000

	)

198 
	#IEXTEN
 0100000

	)

201 
	#TCOOFF
 0

	)

202 
	#TCOON
 1

	)

203 
	#TCIOFF
 2

	)

204 
	#TCION
 3

	)

207 
	#TCIFLUSH
 0

	)

208 
	#TCOFLUSH
 1

	)

209 
	#TCIOFLUSH
 2

	)

212 
	#TCSANOW
 0

	)

213 
	#TCSADRAIN
 1

	)

214 
	#TCSAFLUSH
 2

	)

217 
	#_IOT_ãrmios
 \

218 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gmp.h

33 #ifde‡
gmp_wøµî_h


36 
	#gmp_wøµî_h


	)

38 #i‡
deföed
(
__¨m__
)

39 
	~"gmp-¨m.h
"

40 #ñi‡
deföed
(
__avr32__
)

41 
	~"gmp-avr32.h
"

42 #ñi‡
deföed
(
__i386__
)

43 
	~"gmp-i386.h
"

44 #ñi‡
deföed
(
__ü64__
)

45 
	~"gmp-ü64.h
"

46 #ñi‡
deföed
(
__hµa__
)

47 
	~"gmp-hµa.h
"

48 #ñi‡
deföed
(
__powîpc64__
)

49 
	~"gmp-µc64.h
"

50 #ñi‡
deföed
(
__mùs__
)

51 
	~"gmp-mùs.h
"

52 #ñi‡
deföed
(
__powîpc__
)

53 
	~"gmp-µc.h
"

54 #ñi‡
deföed
(
__s390__
)

55 
	~"gmp-s390.h
"

56 #ñi‡
deföed
(
__•¨c__
)

57 
	~"gmp-•¨c.h
"

58 #ñi‡
deföed
(
__x86_64__
)

59 
	~"gmp-x86_64.h
"

60 #ñi‡
deföed
(
__Æpha__
)

61 
	~"gmp-Æpha.h
"

62 #ñi‡
deföed
(
__sh__
)

63 
	~"gmp-sh.h
"

68 #unde‡
gmp_wøµî_h


	@/usr/include/libguile/__scm.h

3 #i‚de‡
SCM___SCM_H


4 
	#SCM___SCM_H


	)

52 
	~"libguûe/scmc⁄fig.h
"

68 #ifde‡
__GNUC__


69 
	#SCM_NORETURN
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

71 
	#SCM_NORETURN


	)

81 #ifde‡
__GNUC__


82 
	#SCM_UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

84 
	#SCM_UNUSED


	)

91 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 3)

92 
	#SCM_EXPECT
 
__buûtö_ex≥˘


	)

94 
	#SCM_EXPECT
(
_ex¥
, 
_vÆue
Ë(_ex¥)

	)

97 
	#SCM_LIKELY
(
_ex¥
Ë
	`SCM_EXPECT
 ((_ex¥), 1)

	)

98 
	#SCM_UNLIKELY
(
_ex¥
Ë
	`SCM_EXPECT
 ((_ex¥), 0)

	)

111 
	#BIGNUMS


	)

120 
	#TICKS


	)

125 #unde‡
ENGNOT


134 
	#CCLO


	)

138 #unde‡
SICP


144 
	#STACK_CHECKING


	)

145 #unde‡
NO_CEVAL_STACK_CHECKING


153 #i‡
deföed
 (
SCM_IMPORT
)

154 
	#SCM_API
 
	`__de˛•ec
 (
dŒimp‹t
Ë

	)

155 #ñi‡
deföed
 (
SCM_EXPORT
Ë|| deföed (
DLL_EXPORT
)

156 
	#SCM_API
 
	`__de˛•ec
 (
dŒexp‹t
Ë

	)

158 
	#SCM_API
 

	)

187 #i‚de‡
SCM_DEBUG


188 
	#SCM_DEBUG
 0

	)

196 #i‚de‡
SCM_DEBUG_CELL_ACCESSES


197 
	#SCM_DEBUG_CELL_ACCESSES
 
SCM_DEBUG


	)

203 #i‚de‡
SCM_DEBUG_INTERRUPTS


204 
	#SCM_DEBUG_INTERRUPTS
 
SCM_DEBUG


	)

211 #i‚de‡
SCM_DEBUG_PAIR_ACCESSES


212 
	#SCM_DEBUG_PAIR_ACCESSES
 
SCM_DEBUG


	)

220 #i‚de‡
SCM_DEBUG_REST_ARGUMENT


221 
	#SCM_DEBUG_REST_ARGUMENT
 
SCM_DEBUG


	)

245 #i‚de‡
SCM_DEBUG_TYPING_STRICTNESS


246 
	#SCM_DEBUG_TYPING_STRICTNESS
 1

	)

261 #i‚de‡
SCM_DEBUG_DEBUGGING_SUPPORT


262 
	#SCM_DEBUG_DEBUGGING_SUPPORT
 
SCM_DEBUG


	)

289 #i‚de‡
SCM_ENABLE_DEPRECATED


290 
	#SCM_ENABLE_DEPRECATED
 0

	)

328 #ifde‡
CHAR_BIT


329 
	#SCM_CHAR_BIT
 
CHAR_BIT


	)

331 
	#SCM_CHAR_BIT
 8

	)

334 #ifde‡
LONG_BIT


335 
	#SCM_LONG_BIT
 
LONG_BIT


	)

337 
	#SCM_LONG_BIT
 (
SCM_CHAR_BIT
 *  (Ë/  ())

	)

340 #ifde‡
UCHAR_MAX


341 
	#SCM_CHAR_CODE_LIMIT
 (
UCHAR_MAX
 + 1L)

	)

343 
	#SCM_CHAR_CODE_LIMIT
 256L

	)

346 
	#SCM_I_UTYPE_MAX
(
ty≥
Ë(—y≥)-1)

	)

347 
	#SCM_I_TYPE_MAX
(
ty≥
,
umax
Ë(—y≥)((umax)/2))

	)

348 
	#SCM_I_TYPE_MIN
(
ty≥
,
umax
Ë(-(—y≥)((umax)/2))-1)

	)

350 
	#SCM_T_UINT8_MAX
 
	`SCM_I_UTYPE_MAX
(
scm_t_uöt8
)

	)

351 
	#SCM_T_INT8_MIN
 
	`SCM_I_TYPE_MIN
(
scm_t_öt8
,
SCM_T_UINT8_MAX
)

	)

352 
	#SCM_T_INT8_MAX
 
	`SCM_I_TYPE_MAX
(
scm_t_öt8
,
SCM_T_UINT8_MAX
)

	)

354 
	#SCM_T_UINT16_MAX
 
	`SCM_I_UTYPE_MAX
(
scm_t_uöt16
)

	)

355 
	#SCM_T_INT16_MIN
 
	`SCM_I_TYPE_MIN
(
scm_t_öt16
,
SCM_T_UINT16_MAX
)

	)

356 
	#SCM_T_INT16_MAX
 
	`SCM_I_TYPE_MAX
(
scm_t_öt16
,
SCM_T_UINT16_MAX
)

	)

358 
	#SCM_T_UINT32_MAX
 
	`SCM_I_UTYPE_MAX
(
scm_t_uöt32
)

	)

359 
	#SCM_T_INT32_MIN
 
	`SCM_I_TYPE_MIN
(
scm_t_öt32
,
SCM_T_UINT32_MAX
)

	)

360 
	#SCM_T_INT32_MAX
 
	`SCM_I_TYPE_MAX
(
scm_t_öt32
,
SCM_T_UINT32_MAX
)

	)

362 #i‡
SCM_HAVE_T_INT64


363 
	#SCM_T_UINT64_MAX
 
	`SCM_I_UTYPE_MAX
(
scm_t_uöt64
)

	)

364 
	#SCM_T_INT64_MIN
 
	`SCM_I_TYPE_MIN
(
scm_t_öt64
,
SCM_T_UINT64_MAX
)

	)

365 
	#SCM_T_INT64_MAX
 
	`SCM_I_TYPE_MAX
(
scm_t_öt64
,
SCM_T_UINT64_MAX
)

	)

368 #i‡
SCM_SIZEOF_LONG_LONG


369 
	#SCM_I_ULLONG_MAX
 
	`SCM_I_UTYPE_MAX
()

	)

370 
	#SCM_I_LLONG_MIN
 
	`SCM_I_TYPE_MIN
(,
SCM_I_ULLONG_MAX
)

	)

371 
	#SCM_I_LLONG_MAX
 
	`SCM_I_TYPE_MAX
(,
SCM_I_ULLONG_MAX
)

	)

374 
	#SCM_T_UINTMAX_MAX
 
	`SCM_I_UTYPE_MAX
(
scm_t_uötmax
)

	)

375 
	#SCM_T_INTMAX_MIN
 
	`SCM_I_TYPE_MIN
(
scm_t_ötmax
,
SCM_T_UINTMAX_MAX
)

	)

376 
	#SCM_T_INTMAX_MAX
 
	`SCM_I_TYPE_MAX
(
scm_t_ötmax
,
SCM_T_UINTMAX_MAX
)

	)

378 
	#SCM_I_SIZE_MAX
 
	`SCM_I_UTYPE_MAX
(
size_t
)

	)

379 
	#SCM_I_SSIZE_MIN
 
	`SCM_I_TYPE_MIN
(
ssize_t
,
SCM_I_SIZE_MAX
)

	)

380 
	#SCM_I_SSIZE_MAX
 
	`SCM_I_TYPE_MAX
(
ssize_t
,
SCM_I_SIZE_MAX
)

	)

384 
	~"libguûe/ègs.h
"

387 #ifde‡
vms


388 #i‚de‡
CHEAP_CONTINUATIONS


389 
	tscm_jmp_buf
[17];

390 
£tjump
(
scm_jmp_buf
 
ív
);

391 
l⁄gjump
(
scm_jmp_buf
 
ív
, 
ªt
);

392 
	#scm_£tjmp
 
£tjump


	)

393 
	#scm_l⁄gjmp
 
l⁄gjump


	)

394 
	#SCM_DEFINES_JMP_BUF


	)

396 
	~<£tjmp.h
>

399 #ifde‡
_CRAY1


400 
	tscm_jmp_buf
[112];

401 
£tjump
(
scm_jmp_buf
 
ív
);

402 
l⁄gjump
(
scm_jmp_buf
 
ív
, 
ªt
);

403 
	#scm_£tjmp
 
£tjump


	)

404 
	#scm_l⁄gjmp
 
l⁄gjump


	)

405 
	#SCM_DEFINES_JMP_BUF


	)

407 #i‡
deföed
 (
__ü64__
)

409 
	~<sig«l.h
>

410 
	~<uc⁄ãxt.h
>

412 
uc⁄ãxt_t
 
	m˘x
;

413 
	m‰esh
;

414 } 
	tscm_jmp_buf
;

415 
	#scm_£tjmp
(
JB
) \

416 –(
JB
).
‰esh
 = 1, \

417 
	`gëc⁄ãxt
 (&((
JB
).
˘x
)), \

418 ((
JB
).
‰esh
 ? ((JB).‰esh = 0, 0Ë: 1Ë)

	)

419 
	#scm_l⁄gjmp
(
JB
,
VAL
Ë
	`scm_ü64_l⁄gjmp
 (&(JB), VAL)

	)

420 
scm_ü64_l⁄gjmp
 (
scm_jmp_buf
 *, );

421 
	#SCM_DEFINES_JMP_BUF


	)

423 
	~<£tjmp.h
>

424 
jmp_buf
 
	tscm_jmp_buf
;

425 
	#scm_£tjmp
 
£tjmp


	)

426 
	#scm_l⁄gjmp
 
l⁄gjmp


	)

436 #i‡
deföed
 (
•¨c
Ë|| deföed (
__•¨c__
Ë|| deföed (
__•¨c
)

437 
	#SCM_FLUSH_REGISTER_WINDOWS
 
	`asm
("è 3")

	)

439 
	#SCM_FLUSH_REGISTER_WINDOWS


	)

446 #ifde‡
THINK_C


447 
	#SHORT_ALIGN


	)

449 #ifde‡
MSDOS


450 
	#SHORT_ALIGN


	)

452 #ifde‡
©¨i°


453 
	#SHORT_ALIGN


	)

456 #ifde‡
SHORT_ALIGN


457 
	tSCM_STACKITEM
;

459 
	tSCM_STACKITEM
;

464 
	#SCM_STACK_PTR
(
±r
Ë((
SCM_STACKITEM
 *Ë(*Ë’å))

	)

467 
	#SCM_ASYNC_TICK
 \

469 i‡(
SCM_I_CURRENT_THREAD
->
≥ndög_asyncs
) \

470 
	`scm_async_˛ick
 (); \

471 } 0)

	)

489 #ifde‡
__GNUC__


490 
	#SCM_FENCE
 
asm
 ("")

	)

491 #ñi‡
deföed
 (
__INTEL_COMPILER
Ë&& deföed (
__ü64
)

492 
	#SCM_FENCE
 
	`__mem‹y_b¨rõr
()

	)

494 
	#SCM_FENCE


	)

497 
	#SCM_TICK
 \

499 
SCM_ASYNC_TICK
; \

500 
SCM_THREAD_SWITCHING_CODE
; \

501 } 0)

	)

510 #ifde‡
SCM_RECKLESS


511 
	#SCM_ASSERT
(
_c⁄d
, 
_¨g
, 
_pos
, 
_subr
)

	)

512 
	#SCM_ASSERT_TYPE
(
_c⁄d
, 
_¨g
, 
_pos
, 
_subr
, 
_msg
)

	)

513 
	#SCM_ASRTGO
(
_c⁄d
, 
_œbñ
)

	)

515 
	#SCM_ASSERT
(
_c⁄d
, 
_¨g
, 
_pos
, 
_subr
) \

516 dÿ{ i‡(
	`SCM_UNLIKELY
 (!(
_c⁄d
))) \

517 
	`scm_wr⁄g_ty≥_¨g
 (
_subr
, 
_pos
, 
_¨g
); } 0)

	)

518 
	#SCM_ASSERT_TYPE
(
_c⁄d
, 
_¨g
, 
_pos
, 
_subr
, 
_msg
) \

519 dÿ{ i‡(
	`SCM_UNLIKELY
 (!(
_c⁄d
))) \

520 
	`scm_wr⁄g_ty≥_¨g_msg
(
_subr
, 
_pos
, 
_¨g
, 
_msg
); } 0)

	)

521 
	#SCM_ASRTGO
(
_c⁄d
, 
_œbñ
) \

522 dÿ{ i‡(
	`SCM_UNLIKELY
 (!(
_c⁄d
))) \

523 
_œbñ
; } 0)

	)

535 
SCM_API
 
SCM
 
scm_ˇŒ_gíîic_0
 (SCM 
gf
);

537 
	#SCM_WTA_DISPATCH_0
(
gf
, 
subr
) \

538  (
	`SCM_UNPACK
 (
gf
) \

539 ? 
	`scm_ˇŒ_gíîic_0
 ((
gf
)) \

540 : (
	`scm_îr‹_num_¨gs_subr
 ((
subr
)), 
SCM_UNSPECIFIED
))

	)

541 
	#SCM_GASSERT0
(
c⁄d
, 
gf
, 
subr
) \

542 i‡(
	`SCM_UNLIKELY
(!(
c⁄d
))) \

543 
	`SCM_WTA_DISPATCH_0
((
gf
), (
subr
))

	)

545 
SCM_API
 
SCM
 
scm_ˇŒ_gíîic_1
 (SCM 
gf
, SCM 
a1
);

547 
	#SCM_WTA_DISPATCH_1
(
gf
, 
a1
, 
pos
, 
subr
) \

548  (
	`SCM_UNPACK
 (
gf
) \

549 ? 
	`scm_ˇŒ_gíîic_1
 ((
gf
), (
a1
)) \

550 : (
	`scm_wr⁄g_ty≥_¨g
 ((
subr
), (
pos
), (
a1
)), 
SCM_UNSPECIFIED
))

	)

551 
	#SCM_GASSERT1
(
c⁄d
, 
gf
, 
a1
, 
pos
, 
subr
) \

552 i‡(
	`SCM_UNLIKELY
 (!(
c⁄d
))) \

553 
	`SCM_WTA_DISPATCH_1
((
gf
), (
a1
), (
pos
), (
subr
))

	)

555 
SCM_API
 
SCM
 
scm_ˇŒ_gíîic_2
 (SCM 
gf
, SCM 
a1
, SCM 
a2
);

557 
	#SCM_WTA_DISPATCH_2
(
gf
, 
a1
, 
a2
, 
pos
, 
subr
) \

558  (
	`SCM_UNPACK
 (
gf
) \

559 ? 
	`scm_ˇŒ_gíîic_2
 ((
gf
), (
a1
), (
a2
)) \

560 : (
	`scm_wr⁄g_ty≥_¨g
 ((
subr
), (
pos
), \

561 (
pos
Ë=
SCM_ARG1
 ? (
a1
Ë: (
a2
)), \

562 
SCM_UNSPECIFIED
))

	)

563 
	#SCM_GASSERT2
(
c⁄d
, 
gf
, 
a1
, 
a2
, 
pos
, 
subr
) \

564 i‡(
	`SCM_UNLIKELY
 (!(
c⁄d
))) \

565 
	`SCM_WTA_DISPATCH_2
((
gf
), (
a1
), (
a2
), (
pos
), (
subr
))

	)

567 
SCM_API
 
SCM
 
scm_≠∂y_gíîic
 (SCM 
gf
, SCM 
¨gs
);

569 
	#SCM_WTA_DISPATCH_n
(
gf
, 
¨gs
, 
pos
, 
subr
) \

570  (
	`SCM_UNPACK
 (
gf
) \

571 ? 
	`scm_≠∂y_gíîic
 ((
gf
), (
¨gs
)) \

572 : (
	`scm_wr⁄g_ty≥_¨g
 ((
subr
), (
pos
), \

573 
	`scm_li°_ªf
 ((
¨gs
), \

574 
	`scm_‰om_öt
 ((
pos
) - 1))), \

575 
SCM_UNSPECIFIED
))

	)

576 
	#SCM_GASSERTn
(
c⁄d
, 
gf
, 
¨gs
, 
pos
, 
subr
) \

577 i‡(
	`SCM_UNLIKELY
 (!(
c⁄d
))) \

578 
	`SCM_WTA_DISPATCH_n
((
gf
), (
¨gs
), (
pos
), (
subr
))

	)

580 #i‚de‡
SCM_MAGIC_SNARFER


589 
	#SCM_ARGn
 0

	)

590 
	#SCM_ARG1
 1

	)

591 
	#SCM_ARG2
 2

	)

592 
	#SCM_ARG3
 3

	)

593 
	#SCM_ARG4
 4

	)

594 
	#SCM_ARG5
 5

	)

595 
	#SCM_ARG6
 6

	)

596 
	#SCM_ARG7
 7

	)

608 #i‚de‡
SCM_EXIT_SUCCESS


609 #ifde‡
vms


610 
	#SCM_EXIT_SUCCESS
 1

	)

612 
	#SCM_EXIT_SUCCESS
 0

	)

615 #i‚de‡
SCM_EXIT_FAILURE


616 #ifde‡
vms


617 
	#SCM_EXIT_FAILURE
 2

	)

619 
	#SCM_EXIT_FAILURE
 1

	)

628 #ifde‡
SCM_C_INLINE


629 
	#SCM_C_INLINE_KEYWORD
 
SCM_C_INLINE


	)

631 
	#SCM_C_INLINE_KEYWORD


	)

	@/usr/include/libguile/alist.h

3 #i‚de‡
SCM_ALIST_H


4 
	#SCM_ALIST_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_ac⁄s
 (SCM 
w
, SCM 
x
, SCM 
y
);

30 
SCM_API
 
SCM
 
scm_¶›py_assq
 (SCM 
x
, SCM 
Æi°
);

31 
SCM_API
 
SCM
 
scm_¶›py_assv
 (SCM 
x
, SCM 
Æi°
);

32 
SCM_API
 
SCM
 
scm_¶›py_assoc
 (SCM 
x
, SCM 
Æi°
);

33 
SCM_API
 
SCM
 
scm_assq
 (SCM 
x
, SCM 
Æi°
);

34 
SCM_API
 
SCM
 
scm_assv
 (SCM 
x
, SCM 
Æi°
);

35 
SCM_API
 
SCM
 
scm_assoc
 (SCM 
x
, SCM 
Æi°
);

36 
SCM_API
 
SCM
 
scm_assq_ªf
 (SCM 
Æi°
, SCM 
key
);

37 
SCM_API
 
SCM
 
scm_assv_ªf
 (SCM 
Æi°
, SCM 
key
);

38 
SCM_API
 
SCM
 
scm_assoc_ªf
 (SCM 
Æi°
, SCM 
key
);

39 
SCM_API
 
SCM
 
scm_assq_£t_x
 (SCM 
Æi°
, SCM 
key
, SCM 
vÆ
);

40 
SCM_API
 
SCM
 
scm_assv_£t_x
 (SCM 
Æi°
, SCM 
key
, SCM 
vÆ
);

41 
SCM_API
 
SCM
 
scm_assoc_£t_x
 (SCM 
Æi°
, SCM 
key
, SCM 
vÆ
);

42 
SCM_API
 
SCM
 
scm_assq_ªmove_x
 (SCM 
Æi°
, SCM 
key
);

43 
SCM_API
 
SCM
 
scm_assv_ªmove_x
 (SCM 
Æi°
, SCM 
key
);

44 
SCM_API
 
SCM
 
scm_assoc_ªmove_x
 (SCM 
Æi°
, SCM 
key
);

45 
SCM_API
 
scm_öô_Æi°
 ();

	@/usr/include/libguile/arbiters.h

3 #i‚de‡
SCM_ARBITERS_H


4 
	#SCM_ARBITERS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_make_¨bôî
 (SCM 
«me
);

30 
SCM_API
 
SCM
 
scm_åy_¨bôî
 (SCM 
¨b
);

31 
SCM_API
 
SCM
 
scm_ªÀa£_¨bôî
 (SCM 
¨b
);

32 
SCM_API
 
scm_öô_¨bôîs
 ();

	@/usr/include/libguile/async.h

3 #i‚de‡
SCM_ASYNC_H


4 
	#SCM_ASYNC_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/roŸ.h
"

27 
	~"libguûe/thªads.h
"

31 
	#scm_mask_öts
 (
SCM_I_CURRENT_THREAD
->
block_asyncs
 !0)

	)

35 
SCM_API
 
scm_async_˛ick
 ();

36 
SCM_API
 
scm_swôch
 ();

37 
SCM_API
 
SCM
 
scm_async
 (SCM 
thunk
);

38 
SCM_API
 
SCM
 
scm_async_m¨k
 (SCM 
a
);

39 
SCM_API
 
SCM
 
scm_sy°em_async_m¨k
 (SCM 
a
);

40 
SCM_API
 
SCM
 
scm_sy°em_async_m¨k_f‹_thªad
 (SCM 
a
, SCM 
thªad
);

41 
SCM_API
 
scm_i_queue_async_˚Œ
 (
SCM
 
˚Œ
, 
scm_i_thªad
 *);

42 
SCM_API
 
scm_i_£tup_¶ìp
 (
scm_i_thªad
 *,

43 
SCM
 
obj
, 
scm_i_±hªad_muãx_t
 *
m
, 
fd
);

44 
SCM_API
 
scm_i_ª£t_¶ìp
 (
scm_i_thªad
 *);

45 
SCM_API
 
SCM
 
scm_run_asyncs
 (SCM 
li°_of_a
);

46 
SCM_API
 
SCM
 
scm_no›
 (SCM 
¨gs
);

47 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_blocked_asyncs
 (SCM 
¥oc
);

48 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_unblocked_asyncs
 (SCM 
¥oc
);

49 *
scm_c_ˇŒ_wôh_blocked_asyncs
 (*(*
p
Ë(*
d
), *d);

50 *
scm_c_ˇŒ_wôh_unblocked_asyncs
 (*(*
p
Ë(*
d
), *d);

51 
scm_dynwöd_block_asyncs
 ();

52 
scm_dynwöd_unblock_asyncs
 ();

62 
scm_i_±hªad_muãx_t
 
scm_i_¸ôiˇl_£˘i⁄_muãx
;

64 
	#SCM_CRITICAL_SECTION_START
 \

66 
	`scm_i_±hªad_muãx_lock
 (&
scm_i_¸ôiˇl_£˘i⁄_muãx
);\

67 
SCM_I_CURRENT_THREAD
->
block_asyncs
++; \

68 
SCM_I_CURRENT_THREAD
->
¸ôiˇl_£˘i⁄_Àvñ
++; \

69 } 0)

	)

70 
	#SCM_CRITICAL_SECTION_END
 \

72 
SCM_I_CURRENT_THREAD
->
¸ôiˇl_£˘i⁄_Àvñ
--; \

73 
SCM_I_CURRENT_THREAD
->
block_asyncs
--; \

74 
	`scm_i_±hªad_muãx_u∆ock
 (&
scm_i_¸ôiˇl_£˘i⁄_muãx
); \

75 
	`scm_async_˛ick
 (); \

76 } 0)

	)

78 
SCM_API
 
scm_öô_async
 ();

80 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

82 
SCM_API
 
SCM
 
scm_sy°em_async
 (SCM 
thunk
);

83 
SCM_API
 
SCM
 
scm_unmask_sig«ls
 ();

84 
SCM_API
 
SCM
 
scm_mask_sig«ls
 ();

	@/usr/include/libguile/backtrace.h

3 #i‚de‡
SCM_BACKTRACE_H


4 
	#SCM_BACKTRACE_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
	gscm_the_œ°_°ack_Êuid_v¨
;

29 
SCM_API
 
scm_di•œy_îr‹_mesßge
 (
SCM
 
mesßge
, SCM 
¨gs
, SCM 
p‹t
);

30 
SCM_API
 
scm_i_di•œy_îr‹
 (
SCM
 
°ack
, SCM 
p‹t
, SCM 
subr
, SCM 
mesßge
, SCM 
¨gs
, SCM 
ª°
);

31 
SCM_API
 
SCM
 
scm_di•œy_îr‹
 (SCM 
°ack
, SCM 
p‹t
, SCM 
subr
, SCM 
mesßge
, SCM 
¨gs
, SCM 
ª°
);

32 
SCM_API
 
SCM
 
scm_di•œy_≠∂iˇti⁄
 (SCM 
‰ame
, SCM 
p‹t
, SCM 
ödít
);

33 
SCM_API
 
SCM
 
scm_di•œy_backåa˚
 (SCM 
°ack
, SCM 
p‹t
, SCM 
fú°
, SCM 
dïth
);

34 
SCM_API
 
SCM
 
scm_di•œy_backåa˚_wôh_highlights
 (SCM 
°ack
, SCM 
p‹t
, SCM 
fú°
, SCM 
dïth
, SCM 
highlights
);

35 
SCM_API
 
SCM
 
scm_backåa˚
 ();

36 
SCM_API
 
SCM
 
scm_backåa˚_wôh_highlights
 (SCM 
highlights
);

37 #ifde‡
GUILE_DEBUG


38 
SCM_API
 
SCM
 
scm_£t_¥öt_∑øms_x
 (SCM 
∑øms
);

41 
SCM_API
 
scm_öô_backåa˚
 ();

	@/usr/include/libguile/boolean.h

3 #i‚de‡
SCM_BOOLEAN_H


4 
	#SCM_BOOLEAN_H


	)

25 
	~"libguûe/__scm.h
"

34 
	#scm_is_Ál£
(
x
Ë
	`scm_is_eq
 ((x), 
SCM_BOOL_F
)

	)

35 
	#scm_is_åue
(
x
Ë!
	`scm_is_Ál£
 (x)

	)

37 
SCM_API
 
scm_is_boﬁ
 (
SCM
 
x
);

38 
	#scm_‰om_boﬁ
(
x
Ë((xË? 
SCM_BOOL_T
 : 
SCM_BOOL_F
)

	)

39 
SCM_API
 
scm_to_boﬁ
 (
SCM
 
x
);

43 
SCM_API
 
SCM
 
scm_nŸ
 (SCM 
x
);

44 
SCM_API
 
SCM
 
scm_boﬁón_p
 (SCM 
obj
);

46 
SCM_API
 
scm_öô_boﬁón
 ();

	@/usr/include/libguile/chars.h

3 #i‚de‡
SCM_CHARS_H


4 
	#SCM_CHARS_H


	)

25 
	~"libguûe/__scm.h
"

30 
	#SCM_CHARP
(
x
Ë(
	`SCM_ITAG8
(xË=
scm_tc8_ch¨
)

	)

31 
	#SCM_CHAR
(
x
Ë(()
	`SCM_ITAG8_DATA
(x))

	)

32 
	#SCM_MAKE_CHAR
(
x
Ë
	`SCM_MAKE_ITAG8
((
scm_t_bôs
Ë(Ë(x), 
scm_tc8_ch¨
)

	)

36 
SCM_API
 *c⁄° 
	gscm_ch¨«mes
[];

37 
SCM_API
 
	gscm_n_ch¨«mes
;

38 
SCM_API
 c⁄° 
	gscm_ch¨nums
[];

42 
SCM_API
 
SCM
 
scm_ch¨_p
 (SCM 
x
);

43 
SCM_API
 
SCM
 
scm_ch¨_eq_p
 (SCM 
x
, SCM 
y
);

44 
SCM_API
 
SCM
 
scm_ch¨_Àss_p
 (SCM 
x
, SCM 
y
);

45 
SCM_API
 
SCM
 
scm_ch¨_Àq_p
 (SCM 
x
, SCM 
y
);

46 
SCM_API
 
SCM
 
scm_ch¨_gr_p
 (SCM 
x
, SCM 
y
);

47 
SCM_API
 
SCM
 
scm_ch¨_geq_p
 (SCM 
x
, SCM 
y
);

48 
SCM_API
 
SCM
 
scm_ch¨_ci_eq_p
 (SCM 
x
, SCM 
y
);

49 
SCM_API
 
SCM
 
scm_ch¨_ci_Àss_p
 (SCM 
x
, SCM 
y
);

50 
SCM_API
 
SCM
 
scm_ch¨_ci_Àq_p
 (SCM 
x
, SCM 
y
);

51 
SCM_API
 
SCM
 
scm_ch¨_ci_gr_p
 (SCM 
x
, SCM 
y
);

52 
SCM_API
 
SCM
 
scm_ch¨_ci_geq_p
 (SCM 
x
, SCM 
y
);

53 
SCM_API
 
SCM
 
scm_ch¨_Æphabëic_p
 (SCM 
chr
);

54 
SCM_API
 
SCM
 
scm_ch¨_numîic_p
 (SCM 
chr
);

55 
SCM_API
 
SCM
 
scm_ch¨_whôe•a˚_p
 (SCM 
chr
);

56 
SCM_API
 
SCM
 
scm_ch¨_uµî_ˇ£_p
 (SCM 
chr
);

57 
SCM_API
 
SCM
 
scm_ch¨_lowî_ˇ£_p
 (SCM 
chr
);

58 
SCM_API
 
SCM
 
scm_ch¨_is_bŸh_p
 (SCM 
chr
);

59 
SCM_API
 
SCM
 
scm_ch¨_to_öãgî
 (SCM 
chr
);

60 
SCM_API
 
SCM
 
scm_öãgî_to_ch¨
 (SCM 
n
);

61 
SCM_API
 
SCM
 
scm_ch¨_upˇ£
 (SCM 
chr
);

62 
SCM_API
 
SCM
 
scm_ch¨_downˇ£
 (SCM 
chr
);

63 
SCM_API
 
scm_c_upˇ£
 (
c
);

64 
SCM_API
 
scm_c_downˇ£
 (
c
);

65 
SCM_API
 
scm_öô_ch¨s
 ();

	@/usr/include/libguile/continuations.h

3 #i‚de‡
SCM_CONTINUATIONS_H


4 
	#SCM_CONTINUATIONS_H


	)

25 
	~"libguûe/__scm.h
"

27 #ifde‡
__ü64__


28 
	~<sig«l.h
>

29 
	~<uc⁄ãxt.h
>

41 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_c⁄töu©i⁄
;

45 
SCM
 
	mthrow_vÆue
;

46 
scm_jmp_buf
 
	mjmpbuf
;

47 
SCM
 
	mdy√nv
;

48 #ifde‡
__ü64__


49 *
	mbackög_°‹e
;

50 
	mbackög_°‹e_size
;

52 
size_t
 
	mnum_°ack_ôems
;

53 
SCM
 
	mroŸ
;

63 
scm_t_±rdiff
 
	moff£t
;

68 
scm_t_debug_‰ame
 *
	md‰ame
;

70 
SCM_STACKITEM
 
	m°ack
[1];

71 } 
	tscm_t_c⁄åegs
;

73 
	#SCM_CONTINUATIONP
(
x
Ë
	`SCM_TYP16_PREDICATE
 (
scm_tc16_c⁄töu©i⁄
, x)

	)

75 
	#SCM_CONTREGS
(
x
Ë((
scm_t_c⁄åegs
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

77 
	#SCM_CONTINUATION_LENGTH
(
x
Ë(
	`SCM_CONTREGS
 (x)->
num_°ack_ôems
)

	)

78 
	#SCM_SET_CONTINUATION_LENGTH
(
x
, 
n
)\

79 (
	`SCM_CONTREGS
 (
x
)->
num_°ack_ôems
 = (
n
))

	)

80 
	#SCM_JMPBUF
(
x
Ë((
	`SCM_CONTREGS
 (x))->
jmpbuf
)

	)

81 
	#SCM_DYNENV
(
x
Ë((
	`SCM_CONTREGS
 (x))->
dy√nv
)

	)

82 
	#SCM_THROW_VALUE
(
x
Ë((
	`SCM_CONTREGS
 (x))->
throw_vÆue
)

	)

83 
	#SCM_CONTINUATION_ROOT
(
x
Ë((
	`SCM_CONTREGS
 (x))->
roŸ
)

	)

84 
	#SCM_DFRAME
(
x
Ë((
	`SCM_CONTREGS
 (x))->
d‰ame
)

	)

88 
SCM_API
 
SCM
 
scm_make_c⁄töu©i⁄
 (*
fú°
);

90 
SCM_API
 *
scm_c_wôh_c⁄töu©i⁄_b¨rõr
 (*(*
func
)(*), *);

91 
SCM_API
 
SCM
 
scm_wôh_c⁄töu©i⁄_b¨rõr
 (SCM 
¥oc
);

93 
SCM_API
 
SCM
 
scm_i_wôh_c⁄töu©i⁄_b¨rõr
 (
scm_t_ˇtch_body
 
body
,

94 *
body_d©a
,

95 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

96 *
h™dÀr_d©a
,

97 
scm_t_ˇtch_h™dÀr
 
¥e_unwöd_h™dÀr
,

98 *
¥e_unwöd_h™dÀr_d©a
);

100 
SCM_API
 
scm_öô_c⁄töu©i⁄s
 ();

	@/usr/include/libguile/debug.h

3 #i‚de‡
SCM_DEBUG_H


4 
	#SCM_DEBUG_H


	)

26 
	~"libguûe/__scm.h
"

28 
	~"libguûe/›ti⁄s.h
"

45 
SCM_API
 
scm_t_›ti⁄
 
	gscm_debug_›ts
[];

47 
	#SCM_BREAKPOINTS_P
 
scm_debug_›ts
[1].
vÆ


	)

48 
	#SCM_TRACE_P
 
scm_debug_›ts
[2].
vÆ


	)

49 
	#SCM_REC_PROCNAMES_P
 
scm_debug_›ts
[3].
vÆ


	)

50 
	#SCM_BACKWARDS_P
 
scm_debug_›ts
[4].
vÆ


	)

51 
	#SCM_BACKTRACE_WIDTH
 
scm_debug_›ts
[5].
vÆ


	)

52 
	#SCM_BACKTRACE_INDENT
 
scm_debug_›ts
[6].
vÆ


	)

53 
	#SCM_N_FRAMES
 
scm_debug_›ts
[7].
vÆ


	)

54 
	#SCM_BACKTRACE_MAXDEPTH
 
scm_debug_›ts
[8].
vÆ


	)

55 
	#SCM_BACKTRACE_DEPTH
 
scm_debug_›ts
[9].
vÆ


	)

56 
	#SCM_BACKTRACE_P
 
scm_debug_›ts
[10].
vÆ


	)

57 
	#SCM_DEVAL_P
 
scm_debug_›ts
[11].
vÆ


	)

58 
	#SCM_STACK_LIMIT
 
scm_debug_›ts
[12].
vÆ


	)

59 
	#SCM_SHOW_FILE_NAME
 
scm_debug_›ts
[13].
vÆ


	)

60 
	#SCM_WARN_DEPRECATED
 
scm_debug_›ts
[14].
vÆ


	)

61 
	#SCM_N_DEBUG_OPTIONS
 15

	)

63 
SCM_API
 
	gscm_debug_mode_p
;

64 
SCM_API
 
	gscm_check_íåy_p
;

65 
SCM_API
 
	gscm_check_≠∂y_p
;

66 
SCM_API
 
	gscm_check_exô_p
;

68 
	#SCM_RESET_DEBUG_MODE
 \

70 
scm_check_íåy_p
 = (
SCM_ENTER_FRAME_P
 || 
SCM_BREAKPOINTS_P
)\

71 && 
	`scm_is_åue
 (
SCM_ENTER_FRAME_HDLR
);\

72 
scm_check_≠∂y_p
 = (
SCM_APPLY_FRAME_P
 || 
SCM_TRACE_P
)\

73 && 
	`scm_is_åue
 (
SCM_APPLY_FRAME_HDLR
);\

74 
scm_check_exô_p
 = (
SCM_EXIT_FRAME_P
 || 
SCM_TRACE_P
)\

75 && 
	`scm_is_åue
 (
SCM_EXIT_FRAME_HDLR
);\

76 
scm_debug_mode_p
 = 
SCM_DEVAL_P
\

77 || 
scm_check_íåy_p
 || 
scm_check_≠∂y_p
 || 
scm_check_exô_p
;\

78 } 0)

	)

83 
	uscm_t_debug_öfo


85 °ru˘ { 
SCM
 
	mexp
, 
	mív
; } 
	me
;

86 °ru˘ { 
SCM
 
	m¥oc
, 
	m¨gs
; } 
	ma
;

87 
SCM
 
	mid
;

88 } 
	tscm_t_debug_öfo
;

90 
SCM_API
 
	gscm_debug_e‰ame_size
;

92 
	sscm_t_debug_‰ame


94 
scm_t_debug_‰ame
 *
	m¥ev
;

95 
	m°©us
;

96 
scm_t_debug_öfo
 *
	mve˘
;

97 
scm_t_debug_öfo
 *
	möfo
;

98 } 
	tscm_t_debug_‰ame
;

100 
	#SCM_EVALFRAME
 (0L << 11)

	)

101 
	#SCM_APPLYFRAME
 (1L << 11)

	)

102 
	#SCM_VOIDFRAME
 (3L << 11)

	)

103 
	#SCM_MACROEXPF
 (1L << 10)

	)

104 
	#SCM_TAILREC
 (1L << 9)

	)

105 
	#SCM_TRACED_FRAME
 (1L << 8)

	)

106 
	#SCM_ARGS_READY
 (1L << 7)

	)

107 
	#SCM_DOVERFLOW
 (1L << 6)

	)

108 
	#SCM_MAX_FRAME_SIZE
 63

	)

110 
	#SCM_FRAMETYPE
 (3L << 11)

	)

112 
	#SCM_EVALFRAMEP
(
x
Ë(((x).
°©us
 & 
SCM_FRAMETYPE
Ë=
SCM_EVALFRAME
)

	)

113 
	#SCM_APPLYFRAMEP
(
x
Ë(((x).
°©us
 & 
SCM_FRAMETYPE
Ë=
SCM_APPLYFRAME
)

	)

114 
	#SCM_VOIDFRAMEP
(
x
Ë(((x).
°©us
 & 
SCM_FRAMETYPE
Ë=
SCM_VOIDFRAME
)

	)

115 
	#SCM_OVERFLOWP
(
x
Ë(((x).
°©us
 & 
SCM_DOVERFLOW
Ë!0)

	)

116 
	#SCM_ARGS_READY_P
(
x
Ë(((x).
°©us
 & 
SCM_ARGS_READY
Ë!0)

	)

117 
	#SCM_TRACED_FRAME_P
(
x
Ë(((x).
°©us
 & 
SCM_TRACED_FRAME
Ë!0)

	)

118 
	#SCM_TAILRECP
(
x
Ë(((x).
°©us
 & 
SCM_TAILREC
Ë!0)

	)

119 
	#SCM_MACROEXPP
(
x
Ë(((x).
°©us
 & 
SCM_MACROEXPF
Ë!0)

	)

120 
	#SCM_SET_OVERFLOW
(
x
Ë((x).
°©us
 |
SCM_DOVERFLOW
)

	)

121 
	#SCM_SET_ARGSREADY
(
x
Ë((x).
°©us
 |
SCM_ARGS_READY
)

	)

122 
	#SCM_CLEAR_ARGSREADY
(
x
Ë((x).
°©us
 &~
SCM_ARGS_READY
)

	)

123 
	#SCM_SET_TRACED_FRAME
(
x
Ë((x).
°©us
 |
SCM_TRACED_FRAME
)

	)

124 
	#SCM_CLEAR_TRACED_FRAME
(
x
Ë((x).
°©us
 &~
SCM_TRACED_FRAME
)

	)

125 
	#SCM_SET_TAILREC
(
x
Ë((x).
°©us
 |
SCM_TAILREC
)

	)

126 
	#SCM_SET_MACROEXP
(
x
Ë((x).
°©us
 |
SCM_MACROEXPF
)

	)

127 
	#SCM_CLEAR_MACROEXP
(
x
Ë((x).
°©us
 &~
SCM_MACROEXPF
)

	)

132 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_debugobj
;

134 
	#SCM_DEBUGOBJP
(
x
) \

135 
	`SCM_TYP16_PREDICATE
 (
scm_tc16_debugobj
, 
x
)

	)

136 
	#SCM_DEBUGOBJ_FRAME
(
x
) \

137 ((
scm_t_debug_‰ame
 *Ë
	`SCM_CELL_WORD_1
 (
x
))

	)

138 
	#SCM_SET_DEBUGOBJ_FRAME
(
x
, 
f
Ë
	`SCM_SET_CELL_WORD_1
 (x, f)

	)

143 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_memoized
;

145 
	#SCM_MEMOIZEDP
(
x
Ë
	`SCM_TYP16_PREDICATE
 (
scm_tc16_memoized
, x)

	)

146 
	#SCM_MEMOIZED_EXP
(
x
Ë
	`SCM_CAR
 (
	`SCM_CELL_OBJECT_1
 (x))

	)

147 
	#SCM_MEMOIZED_ENV
(
x
Ë
	`SCM_CDR
 (
	`SCM_CELL_OBJECT_1
 (x))

	)

151 
SCM_API
 
SCM
 
scm_debug_obje˘_p
 (SCM 
obj
);

152 
SCM_API
 
SCM
 
scm_loˇl_evÆ
 (SCM 
exp
, SCM 
ív
);

153 
SCM_API
 
SCM
 
scm_ªvî£_lookup
 (SCM 
ív
, SCM 
d©a
);

154 
SCM_API
 
SCM
 
scm_°¨t_°ack
 (SCM 
öfo_id
, SCM 
exp
, SCM 
ív
);

155 
SCM_API
 
SCM
 
scm_¥o˚duª_ívú⁄mít
 (SCM 
¥oc
);

156 
SCM_API
 
SCM
 
scm_¥o˚duª_sour˚
 (SCM 
¥oc
);

157 
SCM_API
 
SCM
 
scm_¥o˚duª_«me
 (SCM 
¥oc
);

158 
SCM_API
 
SCM
 
scm_memoized_ívú⁄mít
 (SCM 
m
);

159 
SCM_API
 
SCM
 
scm_make_memoized
 (SCM 
exp
, SCM 
ív
);

160 
SCM_API
 
SCM
 
scm_memoized_p
 (SCM 
obj
);

161 
SCM_API
 
SCM
 
scm_wôh_å≠s
 (SCM 
thunk
);

162 
SCM_API
 
SCM
 
scm_evÆu©‹_å≠s
 (SCM 
£âög
);

163 
SCM_API
 
SCM
 
scm_debug_›ti⁄s
 (SCM 
£âög
);

164 
SCM_API
 
SCM
 
scm_make_debugobj
 (
scm_t_debug_‰ame
 *
debug
);

166 
SCM_API
 
SCM
 
scm_i_unmemoize_ex¥
 (SCM 
memoized
);

167 
SCM_API
 
scm_öô_debug
 ();

169 #ifde‡
GUILE_DEBUG


170 
SCM_API
 
SCM
 
scm_memc⁄s
 (SCM 
ˇr
, SCM 
cdr
, SCM 
ív
);

171 
SCM_API
 
SCM
 
scm_mem_to_¥oc
 (SCM 
obj
);

172 
SCM_API
 
SCM
 
scm_¥oc_to_mem
 (SCM 
obj
);

173 
SCM_API
 
SCM
 
scm_debug_h™g
 (SCM 
obj
);

176 #i‡
SCM_ENABLE_DEPRECATED
 == 1

178 
	#CHECK_ENTRY
 
scm_check_íåy_p


	)

179 
	#CHECK_APPLY
 
scm_check_≠∂y_p


	)

180 
	#CHECK_EXIT
 
scm_check_exô_p


	)

183 
	#SCM_DEBUGGINGP
 
scm_debug_mode_p


	)

184 
	#scm_debug_mode
 
scm_debug_mode_p


	)

	@/usr/include/libguile/deprecated.h

5 #i‚de‡
SCM_DEPRECATED_H


6 
	#SCM_DEPRECATED_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/°rögs.h
"

28 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

32 
	#SCM_IFRINC
 (0x00000100L)

	)

33 
	#SCM_ICDR
 (0x00080000L)

	)

34 
	#SCM_IFRAME
(
n
Ë(()((
SCM_ICDR
-
SCM_IFRINC
)>>8) \

35 & (
	`SCM_UNPACK
 (
n
Ë>> 8))

	)

36 
	#SCM_IDIST
(
n
Ë(
	`SCM_UNPACK
 (nË>> 20)

	)

37 
	#SCM_ICDRP
(
n
Ë(
SCM_ICDR
 & 
	`SCM_UNPACK
 (n))

	)

42 
SCM_API
 *
	gscm_isym«mes
[];

43 
	#SCM_ISYMNUM
(
n
Ë0

	)

44 
	#SCM_ISYMCHARS
(
n
Ë"#@<dïªˇãd>"

	)

49 
	#SCM_TYP16S
(
x
Ë(0x„f‡& 
	`SCM_CELL_TYPE
 (x))

	)

54 
	#SCM_SLOPPY_INEXACTP
(
x
Ë(
	`SCM_TYP16S
 (xË=
scm_tc16_ªÆ
)

	)

55 
	#SCM_SLOPPY_REALP
(
x
Ë(
	`SCM_TYP16
 (xË=
scm_tc16_ªÆ
)

	)

56 
	#SCM_SLOPPY_COMPLEXP
(
x
Ë(
	`SCM_TYP16
 (xË=
scm_tc16_com∂ex
)

	)

61 
	#SCM_ILOC00
 
	`SCM_MAKE_ITAG8
(0L, 
scm_tc8_ûoc
)

	)

62 
	#SCM_IDINC
 (0x00100000L)

	)

63 
	#SCM_IDSTMSK
 (-
SCM_IDINC
)

	)

68 
SCM_API
 c⁄° 
	gscm_s_ex¥essi⁄
[];

69 
SCM_API
 c⁄° 
	gscm_s_ã°
[];

70 
SCM_API
 c⁄° 
	gscm_s_body
[];

71 
SCM_API
 c⁄° 
	gscm_s_bödögs
[];

72 
SCM_API
 c⁄° 
	gscm_s_v¨übÀ
[];

73 
SCM_API
 c⁄° 
	gscm_s_˛au£s
[];

74 
SCM_API
 c⁄° 
	gscm_s_f‹mÆs
[];

79 
	#SCM_EVALIM2
(
x
) \

80 ((
	`scm_is_eq
 ((
x
), 
SCM_EOL
) \

81 ? 
	`scm_misc_îr‹
 (
NULL
, 
scm_s_ex¥essi⁄
, 
SCM_EOL
), 0 \

83 (
x
))

	)

84 
	#SCM_EVALIM
(
x
, 
ív
Ë(
	`SCM_ILOCP
 (x) \

85 ? *
	`scm_ûookup
 ((
x
), 
ív
) \

86 : 
	`SCM_EVALIM2
(
x
))

	)

87 
	#SCM_XEVAL
(
x
, 
ív
Ë(
	`scm_i_evÆ_x
 ((x), (ív)))

	)

88 
	#SCM_XEVALCAR
(
x
, 
ív
Ë(
	`SCM_SYMBOLP
 (
	`SCM_CAR
 (x)) \

89 ? *
	`scm_lookupˇr
 (
x
, 
ív
, 1) \

90 : 
	`scm_i_evÆ_x
 (
	`SCM_CAR
 (
x
), (
ív
)))

	)

93 
	#scm_sub°rög_move_À·_x
 
scm_sub°rög_move_x


	)

94 
	#scm_sub°rög_move_right_x
 
scm_sub°rög_move_x


	)

96 
	#scm_sizë
 
size_t


	)

98 
SCM_API
 
SCM
 
scm_wè
 (SCM 
¨g
, c⁄° *
pos
, c⁄° *
s_subr
);

100 
	#SCM_WNA
 8

	)

101 
	#SCM_OUTOFRANGE
 10

	)

102 
	#SCM_NALLOC
 11

	)

104 
SCM_API
 
scm_ªgi°î_moduÀ_xxx
 (*
moduÀ_«me
, *
öô_func
);

105 
SCM_API
 
SCM
 
scm_ªgi°îed_moduÀs
 ();

106 
SCM_API
 
SCM
 
scm_˛ór_ªgi°îed_moduÀs
 ();

108 
SCM_API
 
SCM
 
scm_¥Ÿe˘_obje˘
 (SCM 
obj
);

109 
SCM_API
 
SCM
 
scm_u≈rŸe˘_obje˘
 (SCM 
obj
);

111 
	#SCM_SETAND_CAR
(
x
, 
y
) \

112 (
	`SCM_SETCAR
 ((
x
), 
	`SCM_PACK
 (
	`SCM_UNPACK
 (
	`SCM_CAR
 (x)Ë& (
y
))))

	)

113 
	#SCM_SETOR_CAR
(
x
, 
y
)\

114 (
	`SCM_SETCAR
 ((
x
), 
	`SCM_PACK
 (
	`SCM_UNPACK
 (
	`SCM_CAR
 (x)Ë| (
y
))))

	)

115 
	#SCM_SETAND_CDR
(
x
, 
y
)\

116 (
	`SCM_SETCDR
 ((
x
), 
	`SCM_PACK
 (
	`SCM_UNPACK
 (
	`SCM_CDR
 (x)Ë& (
y
))))

	)

117 
	#SCM_SETOR_CDR
(
x
, 
y
)\

118 (
	`SCM_SETCDR
 ((
x
), 
	`SCM_PACK
 (
	`SCM_UNPACK
 (
	`SCM_CDR
 (x)Ë| (
y
))))

	)

119 
	#SCM_FREEP
(
x
Ë(
	`SCM_FREE_CELL_P
 (x))

	)

120 
	#SCM_NFREEP
(
x
Ë(!
	`SCM_FREE_CELL_P
 (x))

	)

121 
	#SCM_GC8MARKP
(
x
Ë
	`SCM_GC_MARK_P
 (x)

	)

122 
	#SCM_SETGC8MARK
(
x
Ë
	`SCM_SET_GC_MARK
 (x)

	)

123 
	#SCM_CLRGC8MARK
(
x
Ë
	`SCM_CLEAR_GC_MARK
 (x)

	)

124 
	#SCM_GCTYP16
(
x
Ë
	`SCM_TYP16
 (x)

	)

125 
	#SCM_GCCDR
(
x
Ë
	`SCM_CDR
 (x)

	)

126 
SCM_API
 
scm_ªmembî
 (
SCM
 * 
±r
);

128 
SCM_API
 
SCM
 
scm_the_roŸ_moduÀ
 ();

129 
SCM_API
 
SCM
 
scm_make_moduÀ
 (SCM 
«me
);

130 
SCM_API
 
SCM
 
scm_ísuª_u£r_moduÀ
 (SCM 
«me
);

131 
SCM_API
 
SCM
 
scm_lﬂd_scheme_moduÀ
 (SCM 
«me
);

133 
	#scm_p‹t
 
scm_t_p‹t


	)

134 
	#scm_±ob_des¸ùt‹
 
scm_t_±ob_des¸ùt‹


	)

135 
	#scm_p‹t_rw_a˘ive
 
scm_t_p‹t_rw_a˘ive


	)

137 
SCM_API
 
SCM
 
scm_˛o£_Æl_p‹ts_ex˚±
 (SCM 
p‹ts
);

139 
	#scm_r°©e
 
scm_t_r°©e


	)

140 
	#scm_∫g
 
scm_t_∫g


	)

142 
	#SCM_SLOPPY_CONSP
(
x
Ë((1 & 
	`SCM_CELL_TYPE
 (x)Ë=0)

	)

143 
	#SCM_SLOPPY_NCONSP
(
x
Ë(!
	`SCM_SLOPPY_CONSP
(x))

	)

145 
	#scm_tc7_ssymbﬁ
 
scm_tc7_symbﬁ


	)

146 
	#scm_tc7_msymbﬁ
 
scm_tc7_symbﬁ


	)

147 
	#scm_tcs_symbﬁs
 
scm_tc7_symbﬁ


	)

149 
SCM_API
 
SCM
 
scm_mak°r
 (
size_t
 
Àn
, );

150 
SCM_API
 
SCM
 
scm_mak‰om°r
 (c⁄° *
§c
, 
size_t
 
Àn
, );

152 
SCM_API
 
SCM
 
scm_v¨übÀ_£t_«me_höt
 (SCM 
v¨
, SCM 
höt
);

153 
SCM_API
 
SCM
 
scm_buûtö_v¨übÀ
 (SCM 
«me
);

155 
SCM_API
 
SCM
 
scm_öã∫Æ_wôh_Êuids
 (SCM 
Êuids
, SCM 
vÆs
,

156 
	$SCM
 (*
˝roc
)(*), *
cd©a
);

158 
SCM_API
 
SCM
 
	`scm_make_gsubr
 (c⁄° *
«me
, 
ªq
, 
›t
, 
r°
,

159 
	`SCM
 (*
f˙
)());

160 
SCM_API
 
SCM
 
	`scm_make_gsubr_wôh_gíîic
 (c⁄° *
«me
,

161 
ªq
,

162 
›t
,

163 
r°
,

164 
	`SCM
 (*
f˙
)(),

165 
SCM
 *
gf
);

167 
SCM_API
 
SCM
 
	`scm_¸óã_hook
 (c⁄° * 
«me
, 
n_¨gs
);

169 
	#SCM_LIST0
 
SCM_EOL


	)

170 
	#SCM_LIST1
(
e0
Ë
	`scm_c⁄s
 (”0), 
SCM_EOL
)

	)

171 
	#SCM_LIST2
(
e0
, 
e1
Ë
	`scm_c⁄s2
 (”0), (e1), 
SCM_EOL
)

	)

172 
	#SCM_LIST3
(
e0
, 
e1
, 
e2
Ë
	`scm_c⁄s
 (”0), 
	`SCM_LIST2
 (”1), (e2)))

	)

173 
	#SCM_LIST4
(
e0
, 
e1
, 
e2
, 
e3
)\

174 
	`scm_c⁄s2
 ((
e0
), (
e1
), 
	`SCM_LIST2
 ((
e2
), (
e3
)))

	)

175 
	#SCM_LIST5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
)\

176 
	`scm_c⁄s
 ((
e0
), 
	`SCM_LIST4
 ((
e1
), (
e2
), (
e3
), (
e4
)))

	)

177 
	#SCM_LIST6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
)\

178 
	`scm_c⁄s2
 ((
e0
), (
e1
), 
	`SCM_LIST4
 ((
e2
), (
e3
), (
e4
), (
e5
)))

	)

179 
	#SCM_LIST7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
)\

180 
	`scm_c⁄s
 ((
e0
), 
	`SCM_LIST6
 ((
e1
), (
e2
), (
e3
), (
e4
), (
e5
), (
e6
)))

	)

181 
	#SCM_LIST8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
)\

182 
	`scm_c⁄s2
 ((
e0
), (
e1
), 
	`SCM_LIST6
 ((
e2
), (
e3
), (
e4
), (
e5
), (
e6
), (
e7
)))

	)

183 
	#SCM_LIST9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
)\

184 
	`scm_c⁄s
 ((
e0
),\

185 
	`SCM_LIST8
 ((
e1
), (
e2
), (
e3
), (
e4
), (
e5
), (
e6
), (
e7
), (
e8
)))

	)

187 
	#scm_li°ify
 
scm_li°_n


	)

189 
SCM_API
 
SCM
 
	`scm_¶›py_memq
 (SCM 
x
, SCM 
l°
);

190 
SCM_API
 
SCM
 
	`scm_¶›py_memv
 (SCM 
x
, SCM 
l°
);

191 
SCM_API
 
SCM
 
	`scm_¶›py_membî
 (SCM 
x
, SCM 
l°
);

193 
SCM_API
 
SCM
 
	`scm_ªad_™d_evÆ_x
 (SCM 
p‹t
);

195 
	#scm_subr_íåy
 
scm_t_subr_íåy


	)

197 
	#SCM_SUBR_DOC
(
x
Ë
SCM_BOOL_F


	)

199 
SCM_API
 
SCM
 
	`scm_make_subr
 (c⁄° *
«me
, 
ty≥
, 
	`SCM
 (*
f˙
) ());

200 
SCM_API
 
SCM
 
	`scm_make_subr_wôh_gíîic
 (c⁄° *
«me
,

201 
ty≥
,

202 
	`SCM
 (*
f˙
) (),

203 
SCM
 *
gf
);

204 
SCM_API
 
SCM
 
	`scm_make_subr_›t
 (c⁄° *
«me
,

205 
ty≥
,

206 
	`SCM
 (*
f˙
) (),

207 
£t
);

209 
SCM_API
 
SCM
 
	`scm_ˇŒ_ˇtchög_îr‹s
 (
	`SCM
 (*
thunk
)(), SCM (*
îr_fûãr
)(),

210 * 
˛osuª
);

212 
SCM_API
 
	`scm_make_smob_ty≥_mÂe
 (*
«me
, 
size_t
 
size
,

213 
	$SCM
 (*
m¨k
Ë(
SCM
),

214 
	$size_t
 (*
‰ì
Ë(
SCM
),

215 (*
¥öt
Ë(
SCM
, SCM,

216 
scm_¥öt_°©e
*),

217 
	$SCM
 (*
equÆp
Ë(
SCM
, SCM));

219 
SCM_API
 
	`scm_£t_smob_mÂe
 (
tc
,

220 
	$SCM
 (*
m¨k
Ë(
SCM
),

221 
	$size_t
 (*
‰ì
Ë(
SCM
),

222 (*
¥öt
Ë(
SCM
, SCM, 
scm_¥öt_°©e
*),

223 
	$SCM
 (*
equÆp
Ë(
SCM
, SCM));

225 
SCM_API
 
SCM
 
	`scm_°Ωröt_obj
 (SCM 
obj
);

226 
SCM_API
 
SCM
 
	`scm_ªad_0°r
 (*
ex¥
);

227 
SCM_API
 
SCM
 
	`scm_evÆ_0°r
 (c⁄° *
ex¥
);

229 
SCM_API
 *
	`scm_i_obje˘_ch¨s
 (
SCM
);

231 
	#SCM_CHARS
(
x
Ë
	`scm_i_obje˘_ch¨s
(x)

	)

232 
	#SCM_UCHARS
(
x
Ë((*)
	`SCM_CHARS
(x))

	)

234 
SCM_API
 
	`scm_i_obje˘_Àngth
 (
SCM
);

236 
	#SCM_LENGTH
(
x
Ë
	`scm_i_obje˘_Àngth
(x)

	)

238 
	#scm_°rhash
(
°r
, 
Àn
, 
n
Ë(
	`scm_°rög_hash
 ((°r), (Àn)Ë% (n))

	)

240 
SCM_API
 
SCM
 
	`scm_sym2ov˚Œ_so·
 (SCM 
sym
, SCM 
ob¨øy
);

241 
SCM_API
 
SCM
 
	`scm_sym2ov˚Œ
 (SCM 
sym
, SCM 
ob¨øy
);

242 
SCM_API
 
SCM
 
	`scm_öã∫_ob¨øy_so·
 (c⁄° *
«me
, 
size_t
 
Àn
,

243 
SCM
 
ob¨øy
, 
so·√ss
);

244 
SCM_API
 
SCM
 
	`scm_öã∫_ob¨øy
 (c⁄° *
«me
, 
size_t
 
Àn
, SCM 
ob¨øy
);

245 
SCM_API
 
SCM
 
	`scm_symbﬁ_vÆue0
 (c⁄° *
«me
);

247 
SCM_API
 
SCM
 
	`scm_°rög_to_ob¨øy_symbﬁ
 (SCM 
o
, SCM 
s
, SCM 
so·p
);

248 
SCM_API
 
SCM
 
	`scm_öã∫_symbﬁ
 (SCM 
o
, SCM 
s
);

249 
SCM_API
 
SCM
 
	`scm_unöã∫_symbﬁ
 (SCM 
o
, SCM 
s
);

250 
SCM_API
 
SCM
 
	`scm_symbﬁ_bödög
 (SCM 
o
, SCM 
s
);

253 
SCM_API
 
SCM
 
	`scm_symbﬁ_öã∫ed_p
 (SCM 
o
, SCM 
s
);

255 
SCM_API
 
SCM
 
	`scm_symbﬁ_bound_p
 (SCM 
o
, SCM 
s
);

256 
SCM_API
 
SCM
 
	`scm_symbﬁ_£t_x
 (SCM 
o
, SCM 
s
, SCM 
v
);

258 
SCM_API
 
SCM
 
	`scm_gíãmp
 (SCM 
¥efix
, SCM 
ob¨øy
);

260 
	#SCM_OPDIRP
(
x
Ë(
	`SCM_DIRP
 (xË&& (
	`SCM_DIR_OPEN_P
 (x)))

	)

261 
	#scm_Â‹t
 
scm_t_Â‹t


	)

262 
	#scm_›ti⁄
 
scm_t_›ti⁄


	)

263 
	#scm_§˝r›s
 
scm_t_§˝r›s


	)

264 
	#scm_§˝r›s_chunk
 
scm_t_§˝r›s_chunk


	)

265 
	#scm_öfo_‰ame
 
scm_t_öfo_‰ame


	)

266 
	#scm_°ack
 
scm_t_°ack


	)

267 
	#scm_¨øy
 
scm_t_¨øy


	)

268 
	#scm_¨øy_dim
 
scm_t_¨øy_dim


	)

269 
	#SCM_ARRAY_CONTIGUOUS
 
SCM_ARRAY_FLAG_CONTIGUOUS


	)

270 
	#SCM_FUNC_NAME
 (
	`scm_mak‰om0°r
 (
FUNC_NAME
))

	)

272 
	#SCM_WTA
(
pos
, 
scm
) \

273 dÿ{ 
	`scm_wè
 (
scm
, (*Ë
pos
, 
FUNC_NAME
); 
	}
} 0)

	)

275 
	#RETURN_SCM_WTA
(
pos
, 
scm
) \

276 dÿ{  
	`scm_wè
 (
scm
, (*Ë
pos
, 
FUNC_NAME
); } 0)

	)

278 
	#SCM_VALIDATE_NUMBER_COPY
(
pos
, 
z
, 
cv¨
) \

280 i‡(
	`SCM_I_INUMP
 (
z
)) \

281 
cv¨
 = (Ë
	`SCM_I_INUM
 (
z
); \

282 i‡(
	`SCM_REALP
 (
z
)) \

283 
cv¨
 = 
	`SCM_REAL_VALUE
 (
z
); \

284 i‡(
	`SCM_BIGP
 (
z
)) \

285 
cv¨
 = 
	`scm_i_big2dbl
 (
z
); \

288 
cv¨
 = 0.0; \

289 
	`SCM_WRONG_TYPE_ARG
 (
pos
, 
z
); \

291 } 0)

	)

293 
	#SCM_VALIDATE_NUMBER_DEF_COPY
(
pos
, 
numbî
, 
def
, 
cv¨
) \

295 i‡(
	`SCM_UNBNDP
 (
numbî
)) \

296 
cv¨
 = 
def
; \

298 
	`SCM_VALIDATE_NUMBER_COPY
(
pos
, 
numbî
, 
cv¨
); \

299 } 0)

	)

301 
	#SCM_VALIDATE_OPDIR
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE
 (pos,Ö‹t, 
OPDIRP
)

	)

306 
	#SCM_CELL_WORD_LOC
(
x
, 
n
Ë((
scm_t_bôs
*)
	`SCM_CELL_OBJECT_LOC
((x),“)))

	)

311 
SCM_API
 
SCM
 
scm_i_maköum
 (
scm_t_sig√d_bôs
 
vÆ
);

312 
SCM_API
 
scm_i_öump
 (
SCM
 
obj
);

313 
SCM_API
 
scm_t_sig√d_bôs
 
scm_i_öum
 (
SCM
 
obj
);

315 
	#SCM_MAKINUM
(
x
Ë
	`scm_i_maköum
(x)

	)

316 
	#SCM_INUM
(
x
Ë
	`scm_i_öum
(x)

	)

317 
	#SCM_INUMP
(
x
Ë
	`scm_i_öump
(x)

	)

318 
	#SCM_NINUMP
(
x
Ë(!
	`SCM_INUMP
(x))

	)

320 
	#SCM_VALIDATE_INUM
(
pos
, 
k
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, k, 
INUMP
, "exa˘ i¡egî")

	)

322 
	#SCM_VALIDATE_INUM_COPY
(
pos
, 
k
, 
cv¨
) \

324 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

325 
cv¨
 = 
	`SCM_I_INUM
 (
k
); \

326 } 0)

	)

328 
	#SCM_VALIDATE_BIGINT
(
pos
, 
k
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, k, 
BIGP
, "bignum")

	)

330 
	#SCM_VALIDATE_INUM_MIN
(
pos
, 
k
, 
mö
) \

332 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
(
k
), k, 
pos
, 
FUNC_NAME
); \

333 
	`SCM_ASSERT_RANGE
 (
pos
, 
k
, (
	`SCM_I_INUM
 (kË>
mö
)); \

334 } 0)

	)

336 
	#SCM_VALIDATE_INUM_MIN_COPY
(
pos
, 
k
, 
mö
, 
cv¨
) \

338 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

339 
	`SCM_ASSERT_RANGE
 (
pos
, 
k
, (
	`SCM_I_INUM
 (kË>
mö
)); \

340 
cv¨
 = 
	`SCM_INUM
 (
k
); \

341 } 0)

	)

343 
	#SCM_VALIDATE_INUM_MIN_DEF_COPY
(
pos
, 
k
, 
mö
, , 
cv¨
) \

345 i‡(
	`SCM_UNBNDP
 (
k
)) \

346 
k
 = 
	`SCM_I_MAKINUM
 (); \

347 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

348 
	`SCM_ASSERT_RANGE
 (
pos
, 
k
, (
	`SCM_I_INUM
 (kË>
mö
)); \

349 
cv¨
 = 
	`SCM_INUM
 (
k
); \

350 } 0)

	)

352 
	#SCM_VALIDATE_INUM_DEF
(
pos
, 
k
, ) \

354 i‡(
	`SCM_UNBNDP
 (
k
)) \

355 
k
 = 
	`SCM_I_MAKINUM
 (); \

356 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

357 } 0)

	)

359 
	#SCM_VALIDATE_INUM_DEF_COPY
(
pos
, 
k
, , 
cv¨
) \

361 i‡(
	`SCM_UNBNDP
 (
k
)) \

363 
k
 = 
	`SCM_I_MAKINUM
 (); \

364 
cv¨
 = ; \

368 
	`SCM_ASSERT
 (
	`SCM_I_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

369 
cv¨
 = 
	`SCM_INUM
 (
k
); \

371 } 0)

	)

374 
	#SCM_VALIDATE_INUM_RANGE
(
pos
, 
k
, 
low
, 
high
) \

375 dÿ{ 
	`SCM_ASSERT
(
	`SCM_I_INUMP
(
k
), k, 
pos
, 
FUNC_NAME
); \

376 
	`SCM_ASSERT_RANGE
(
pos
, 
k
, \

377 (
	`SCM_I_INUM
 (
k
Ë>
low
 && \

378 
	`SCM_I_INUM
 (
k
Ë< 
high
)); \

379 } 0)

	)

381 
	#SCM_VALIDATE_INUM_RANGE_COPY
(
pos
, 
k
, 
low
, 
high
, 
cv¨
) \

383 
	`SCM_ASSERT
 (
	`SCM_INUMP
 (
k
), k, 
pos
, 
FUNC_NAME
); \

384 
	`SCM_ASSERT_RANGE
 (
pos
, 
k
, 
low
 <
	`SCM_INUM
 (kË&& SCM_INUM (kË< 
high
); \

385 
cv¨
 = 
	`SCM_INUM
 (
k
); \

386 } 0)

	)

388 
	#SCM_STRING_COERCE_0TERMINATION_X
(
x
Ë(x)

	)

406 
SCM_API
 *
scm_c_°rög2°r
 (
SCM
 
obj
, *
°r
, 
size_t
 *
À≈
);

418 
SCM_API
 *
scm_c_sub°rög2°r
 (
SCM
 
obj
, *
°r
, 
size_t
 
°¨t
, size_à
Àn
);

420 
SCM_API
 *
scm_c_symbﬁ2°r
 (
SCM
 
obj
, *
°r
, 
size_t
 *
À≈
);

425 
SCM_API
 
scm_åunˇã
 (
x
);

426 
SCM_API
 
scm_round
 (
x
);

432 
	#SCM_VALIDATE_STRING_COPY
(
pos
, 
°r
, 
cv¨
) \

434 
	`SCM_ASSERT
 (
	`SCM_STRINGP
 (
°r
), så, 
pos
, 
FUNC_NAME
); \

435 
cv¨
 = 
	`SCM_STRING_CHARS
(
°r
); \

436 } 0)

	)

441 
	#SCM_VALIDATE_SUBSTRING_SPEC_COPY
(
pos_°r
, 
°r
, 
c_°r
, \

442 
pos_°¨t
, 
°¨t
, 
c_°¨t
,\

443 
pos_íd
, 
íd
, 
c_íd
) \

445 
	`SCM_VALIDATE_STRING_COPY
 (
pos_°r
, 
°r
, 
c_°r
);\

446 
c_°¨t
 = 
	`SCM_UNBNDP
(
°¨t
)? 0 : 
	`scm_to_size_t
 (start);\

447 
c_íd
 = 
	`SCM_UNBNDP
(
íd
)? 
	`SCM_STRING_LENGTH
(
°r
Ë: 
	`scm_to_size_t
 (end);\

448 
	`SCM_ASSERT_RANGE
 (
pos_°¨t
, 
°¨t
,\

449 0 <
c_°¨t
 \

450 && (
size_t
Ë
c_°¨t
 <
	`SCM_STRING_LENGTH
 (
°r
));\

451 
	`SCM_ASSERT_RANGE
 (
pos_íd
, 
íd
,\

452 
c_°¨t
 <
c_íd
 \

453 && (
size_t
Ë
c_íd
 <
	`SCM_STRING_LENGTH
 (
°r
));\

454 } 0)

	)

460 
SCM_API
 *
scm_i_dïªˇãd_symbﬁ_ch¨s
 (
SCM
 
sym
);

461 
SCM_API
 
size_t
 
scm_i_dïªˇãd_symbﬁ_Àngth
 (
SCM
 
sym
);

463 
	#SCM_SYMBOL_CHARS
(
x
Ë
	`scm_i_dïªˇãd_symbﬁ_ch¨s
(x)

	)

464 
	#SCM_SYMBOL_LENGTH
(
x
Ë
	`scm_i_dïªˇãd_symbﬁ_Àngth
(x)

	)

470 
SCM_API
 
scm_i_keyw‹dp
 (
SCM
 
obj
);

471 
SCM_API
 
SCM
 
scm_i_keyw‹dsym
 (SCM 
keyw‹d
);

473 
	#SCM_KEYWORDP
(
x
Ë
	`scm_i_keyw‹dp
(x)

	)

474 
	#SCM_KEYWORDSYM
(
x
Ë
	`scm_i_keyw‹dsym
(x)

	)

479 
	#SCM_VECTOR_MAX_LENGTH
 ((1L << 24Ë- 1)

	)

481 
SCM_API
 
scm_i_ve˘‹p
 (
SCM
 
x
);

482 
SCM_API
 
scm_i_ve˘‹_Àngth
 (
SCM
 
x
);

483 
SCM_API
 c⁄° 
SCM
 *
scm_i_vñts
 (SCM 
x
);

484 
SCM_API
 
SCM
 *
scm_i_wrôabÀ_vñts
 (SCM 
x
);

485 
SCM_API
 
SCM
 
scm_i_ve˘‹_ªf
 (SCM 
x
, 
size_t
 
idx
);

486 
SCM_API
 
scm_i_ve˘‹_£t
 (
SCM
 
x
, 
size_t
 
idx
, SCM 
vÆ
);

487 
SCM_API
 
SCM
 
scm_ve˘‹_equÆ_p
 (SCM 
x
, SCM 
y
);

489 
	#SCM_VECTORP
(
x
Ë
	`scm_i_ve˘‹p
(x)

	)

490 
	#SCM_VECTOR_LENGTH
(
x
Ë
	`scm_i_ve˘‹_Àngth
(x)

	)

491 
	#SCM_VELTS
(
x
Ë
	`scm_i_vñts
(x)

	)

492 
	#SCM_WRITABLE_VELTS
(
x
Ë
	`scm_i_wrôabÀ_vñts
(x)

	)

493 
	#SCM_VECTOR_REF
(
x
,
y
Ë
	`scm_i_ve˘‹_ªf
(x,y)

	)

494 
	#SCM_VECTOR_SET
(
x
,
y
,
z
Ë
	`scm_i_ve˘‹_£t
(x,y,z)

	)

496 
scm_i_t_¨øy
 
	tscm_t_¨øy
;

498 
SCM_API
 
scm_i_¨øyp
 (
SCM
 
a
);

499 
SCM_API
 
size_t
 
scm_i_¨øy_ndim
 (
SCM
 
a
);

500 
SCM_API
 
scm_i_¨øy_c⁄ç
 (
SCM
 
a
);

501 
SCM_API
 
scm_t_¨øy
 *
scm_i_¨øy_mem
 (
SCM
 
a
);

502 
SCM_API
 
SCM
 
scm_i_¨øy_v
 (SCM 
a
);

503 
SCM_API
 
size_t
 
scm_i_¨øy_ba£
 (
SCM
 
a
);

504 
SCM_API
 
scm_t_¨øy_dim
 *
scm_i_¨øy_dims
 (
SCM
 
a
);

506 
	#SCM_ARRAYP
(
a
Ë
	`scm_i_¨øyp
◊)

	)

507 
	#SCM_ARRAY_NDIM
(
a
Ë
	`scm_i_¨øy_ndim
◊)

	)

508 
	#SCM_ARRAY_CONTP
(
a
Ë
	`scm_i_¨øy_c⁄ç
◊)

	)

509 
	#SCM_ARRAY_MEM
(
a
Ë
	`scm_i_¨øy_mem
◊)

	)

510 
	#SCM_ARRAY_V
(
a
Ë
	`scm_i_¨øy_v
◊)

	)

511 
	#SCM_ARRAY_BASE
(
a
Ë
	`scm_i_¨øy_ba£
◊)

	)

512 
	#SCM_ARRAY_DIMS
(
a
Ë
	`scm_i_¨øy_dims
◊)

	)

518 
	#scm_cur_öp
 
	`scm_i_cur_öp
 ()

	)

519 
	#scm_cur_ouç
 
	`scm_i_cur_ouç
 ()

	)

520 
	#scm_cur_îΩ
 
	`scm_i_cur_îΩ
 ()

	)

521 
	#scm_cur_lﬂdp
 
	`scm_i_cur_lﬂdp
 ()

	)

522 
	#scm_¥og¨gs
 
	`scm_i_¥og¨gs
 ()

	)

523 
	#scm_dynwöds
 
	`scm_i_dïªˇãd_dynwöds
 ()

	)

524 
	#scm_œ°_debug_‰ame
 
	`scm_i_dïªˇãd_œ°_debug_‰ame
 ()

	)

525 
	#scm_°ack_ba£
 
	`scm_i_°ack_ba£
 ()

	)

527 
SCM_API
 
SCM
 
scm_i_cur_öp
 ();

528 
SCM_API
 
SCM
 
scm_i_cur_ouç
 ();

529 
SCM_API
 
SCM
 
scm_i_cur_îΩ
 ();

530 
SCM_API
 
SCM
 
scm_i_cur_lﬂdp
 ();

531 
SCM_API
 
SCM
 
scm_i_¥og¨gs
 ();

532 
SCM_API
 
SCM
 
scm_i_dïªˇãd_dynwöds
 ();

533 
SCM_API
 
scm_t_debug_‰ame
 *
scm_i_dïªˇãd_œ°_debug_‰ame
 ();

534 
SCM_API
 
SCM_STACKITEM
 *
scm_i_°ack_ba£
 ();

538 
	#SCM_FLUIDP
(
x
Ë
	`scm_i_Êuidp
 (x)

	)

539 
SCM_API
 
scm_i_Êuidp
 (
SCM
 
x
);

567 
SCM_API
 
scm_i_de„r_öts_ëc
 ();

568 
	#SCM_DEFER_INTS
 
	`scm_i_de„r_öts_ëc
 ()

	)

569 
	#SCM_ALLOW_INTS
 
	`scm_i_de„r_öts_ëc
 ()

	)

570 
	#SCM_REDEFER_INTS
 
	`scm_i_de„r_öts_ëc
 ()

	)

571 
	#SCM_REALLOW_INTS
 
	`scm_i_de„r_öts_ëc
 ()

	)

575 
SCM_API
 
SCM
 
scm_gu¨d
 (SCM 
gu¨dün
, SCM 
obj
, 
throw_p
);

576 
SCM_API
 
SCM
 
scm_gë_⁄e_zombõ
 (SCM 
gu¨dün
);

580 
SCM_API
 
SCM
 
scm_de°roy_gu¨dün_x
 (SCM 
gu¨dün
);

581 
SCM_API
 
SCM
 
scm_gu¨dün_gªedy_p
 (SCM 
gu¨dün
);

582 
SCM_API
 
SCM
 
scm_gu¨dün_de°royed_p
 (SCM 
gu¨dün
);

584 
scm_i_öô_dïªˇãd
 ();

	@/usr/include/libguile/discouraged.h

13 #i‚de‡
SCM_DISCOURAGED_H


14 
	#SCM_DISCOURAGED_H


	)

33 
	~"libguûe/__scm.h
"

35 #i‡
SCM_ENABLE_DISCOURAGED
 == 1

42 
	#SCM_FALSEP
 
scm_is_Ál£


	)

43 
	#SCM_NFALSEP
 
scm_is_åue


	)

44 
	#SCM_BOOLP
 
scm_is_boﬁ


	)

45 
	#SCM_EQ_P
 
scm_is_eq


	)

49 
	#SCM_BOOL
 
scm_‰om_boﬁ


	)

52 
	#SCM_NEGATE_BOOL
(
f
Ë
	`scm_‰om_boﬁ
(!(f))

	)

57 
	#SCM_BOOL_NOT
(
x
Ë(
	`SCM_PACK
 (
	`SCM_UNPACK
 (x) \

58 ^ (
	`SCM_UNPACK
 (
SCM_BOOL_T
) \

59 ^ 
	`SCM_UNPACK
 (
SCM_BOOL_F
))))

	)

68 
SCM_API
 
SCM
 
scm_sh‹t2num
 (
n
);

69 
SCM_API
 
SCM
 
scm_ush‹t2num
 (
n
);

70 
SCM_API
 
SCM
 
scm_öt2num
 (
n
);

71 
SCM_API
 
SCM
 
scm_uöt2num
 (
n
);

72 
SCM_API
 
SCM
 
scm_l⁄g2num
 (
n
);

73 
SCM_API
 
SCM
 
scm_ul⁄g2num
 (
n
);

74 
SCM_API
 
SCM
 
scm_size2num
 (
size_t
 
n
);

75 
SCM_API
 
SCM
 
scm_±rdiff2num
 (
scm_t_±rdiff
 
n
);

76 
SCM_API
 
scm_num2sh‹t
 (
SCM
 
num
, 
pos
,

77 c⁄° *
s_ˇŒî
);

78 
SCM_API
 
scm_num2ush‹t
 (
SCM
 
num
, 
pos
,

79 c⁄° *
s_ˇŒî
);

80 
SCM_API
 
scm_num2öt
 (
SCM
 
num
, 
pos
,

81 c⁄° *
s_ˇŒî
);

82 
SCM_API
 
scm_num2uöt
 (
SCM
 
num
, 
pos
,

83 c⁄° *
s_ˇŒî
);

84 
SCM_API
 
scm_num2l⁄g
 (
SCM
 
num
, 
pos
,

85 c⁄° *
s_ˇŒî
);

86 
SCM_API
 
scm_num2ul⁄g
 (
SCM
 
num
, 
pos
,

87 c⁄° *
s_ˇŒî
);

88 
SCM_API
 
scm_t_±rdiff
 
scm_num2±rdiff
 (
SCM
 
num
, 
pos
,

89 c⁄° *
s_ˇŒî
);

90 
SCM_API
 
size_t
 
scm_num2size
 (
SCM
 
num
, 
pos
,

91 c⁄° *
s_ˇŒî
);

92 #i‡
SCM_SIZEOF_LONG_LONG
 != 0

93 
SCM_API
 
SCM
 
scm_l⁄g_l⁄g2num
 (
¶
);

94 
SCM_API
 
SCM
 
scm_ul⁄g_l⁄g2num
 (
¶
);

95 
SCM_API
 
scm_num2l⁄g_l⁄g
 (
SCM
 
num
, 
pos
,

96 c⁄° *
s_ˇŒî
);

97 
SCM_API
 
scm_num2ul⁄g_l⁄g
 (
SCM
 
num
, 
pos
,

98 c⁄° *
s_ˇŒî
);

101 
SCM_API
 
SCM
 
scm_make_ªÆ
 (
x
);

102 
SCM_API
 
scm_num2dbl
 (
SCM
 
a
, c⁄° * 
why
);

103 
SCM_API
 
SCM
 
scm_Êﬂt2num
 (
n
);

104 
SCM_API
 
SCM
 
scm_doubÀ2num
 (
n
);

109 
SCM_API
 
scm_num2Êﬂt
 (
SCM
 
num
, 
pos
,

110 c⁄° *
s_ˇŒî
);

111 
SCM_API
 
scm_num2doubÀ
 (
SCM
 
num
, 
pos
,

112 c⁄° *
s_ˇŒî
);

114 
SCM_API
 
SCM
 
scm_make_com∂ex
 (
x
, 
y
);

119 
SCM_API
 
SCM
 
scm_mem2symbﬁ
 (c⁄° *
mem
, 
size_t
 
Àn
);

120 
SCM_API
 
SCM
 
scm_mem2unöã∫ed_symbﬁ
 (c⁄° *
mem
, 
size_t
 
Àn
);

121 
SCM_API
 
SCM
 
scm_°r2symbﬁ
 (c⁄° *
°r
);

123 
SCM_API
 
SCM
 
scm_èke_°r
 (*
s
, 
size_t
 
Àn
);

124 
SCM_API
 
SCM
 
scm_èke0°r
 (*
s
);

125 
SCM_API
 
SCM
 
scm_mem2°rög
 (c⁄° *
§c
, 
size_t
 
Àn
);

126 
SCM_API
 
SCM
 
scm_°r2°rög
 (c⁄° *
§c
);

127 
SCM_API
 
SCM
 
scm_mak‰om0°r
 (c⁄° *
§c
);

128 
SCM_API
 
SCM
 
scm_mak‰om0°r_›t
 (c⁄° *
§c
);

133 
SCM_API
 
SCM
 
scm_Æloˇã_°rög
 (
size_t
 
Àn
);

137 
	#SCM_SYMBOLP
 
scm_is_symbﬁ


	)

141 
	#SCM_SYMBOL_FUNC
 
scm_symbﬁ_‰ef


	)

142 
	#SCM_SET_SYMBOL_FUNC
 
scm_symbﬁ_f£t_x


	)

143 
	#SCM_SYMBOL_PROPS
 
scm_symbﬁ_¥ef


	)

144 
	#SCM_SET_SYMBOL_PROPS
 
scm_symbﬁ_p£t_x


	)

148 
	#SCM_SYMBOL_HASH
 
scm_i_symbﬁ_hash


	)

149 
	#SCM_SYMBOL_INTERNED_P
(
X
Ë
scm_i_symbﬁ_is_öã∫ed


	)

155 
	#SCM_CONSP
(
x
Ë(
	`scm_is_∑ú
 (x))

	)

156 
	#SCM_NCONSP
(
x
Ë(!
	`SCM_CONSP
 (x))

	)

157 
	#SCM_NULLP
(
x
Ë(
	`scm_is_nuŒ
 (x))

	)

158 
	#SCM_NNULLP
(
x
Ë(!
	`scm_is_nuŒ
 (x))

	)

163 
SCM_API
 
SCM
 
scm_make_keyw‹d_‰om_dash_symbﬁ
 (SCM 
symbﬁ
);

164 
SCM_API
 
SCM
 
scm_keyw‹d_dash_symbﬁ
 (SCM 
keyw‹d
);

169 
SCM_API
 
SCM
 
scm_c_make_keyw‹d
 (c⁄° *
s
);

175 
	#scm_öã∫Æ_£À˘
 
scm_°d_£À˘


	)

176 
	#scm_thªad_¶ìp
 
scm_°d_¶ìp


	)

177 
	#scm_thªad_u¶ìp
 
scm_°d_u¶ìp


	)

179 
scm_i_öô_discouøged
 ();

	@/usr/include/libguile/dynl.h

3 #i‚de‡
SCM_DYNL_H


4 
	#SCM_DYNL_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_dy«mic_lök
 (SCM 
‚ame
);

30 
SCM_API
 
SCM
 
scm_dy«mic_u∆ök
 (SCM 
dobj
);

31 
SCM_API
 
SCM
 
scm_dy«mic_obje˘_p
 (SCM 
obj
);

32 
SCM_API
 
SCM
 
scm_dy«mic_func
 (SCM 
symb
, SCM 
dobj
);

33 
SCM_API
 
SCM
 
scm_dy«mic_ˇŒ
 (SCM 
symb
, SCM 
dobj
);

34 
SCM_API
 
SCM
 
scm_dy«mic_¨gs_ˇŒ
 (SCM 
symb
, SCM 
dobj
, SCM 
¨gs
);

36 
SCM_API
 
scm_öô_dy«mic_lökög
 ();

	@/usr/include/libguile/dynwind.h

3 #i‚de‡
SCM_DYNWIND_H


4 
	#SCM_DYNWIND_H


	)

25 
	~"libguûe/__scm.h
"

29 (*
	tscm_t_gu¨d
) (*);

30 
	$SCM
 (*
	tscm_t_ö√r
) (*);

32 
SCM_API
 
SCM
 
	`scm_dy«mic_wöd
 (SCM 
thunk1
, SCM 
thunk2
, SCM 
thunk3
);

33 
SCM_API
 
SCM
 
	`scm_öã∫Æ_dy«mic_wöd
 (
scm_t_gu¨d
 
bef‹e
,

34 
scm_t_ö√r
 
ö√r
,

35 
scm_t_gu¨d
 
a·î
,

36 *
ö√r_d©a
,

37 *
gu¨d_d©a
);

38 
SCM_API
 
	`scm_dowöds
 (
SCM
 
to
, 
dñè
);

39 
SCM_API
 
	`scm_i_dowöds
 (
SCM
 
to
, 
dñè
,

40 (*
tu∫_func
Ë(*), *
d©a
);

41 
SCM_API
 
	`scm_öô_dynwöd
 ();

43 
SCM_API
 
	`scm_sw≠_bödögs
 (
SCM
 
v¨s
, SCM 
vÆs
);

46 
SCM_F_DYNWIND_REWINDABLE
 = (1 << 0)

47 } 
	tscm_t_dynwöd_Êags
;

50 
SCM_F_WIND_EXPLICITLY
 = (1 << 0)

51 } 
	tscm_t_wöd_Êags
;

53 
SCM_API
 
	`scm_dynwöd_begö
 (
scm_t_dynwöd_Êags
);

54 
SCM_API
 
	`scm_dynwöd_íd
 ();

56 
SCM_API
 
	`scm_dynwöd_unwöd_h™dÀr
 ((*
func
Ë(*), *
d©a
,

57 
scm_t_wöd_Êags
);

58 
SCM_API
 
	`scm_dynwöd_ªwöd_h™dÀr
 ((*
func
Ë(*), *
d©a
,

59 
scm_t_wöd_Êags
);

61 
SCM_API
 
	`scm_dynwöd_unwöd_h™dÀr_wôh_scm
 ((*
func
Ë(
SCM
), SCM 
d©a
,

62 
scm_t_wöd_Êags
);

63 
SCM_API
 
	`scm_dynwöd_ªwöd_h™dÀr_wôh_scm
 ((*
func
Ë(
SCM
), SCM 
d©a
,

64 
scm_t_wöd_Êags
);

66 
SCM_API
 
	`scm_dynwöd_‰ì
 (*
mem
);

68 #ifde‡
GUILE_DEBUG


69 
SCM_API
 
SCM
 
	`scm_wöd_chaö
 ();

	@/usr/include/libguile/eq.h

3 #i‚de‡
SCM_EQ_H


4 
	#SCM_EQ_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_eq_p
 (SCM 
x
, SCM 
y
);

30 
SCM_API
 
SCM
 
scm_eqv_p
 (SCM 
x
, SCM 
y
);

31 
SCM_API
 
SCM
 
scm_equÆ_p
 (SCM 
x
, SCM 
y
);

32 
SCM_API
 
scm_öô_eq
 ();

	@/usr/include/libguile/error.h

3 #i‚de‡
SCM_ERROR_H


4 
	#SCM_ERROR_H


	)

25 
	~"libguûe/__scm.h
"

28 
SCM_API
 
SCM
 
	gscm_sy°em_îr‹_key
;

29 
SCM_API
 
SCM
 
	gscm_num_ovîÊow_key
;

30 
SCM_API
 
SCM
 
	gscm_out_of_ønge_key
;

31 
SCM_API
 
SCM
 
	gscm_¨gs_numbî_key
;

32 
SCM_API
 
SCM
 
	gscm_¨g_ty≥_key
;

33 
SCM_API
 
SCM
 
	gscm_mem‹y_Æloc_key
;

34 
SCM_API
 
SCM
 
	gscm_misc_îr‹_key
;

38 
SCM_API
 
	$scm_îr‹
 (
SCM
 
key
, c⁄° *
subr
, c⁄° *
mesßge
,

39 
SCM
 
¨gs
, SCM 
ª°
Ë
SCM_NORETURN
;

40 
SCM_API
 
SCM
 
	$scm_îr‹_scm
 (
SCM
 
key
, SCM 
subr
, SCM 
mesßge
,

41 
SCM
 
¨gs
, SCM 
ª°
Ë
SCM_NORETURN
;

42 
SCM_API
 
SCM
 
	`scm_°ªº‹
 (SCM 
îr
);

43 
SCM_API
 
	$scm_sy£º‹
 (c⁄° *
subr
Ë
SCM_NORETURN
;

44 
SCM_API
 
	$scm_sy£º‹_msg
 (c⁄° *
subr
, c⁄° *
mesßge
,

45 
SCM
 
¨gs
, 
ío
Ë
SCM_NORETURN
;

46 
SCM_API
 
	$scm_num_ovîÊow
 (c⁄° *
subr
Ë
SCM_NORETURN
;

47 
SCM_API
 
	$scm_out_of_ønge
 (c⁄° *
subr
, 
SCM
 
bad_vÆue
)

48 
SCM_NORETURN
;

49 
SCM_API
 
	$scm_out_of_ønge_pos
 (c⁄° *
subr
, 
SCM
 
bad_vÆue
, SCM 
pos
)

50 
SCM_NORETURN
;

51 
SCM_API
 
	$scm_wr⁄g_num_¨gs
 (
SCM
 
¥oc
Ë
SCM_NORETURN
;

52 
SCM_API
 
	$scm_îr‹_num_¨gs_subr
 (c⁄° * 
subr
Ë
SCM_NORETURN
;

53 
SCM_API
 
	$scm_wr⁄g_ty≥_¨g
 (c⁄° *
subr
, 
pos
,

54 
SCM
 
bad_vÆue
Ë
SCM_NORETURN
;

55 
SCM_API
 
	$scm_wr⁄g_ty≥_¨g_msg
 (c⁄° *
subr
, 
pos
,

56 
SCM
 
bad_vÆue
, c⁄° *
sz
Ë
SCM_NORETURN
;

57 
SCM_API
 
	$scm_mem‹y_îr‹
 (c⁄° *
subr
Ë
SCM_NORETURN
;

58 
SCM_API
 
	$scm_misc_îr‹
 (c⁄° *
subr
, c⁄° *
mesßge
,

59 
SCM
 
¨gs
Ë
SCM_NORETURN
;

60 
SCM_API
 
	`scm_öô_îr‹
 ();

	@/usr/include/libguile/eval.h

3 #i‚de‡
SCM_EVAL_H


4 
	#SCM_EVAL_H


	)

26 
	~"libguûe/__scm.h
"

28 
	~"libguûe/°ru˘.h
"

35 
SCM_API
 
scm_t_›ti⁄
 
	gscm_evÆ_›ts
[];

37 
	#SCM_EVAL_STACK
 
scm_evÆ_›ts
[0].
vÆ


	)

38 
	#SCM_N_EVAL_OPTIONS
 1

	)

40 
SCM_API
 
	gscm_evÆ_°ack
;

42 
SCM_API
 
scm_t_›ti⁄
 
	gscm_evÆu©‹_å≠_èbÀ
[];

44 
SCM_API
 
SCM
 
scm_evÆ_›ti⁄s_öãrÁ˚
 (SCM 
£âög
);

46 
	#SCM_TRAPS_P
 
scm_evÆu©‹_å≠_èbÀ
[0].
vÆ


	)

47 
	#SCM_ENTER_FRAME_P
 
scm_evÆu©‹_å≠_èbÀ
[1].
vÆ


	)

48 
	#SCM_APPLY_FRAME_P
 
scm_evÆu©‹_å≠_èbÀ
[2].
vÆ


	)

49 
	#SCM_EXIT_FRAME_P
 
scm_evÆu©‹_å≠_èbÀ
[3].
vÆ


	)

50 
	#SCM_ENTER_FRAME_HDLR
 (
	`SCM_PACK
 (
scm_evÆu©‹_å≠_èbÀ
[4].
vÆ
))

	)

51 
	#SCM_APPLY_FRAME_HDLR
 (
	`SCM_PACK
 (
scm_evÆu©‹_å≠_èbÀ
[5].
vÆ
))

	)

52 
	#SCM_EXIT_FRAME_HDLR
 (
	`SCM_PACK
 (
scm_evÆu©‹_å≠_èbÀ
[6].
vÆ
))

	)

53 
	#SCM_N_EVALUATOR_TRAPS
 7

	)

62 
	#SCM_ILOCP
(
n
Ë(
	`SCM_ITAG8
“)==
scm_tc8_ûoc
)

	)

69 
	#SCM_F_PROMISE_COMPUTED
 (1L << 0)

	)

70 
	#SCM_PROMISE_COMPUTED_P
(
¥omi£
) \

71 (
SCM_F_PROMISE_COMPUTED
 & 
	`SCM_SMOB_FLAGS
 (
¥omi£
))

	)

72 
	#SCM_SET_PROMISE_COMPUTED
(
¥omi£
) \

73 
	`SCM_SET_SMOB_FLAGS
 ((
¥omi£
), 
SCM_F_PROMISE_COMPUTED
)

	)

74 
	#SCM_PROMISE_MUTEX
 
SCM_SMOB_OBJECT_2


	)

75 
	#SCM_PROMISE_DATA
 
SCM_SMOB_OBJECT


	)

76 
	#SCM_SET_PROMISE_DATA
 
SCM_SET_SMOB_OBJECT


	)

79 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_¥omi£
;

86 
	$SCM
 (*
	tscm_t_åampﬁöe_0
Ë(
	tSCM
 
	t¥oc
);

87 
	$SCM
 (*
	tscm_t_åampﬁöe_1
Ë(
	tSCM
 
	t¥oc
, SCM 
	t¨g1
);

88 
	$SCM
 (*
	tscm_t_åampﬁöe_2
Ë(
	tSCM
 
	t¥oc
, SCM 
	t¨g1
, SCM 
	t¨g2
);

92 
	#SCM_EXTEND_ENV
 
scm_ac⁄s


	)

96 
	#SCM_TOP_LEVEL_LOOKUP_CLOSURE
 (
	`scm_cuºít_moduÀ_lookup_˛osuª
())

	)

100 
SCM_API
 
SCM
 
scm_sym_™d
;

101 
SCM_API
 
SCM
 
scm_sym_begö
;

102 
SCM_API
 
SCM
 
scm_sym_ˇ£
;

103 
SCM_API
 
SCM
 
scm_sym_c⁄d
;

104 
SCM_API
 
SCM
 
scm_sym_deföe
;

105 
SCM_API
 
SCM
 
scm_sym_do
;

106 
SCM_API
 
SCM
 
scm_sym_if
;

107 
SCM_API
 
SCM
 
scm_sym_œmbda
;

108 
SCM_API
 
SCM
 
scm_sym_Àt
;

109 
SCM_API
 
SCM
 
scm_sym_Àt°¨
;

110 
SCM_API
 
SCM
 
scm_sym_Àåec
;

111 
SCM_API
 
SCM
 
scm_sym_quŸe
;

112 
SCM_API
 
SCM
 
scm_sym_quasiquŸe
;

113 
SCM_API
 
SCM
 
scm_sym_unquŸe
;

114 
SCM_API
 
SCM
 
scm_sym_uq_•licög
;

116 
SCM_API
 
SCM
 
scm_sym_©≠∂y
;

117 
SCM_API
 
SCM
 
scm_sym_©ˇŒ_cc
;

118 
SCM_API
 
SCM
 
scm_sym_©_ˇŒ_wôh_vÆues
;

119 
SCM_API
 
SCM
 
scm_sym_dñay
;

120 
SCM_API
 
SCM
 
scm_sym_¨row
;

121 
SCM_API
 
SCM
 
scm_sym_ñ£
;

122 
SCM_API
 
SCM
 
scm_sym_≠∂y
;

123 
SCM_API
 
SCM
 
scm_sym_£t_x
;

124 
SCM_API
 
SCM
 
scm_sym_¨gs
;

128 
SCM_API
 
SCM
 * 
	`scm_ûookup
 (SCM 
ûoc
, SCM 
ív
);

129 
SCM_API
 
SCM
 * 
	`scm_lookupˇr
 (SCM 
vloc
, SCM 
gív
, 
check
);

130 
SCM_API
 
SCM
 
	`scm_evÆ_ˇr
 (SCM 
∑ú
, SCM 
ív
);

131 
SCM_API
 
SCM
 
	`scm_evÆ_body
 (SCM 
code
, SCM 
ív
);

132 
SCM_API
 
SCM
 
	`scm_evÆ_¨gs
 (SCM 
i
, SCM 
ív
, SCM 
¥oc
);

133 
SCM_API
 
SCM
 
	`scm_m_quŸe
 (SCM 
x‹ig
, SCM 
ív
);

134 
SCM_API
 
SCM
 
	`scm_m_begö
 (SCM 
x‹ig
, SCM 
ív
);

135 
SCM_API
 
SCM
 
	`scm_m_if
 (SCM 
x‹ig
, SCM 
ív
);

136 
SCM_API
 
SCM
 
	`scm_m_£t_x
 (SCM 
x‹ig
, SCM 
ív
);

137 
SCM_API
 
SCM
 
	`scm_m_vªf
 (SCM 
x‹ig
, SCM 
ív
);

138 
SCM_API
 
SCM
 
	`scm_m_v£t
 (SCM 
x‹ig
, SCM 
ív
);

139 
SCM_API
 
SCM
 
	`scm_m_™d
 (SCM 
x‹ig
, SCM 
ív
);

140 
SCM_API
 
SCM
 
	`scm_m_‹
 (SCM 
x‹ig
, SCM 
ív
);

141 
SCM_API
 
SCM
 
	`scm_m_ˇ£
 (SCM 
x‹ig
, SCM 
ív
);

142 
SCM_API
 
SCM
 
	`scm_m_c⁄d
 (SCM 
x‹ig
, SCM 
ív
);

143 
SCM_API
 
SCM
 
	`scm_m_œmbda
 (SCM 
x‹ig
, SCM 
ív
);

144 
SCM_API
 
SCM
 
	`scm_m_Àt°¨
 (SCM 
x‹ig
, SCM 
ív
);

145 
SCM_API
 
SCM
 
	`scm_m_do
 (SCM 
x‹ig
, SCM 
ív
);

146 
SCM_API
 
SCM
 
	`scm_m_quasiquŸe
 (SCM 
x‹ig
, SCM 
ív
);

147 
SCM_API
 
SCM
 
	`scm_m_dñay
 (SCM 
x‹ig
, SCM 
ív
);

148 
SCM_API
 
SCM
 
	`scm_m_gíîÆized_£t_x
 (SCM 
x‹ig
, SCM 
ív
);

149 
SCM_API
 
SCM
 
	`scm_m_futuª
 (SCM 
x‹ig
, SCM 
ív
);

150 
SCM_API
 
SCM
 
	`scm_m_deföe
 (SCM 
x
, SCM 
ív
);

151 
SCM_API
 
SCM
 
	`scm_m_Àåec
 (SCM 
x‹ig
, SCM 
ív
);

152 
SCM_API
 
SCM
 
	`scm_m_Àt
 (SCM 
x‹ig
, SCM 
ív
);

153 
SCM_API
 
SCM
 
	`scm_m_≠∂y
 (SCM 
x‹ig
, SCM 
ív
);

154 
SCM_API
 
SCM
 
	`scm_m_c⁄t
 (SCM 
x‹ig
, SCM 
ív
);

155 #i‡
SCM_ENABLE_ELISP


156 
SCM_API
 
SCM
 
	`scm_m_nû_c⁄d
 (SCM 
x‹ig
, SCM 
ív
);

157 
SCM_API
 
SCM
 
	`scm_m_©f›
 (SCM 
x‹ig
, SCM 
ív
);

159 
SCM_API
 
SCM
 
	`scm_m_©böd
 (SCM 
x‹ig
, SCM 
ív
);

160 
SCM_API
 
SCM
 
	`scm_m_©¶Ÿ_ªf
 (SCM 
x‹ig
, SCM 
ív
);

161 
SCM_API
 
SCM
 
	`scm_m_©¶Ÿ_£t_x
 (SCM 
x‹ig
, SCM 
ív
);

162 
SCM_API
 
SCM
 
	`scm_m_©di•©ch
 (SCM 
x‹ig
, SCM 
ív
);

163 
SCM_API
 
SCM
 
	`scm_m_©_ˇŒ_wôh_vÆues
 (SCM 
x‹ig
, SCM 
ív
);

164 
SCM_API
 
	`scm_bad¨g•
 (
SCM
 
f‹mÆs
, SCM 
¨gs
);

165 
SCM_API
 
SCM
 
	`scm_ˇŒ_0
 (SCM 
¥oc
);

166 
SCM_API
 
SCM
 
	`scm_ˇŒ_1
 (SCM 
¥oc
, SCM 
¨g1
);

167 
SCM_API
 
SCM
 
	`scm_ˇŒ_2
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨g2
);

168 
SCM_API
 
SCM
 
	`scm_ˇŒ_3
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨g2
, SCM 
¨g3
);

169 
SCM_API
 
SCM
 
	`scm_ˇŒ_4
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨g2
, SCM 
¨g3
, SCM 
¨g4
);

170 
SCM_API
 
SCM
 
	`scm_≠∂y_0
 (SCM 
¥oc
, SCM 
¨gs
);

171 
SCM_API
 
SCM
 
	`scm_≠∂y_1
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨gs
);

172 
SCM_API
 
SCM
 
	`scm_≠∂y_2
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨g2
, SCM 
¨gs
);

173 
SCM_API
 
SCM
 
	`scm_≠∂y_3
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨g2
, SCM 
¨g3
, SCM 
¨gs
);

174 
SCM_API
 
SCM
 
	`scm_i_ˇŒ_˛osuª_0
 (SCM 
¥oc
);

175 
SCM_API
 
scm_t_åampﬁöe_0
 
	`scm_åampﬁöe_0
 (
SCM
 
¥oc
);

176 
SCM_API
 
scm_t_åampﬁöe_1
 
	`scm_åampﬁöe_1
 (
SCM
 
¥oc
);

177 
SCM_API
 
scm_t_åampﬁöe_2
 
	`scm_åampﬁöe_2
 (
SCM
 
¥oc
);

178 
SCM_API
 
SCM
 
	`scm_nc⁄c2œ°
 (SCM 
l°
);

179 
SCM_API
 
SCM
 
	`scm_≠∂y
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨gs
);

180 
SCM_API
 
SCM
 
	`scm_d≠∂y
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨gs
);

181 
SCM_API
 
SCM
 
	`scm_m≠
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨gs
);

182 
SCM_API
 
SCM
 
	`scm_f‹_óch
 (SCM 
¥oc
, SCM 
¨g1
, SCM 
¨gs
);

183 
SCM_API
 
SCM
 
	`scm_˛osuª
 (SCM 
code
, SCM 
ív
);

184 
SCM_API
 
SCM
 
	`scm_mak¥om
 (SCM 
code
);

185 
SCM_API
 
SCM
 
	`scm_f‹˚
 (SCM 
x
);

186 
SCM_API
 
SCM
 
	`scm_¥omi£_p
 (SCM 
x
);

187 
SCM_API
 
SCM
 
	`scm_c⁄s_sour˚
 (SCM 
x‹ig
, SCM 
x
, SCM 
y
);

188 
SCM_API
 
SCM
 
	`scm_c›y_åì
 (SCM 
obj
);

189 
SCM_API
 
SCM
 
	`scm_i_evÆ_x
 (SCM 
exp
, SCM 
ív
);

190 
SCM_API
 
SCM
 
	`scm_i_evÆ
 (SCM 
exp
, SCM 
ív
);

191 
SCM_API
 
SCM
 
	`scm_¥imôive_evÆ
 (SCM 
exp
);

192 
SCM_API
 
SCM
 
	`scm_¥imôive_evÆ_x
 (SCM 
exp
);

193 
SCM_API
 
SCM
 
	`scm_evÆ
 (SCM 
exp
, SCM 
moduÀ
);

194 
SCM_API
 
SCM
 
	`scm_evÆ_x
 (SCM 
exp
, SCM 
moduÀ
);

196 
SCM_API
 
	`scm_i_¥öt_ûoc
 (
SCM
 , SCM );

197 
SCM_API
 
	`scm_i_¥öt_isym
 (
SCM
 , SCM );

198 
SCM_API
 
SCM
 
	`scm_i_unmemoc›y_ex¥
 (SCM 
ex¥
, SCM 
ív
);

199 
SCM_API
 
SCM
 
	`scm_i_unmemoc›y_body
 (SCM 
f‹ms
, SCM 
ív
);

200 
SCM_API
 
	`scm_öô_evÆ
 ();

203 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

205 
SCM_API
 
SCM
 
	`scm_m_undeföe
 (SCM 
x
, SCM 
ív
);

208 
SCM_API
 
SCM
 
	`scm_m_ex∑nd_body
 (SCM 
x‹ig
, SCM 
ív
);

211 
SCM_API
 
SCM
 
	`scm_unmemoˇr
 (SCM 
f‹m
, SCM 
ív
);

212 
SCM_API
 
SCM
 
	`scm_ma¸€xp
 (SCM 
x
, SCM 
ív
);

215 
SCM_API
 
SCM
 
	`scm_˚vÆ
 (SCM 
x
, SCM 
ív
);

216 
SCM_API
 
SCM
 
	`scm_devÆ
 (SCM 
x
, SCM 
ív
);

217 
SCM_API
 
	$SCM
 (*
scm_˚vÆ_±r
Ë(
SCM
 
x
, SCM 
ív
);

	@/usr/include/libguile/evalext.h

3 #i‚de‡
SCM_EVALEXT_H


4 
	#SCM_EVALEXT_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_deföed_p
 (SCM 
sym
, SCM 
ív
);

30 
SCM_API
 
SCM
 
scm_£lf_evÆu©ög_p
 (SCM 
obj
);

31 
SCM_API
 
scm_öô_evÆext
 ();

33 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

35 
	#scm_deföedp
 
scm_deföed_p


	)

	@/usr/include/libguile/extensions.h

3 #i‚de‡
SCM_EXTENSIONS_H


4 
	#SCM_EXTENSIONS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
scm_c_ªgi°î_exãnsi⁄
 (c⁄° *
lib
, c⁄° *
öô
,

30 (*
func
Ë(*), *
d©a
);

32 
SCM_API
 
	`scm_c_lﬂd_exãnsi⁄
 (c⁄° *
lib
, c⁄° *
öô
);

33 
SCM_API
 
SCM
 
	`scm_lﬂd_exãnsi⁄
 (SCM 
lib
, SCM 
öô
);

35 
SCM_API
 
	`scm_öô_exãnsi⁄s
 ();

	@/usr/include/libguile/feature.h

3 #i‚de‡
SCM_FEATURE_H


4 
	#SCM_FEATURE_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
scm_add_„©uª
 (c⁄° * 
°r
);

28 
SCM_API
 
SCM
 
scm_¥ogøm_¨gumíts
 ();

29 
SCM_API
 
scm_£t_¥ogøm_¨gumíts
 (
¨gc
, **
¨gv
, *
fú°
);

30 
SCM_API
 
SCM
 
scm_£t_¥ogøm_¨gumíts_scm
 (SCM 
l°
);

31 
SCM_API
 
scm_öô_„©uª
 ();

	@/usr/include/libguile/filesys.h

3 #i‚de‡
SCM_FILESYS_H


4 
	#SCM_FILESYS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_dú
;

31 
	#SCM_DIR_FLAG_OPEN
 (1L << 16)

	)

33 
	#SCM_DIRP
(
x
Ë(!
	`SCM_IMP
 (xË&& (
	`SCM_TYP16
 (xË=
scm_tc16_dú
))

	)

34 
	#SCM_DIR_OPEN_P
(
x
Ë(
	`SCM_CELL_WORD_0
 (xË& 
SCM_DIR_FLAG_OPEN
)

	)

38 
SCM_API
 
SCM
 
scm_chown
 (SCM 
obje˘
, SCM 
ow√r
, SCM 
group
);

39 
SCM_API
 
SCM
 
scm_chmod
 (SCM 
obje˘
, SCM 
mode
);

40 
SCM_API
 
SCM
 
scm_umask
 (SCM 
mode
);

41 
SCM_API
 
SCM
 
scm_›í_fdes
 (SCM 
∑th
, SCM 
Êags
, SCM 
mode
);

42 
SCM_API
 
SCM
 
scm_›í
 (SCM 
∑th
, SCM 
Êags
, SCM 
mode
);

43 
SCM_API
 
SCM
 
scm_˛o£
 (SCM 
fd_‹_p‹t
);

44 
SCM_API
 
SCM
 
scm_˛o£_fdes
 (SCM 
fd
);

45 
SCM_API
 
SCM
 
scm_°©
 (SCM 
obje˘
);

46 
SCM_API
 
SCM
 
scm_lök
 (SCM 
ﬁd∑th
, SCM 
√w∑th
);

47 
SCM_API
 
SCM
 
scm_ª«me
 (SCM 
ﬁd«me
, SCM 
√w«me
);

48 
SCM_API
 
SCM
 
scm_dñëe_fûe
 (SCM 
°r
);

49 
SCM_API
 
SCM
 
scm_mkdú
 (SCM 
∑th
, SCM 
mode
);

50 
SCM_API
 
SCM
 
scm_rmdú
 (SCM 
∑th
);

51 
SCM_API
 
SCM
 
scm_dúe˘‹y_°ªam_p
 (SCM 
obj
);

52 
SCM_API
 
SCM
 
scm_›ídú
 (SCM 
dú«me
);

53 
SCM_API
 
SCM
 
scm_ªaddú
 (SCM 
p‹t
);

54 
SCM_API
 
SCM
 
scm_ªwöddú
 (SCM 
p‹t
);

55 
SCM_API
 
SCM
 
scm_˛o£dú
 (SCM 
p‹t
);

56 
SCM_API
 
SCM
 
scm_chdú
 (SCM 
°r
);

57 
SCM_API
 
SCM
 
scm_gëcwd
 ();

58 
SCM_API
 
SCM
 
scm_£À˘
 (SCM 
ªads
, SCM 
wrôes
, SCM 
ex˚±s
, SCM 
£cs
, SCM 
m£cs
);

59 
SCM_API
 
SCM
 
scm_f˙é
 (SCM 
obje˘
, SCM 
cmd
, SCM 
vÆue
);

60 
SCM_API
 
SCM
 
scm_fsync
 (SCM 
obje˘
);

61 
SCM_API
 
SCM
 
scm_symlök
 (SCM 
ﬁd∑th
, SCM 
√w∑th
);

62 
SCM_API
 
SCM
 
scm_ªadlök
 (SCM 
∑th
);

63 
SCM_API
 
SCM
 
scm_l°©
 (SCM 
°r
);

64 
SCM_API
 
SCM
 
scm_c›y_fûe
 (SCM 
ﬁdfûe
, SCM 
√wfûe
);

65 
SCM_API
 
SCM
 
scm_dú«me
 (SCM 
fûíame
);

66 
SCM_API
 
SCM
 
scm_ba£«me
 (SCM 
fûíame
, SCM 
suffix
);

68 
SCM_API
 
scm_öô_fûesys
 ();

	@/usr/include/libguile/fluids.h

3 #i‚de‡
SCM_FLUIDS_H


4 
	#SCM_FLUIDS_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/roŸ.h
"

27 
	~"libguûe/ve˘‹s.h
"

53 
	#SCM_FLUID_NUM
(
x
Ë
	`scm_i_Êuid_num
 (x)

	)

54 
	#SCM_FAST_FLUID_REF
(
n
Ë
	`scm_i_Á°_Êuid_ªf
 (n)

	)

55 
	#SCM_FAST_FLUID_SET_X
(
n
, 
vÆ
Ë
	`scm_i_Á°_Êuid_£t_x
 (“),(vÆ))

	)

57 
SCM_API
 
SCM
 
scm_make_Êuid
 ();

58 
SCM_API
 
scm_is_Êuid
 (
SCM
 
obj
);

59 
SCM_API
 
SCM
 
scm_Êuid_p
 (SCM 
Ê
);

60 
SCM_API
 
SCM
 
scm_Êuid_ªf
 (SCM 
Êuid
);

61 
SCM_API
 
SCM
 
scm_Êuid_£t_x
 (SCM 
Êuid
, SCM 
vÆue
);

62 
SCM_API
 
size_t
 
scm_i_Êuid_num
 (
SCM
 
Ê
);

63 
SCM_API
 
SCM
 
scm_i_Á°_Êuid_ªf
 (
size_t
 
n
);

64 
SCM_API
 
scm_i_Á°_Êuid_£t_x
 (
size_t
 
n
, 
SCM
 
vÆ
);

66 
SCM_API
 
SCM
 
scm_c_wôh_Êuids
 (SCM 
Êuids
, SCM 
vÆs
,

67 
	$SCM
 (*
˝roc
)(*), *
cd©a
);

68 
SCM_API
 
SCM
 
	`scm_c_wôh_Êuid
 (SCM 
Êuid
, SCM 
vÆ
,

69 
	$SCM
 (*
˝roc
)(*), *
cd©a
);

70 
SCM_API
 
SCM
 
	`scm_wôh_Êuids
 (SCM 
Êuids
, SCM 
vÆs
, SCM 
thunk
);

71 
SCM_API
 
SCM
 
	`scm_wôh_Êuid
 (SCM 
Êuid
, SCM 
vÆ
, SCM 
thunk
);

73 
SCM_API
 
	`scm_dynwöd_Êuid
 (
SCM
 
Êuid
, SCM 
vÆue
);

75 
SCM_API
 
SCM
 
	`scm_make_dy«mic_°©e
 (SCM 
∑ª¡
);

76 
SCM_API
 
SCM
 
	`scm_dy«mic_°©e_p
 (SCM 
obj
);

77 
SCM_API
 
	`scm_is_dy«mic_°©e
 (
SCM
 
obj
);

78 
SCM_API
 
SCM
 
	`scm_cuºít_dy«mic_°©e
 ();

79 
SCM_API
 
SCM
 
	`scm_£t_cuºít_dy«mic_°©e
 (SCM 
°©e
);

80 
SCM_API
 
	`scm_dynwöd_cuºít_dy«mic_°©e
 (
SCM
 
°©e
);

81 
SCM_API
 *
	`scm_c_wôh_dy«mic_°©e
 (
SCM
 
°©e
,

82 *(*
func
)(*), *
d©a
);

83 
SCM_API
 
SCM
 
	`scm_wôh_dy«mic_°©e
 (SCM 
°©e
, SCM 
¥oc
);

85 
SCM_API
 
SCM
 
	`scm_i_make_öôül_dy«mic_°©e
 ();

87 
SCM_API
 
	`scm_Êuids_¥ehi°‹y
 ();

88 
SCM_API
 
	`scm_öô_Êuids
 ();

	@/usr/include/libguile/fports.h

3 #i‚de‡
SCM_FPORTS_H


4 
	#SCM_FPORTS_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/p‹ts.h
"

32 
	sscm_t_Â‹t
 {

33 
	mfdes
;

34 } 
	tscm_t_Â‹t
;

36 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_Â‹t
;

38 
	#SCM_FSTREAM
(
x
Ë((
scm_t_Â‹t
 *Ë
	`SCM_STREAM
 (x))

	)

39 
	#SCM_FPORT_FDES
(
x
Ë(
	`SCM_FSTREAM
 (x)->
fdes
)

	)

41 
	#SCM_FPORTP
(
x
Ë(!
	`SCM_IMP
 (xË&& (
	`SCM_TYP16
 (xË=
scm_tc16_Â‹t
))

	)

42 
	#SCM_OPFPORTP
(
x
Ë(
	`SCM_FPORTP
 (xË&& (
	`SCM_CELL_WORD_0
 (xË& 
SCM_OPN
))

	)

43 
	#SCM_OPINFPORTP
(
x
Ë(
	`SCM_OPFPORTP
 (xË&& (
	`SCM_CELL_WORD_0
 (xË& 
SCM_RDNG
))

	)

44 
	#SCM_OPOUTFPORTP
(
x
Ë(
	`SCM_OPFPORTP
 (xË&& (
	`SCM_CELL_WORD_0
 (xË& 
SCM_WRTNG
))

	)

47 
	#SCM_FDES_RANDOM_P
(
fdes
Ë((
	`l£ek
 (fdes, 0, 
SEEK_CUR
Ë=-1Ë? 0 : 1)

	)

50 
SCM_API
 
SCM
 
scm_£tbuf0
 (SCM 
p‹t
);

51 
SCM_API
 
SCM
 
scm_£tvbuf
 (SCM 
p‹t
, SCM 
mode
, SCM 
size
);

52 
SCM_API
 
scm_evi˘_p‹ts
 (
fd
);

53 
SCM_API
 
SCM
 
scm_›í_fûe
 (SCM 
fûíame
, SCM 
modes
);

54 
SCM_API
 
SCM
 
scm_fdes_to_p‹t
 (
fdes
, *
mode
, SCM 
«me
);

55 
SCM_API
 
SCM
 
scm_fûe_p‹t_p
 (SCM 
obj
);

56 
SCM_API
 
scm_öô_Â‹ts
 ();

60 
SCM_API
 
SCM
 
scm_i_fdes_to_p‹t
 (
fdes
, 
mode_bôs
, SCM 
«me
);

61 
SCM_API
 
scm_i_Â‹t_åunˇã
 (
SCM
, SCM);

62 
SCM_API
 
SCM
 
scm_i_Â‹t_£ek
 (SCM, SCM, );

	@/usr/include/libguile/futures.h

3 #i‚de‡
SCM_FUTURES_H


4 
	#SCM_FUTURES_H


	)

37 
	~"libguûe/__scm.h
"

38 
	~"libguûe/thªads.h
"

42 
	sscm_t_futuª
 {

43 
SCM
 
	md©a
;

44 
scm_i_±hªad_muãx_t
 
	mmuãx
;

45 
scm_i_±hªad_c⁄d_t
 
	mc⁄d
;

46 
	m°©us
;

47 
	mdõ_p
;

48 } 
	tscm_t_futuª
;

50 
	#SCM_FUTURE_DEAD
 0

	)

51 
	#SCM_FUTURE_SIGNAL_ME
 -1

	)

52 
	#SCM_FUTURE_COMPUTING
 1

	)

53 
	#SCM_FUTURE_TASK_ASSIGNED
 2

	)

55 
	#SCM_VALIDATE_FUTURE
(
pos
, 
obj
) \

56 
	`SCM_ASSERT_TYPE
 (
	`SCM_TYP16_PREDICATE
 (
scm_tc16_futuª
, 
obj
), \

57 
obj
, 
pos
, 
FUNC_NAME
, "futuª");

	)

58 
	#SCM_FUTURE
(
futuª
Ë((
scm_t_futuª
 *Ë
	`SCM_SMOB_DATA_2
 (futuª))

	)

59 
	#SCM_FUTURE_MUTEX
(
futuª
Ë(&
	`SCM_FUTURE
 (futuª)->
muãx
)

	)

60 
	#SCM_FUTURE_COND
(
futuª
Ë(&
	`SCM_FUTURE
 (futuª)->
c⁄d
)

	)

61 
	#SCM_FUTURE_STATUS
(
futuª
Ë(
	`SCM_FUTURE
 (futuª)->
°©us
)

	)

62 
	#SCM_SET_FUTURE_STATUS
(
futuª
, 
x
) \

63 dÿ{ 
	`SCM_FUTURE
 (
futuª
)->
°©us
 = (
x
); } 0)

	)

64 
	#SCM_FUTURE_ALIVE_P
(
futuª
Ë(
	`SCM_FUTURE_STATUS
 (futuª))

	)

65 
	#SCM_FUTURE_DATA
(
futuª
Ë(
	`SCM_FUTURE
 (futuª)->
d©a
)

	)

66 
	#SCM_SET_FUTURE_DATA
(
futuª
, 
x
) \

67 dÿ{ 
	`SCM_FUTURE
 (
futuª
)->
d©a
 = (
x
); } 0)

	)

68 
	#SCM_FUTURE_NEXT
 
SCM_SMOB_OBJECT


	)

69 
	#SCM_FUTURE_NEXTLOC
 
SCM_SMOB_OBJECT_LOC


	)

70 
	#SCM_SET_FUTURE_NEXT
 
SCM_SET_SMOB_OBJECT


	)

72 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_futuª
;

74 
SCM
 *
scm_loc_sys_thªad_h™dÀr
;

76 
SCM_API
 
SCM
 
scm_i_make_futuª
 (SCM 
thunk
);

77 
SCM_API
 
SCM
 
scm_make_futuª
 (SCM 
thunk
);

78 
SCM_API
 
SCM
 
scm_futuª_ªf
 (SCM 
futuª
);

80 
scm_öô_futuªs
 ();

	@/usr/include/libguile/gc.h

3 #i‚de‡
SCM_GC_H


4 
	#SCM_GC_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/hooks.h
"

28 
	~"libguûe/thªads.h
"

60 
	sscm_t_˚Œ


62 
SCM
 
	mw‹d_0
;

63 
SCM
 
	mw‹d_1
;

64 } 
	tscm_t_˚Œ
;

86 #ifde‡
_UNICOS


87 
	#SCM2PTR
(
x
Ë((
scm_t_˚Œ
 *Ë(
	`SCM_UNPACK
 (xË>> 3))

	)

88 
	#PTR2SCM
(
x
Ë(
	`SCM_PACK
 (((
scm_t_bôs
Ë(x)Ë<< 3))

	)

90 
	#SCM2PTR
(
x
Ë((
scm_t_˚Œ
 *Ë(
	`SCM_UNPACK
 (x)))

	)

91 
	#PTR2SCM
(
x
Ë(
	`SCM_PACK
 ((
scm_t_bôs
Ë(x)))

	)

95 
	#SCM_GC_CARD_N_HEADER_CELLS
 1

	)

96 
	#SCM_GC_CARD_N_CELLS
 256

	)

97 
	#SCM_GC_SIZEOF_CARD
 
SCM_GC_CARD_N_CELLS
 *  (
scm_t_˚Œ
)

	)

99 
	#SCM_GC_CARD_BVEC
(
ˇrd
Ë((
scm_t_c_bvec_l⁄g
 *Ë((ˇrd)->
w‹d_0
))

	)

100 
	#SCM_GC_SET_CARD_BVEC
(
ˇrd
, 
bvec
) \

101 ((
ˇrd
)->
w‹d_0
 = (
SCM
Ë(
bvec
))

	)

102 
	#SCM_GC_GET_CARD_FLAGS
(
ˇrd
Ë((Ë((ˇrd)->
w‹d_1
))

	)

103 
	#SCM_GC_SET_CARD_FLAGS
(
ˇrd
, 
Êags
) \

104 ((
ˇrd
)->
w‹d_1
 = (
SCM
Ë(
Êags
))

	)

106 
	#SCM_GC_GET_CARD_FLAG
(
ˇrd
, 
shi·
) \

107 (
	`SCM_GC_GET_CARD_FLAGS
 (
ˇrd
Ë& (1L << (
shi·
)))

	)

108 
	#SCM_GC_SET_CARD_FLAG
(
ˇrd
, 
shi·
) \

109 (
	`SCM_GC_SET_CARD_FLAGS
 (
ˇrd
, 
	`SCM_GC_GET_CARD_FLAGS
(ˇrdË| (1L << (
shi·
))))

	)

110 
	#SCM_GC_CLEAR_CARD_FLAG
(
ˇrd
, 
shi·
) \

111 (
	`SCM_GC_SET_CARD_FLAGS
 (
ˇrd
, 
	`SCM_GC_GET_CARD_FLAGS
(ˇrdË& ~(1L << (
shi·
))))

	)

121 
	#SCM_GC_CARD_SIZE_MASK
 (
SCM_GC_SIZEOF_CARD
-1)

	)

122 
	#SCM_GC_CARD_ADDR_MASK
 (~
SCM_GC_CARD_SIZE_MASK
)

	)

124 
	#SCM_GC_CELL_CARD
(
x
Ë((
scm_t_˚Œ
 *Ë((Ë(xË& 
SCM_GC_CARD_ADDR_MASK
))

	)

125 
	#SCM_GC_CELL_OFFSET
(
x
Ë(((Ë(xË& 
SCM_GC_CARD_SIZE_MASK
Ë>> 
SCM_CELL_SIZE_SHIFT
)

	)

126 
	#SCM_GC_CELL_BVEC
(
x
Ë
	`SCM_GC_CARD_BVEC
 (
	`SCM_GC_CELL_CARD
 (x))

	)

127 
	#SCM_GC_SET_CELL_BVEC
(
x
, 
bvec
Ë
	`SCM_GC_SET_CARD_BVEC
 (
	`SCM_GC_CELL_CARD
 (x), bvec)

	)

128 
	#SCM_GC_CELL_GET_BIT
(
x
Ë
	`SCM_C_BVEC_GET
 (
	`SCM_GC_CELL_BVEC
 (x), 
	`SCM_GC_CELL_OFFSET
 (x))

	)

129 
	#SCM_GC_CELL_SET_BIT
(
x
Ë
	`SCM_C_BVEC_SET
 (
	`SCM_GC_CELL_BVEC
 (x), 
	`SCM_GC_CELL_OFFSET
 (x))

	)

130 
	#SCM_GC_CELL_CLEAR_BIT
(
x
Ë
	`SCM_C_BVEC_CLEAR
 (
	`SCM_GC_CELL_BVEC
 (x), 
	`SCM_GC_CELL_OFFSET
 (x))

	)

132 
	#SCM_GC_CARD_UP
(
x
Ë
	`SCM_GC_CELL_CARD
 ((*Ë(xË+ 
SCM_GC_SIZEOF_CARD
 - 1)

	)

133 
	#SCM_GC_CARD_DOWN
 
SCM_GC_CELL_CARD


	)

136 
	tscm_t_c_bvec_l⁄g
;

138 #i‡(
SCM_SIZEOF_UNSIGNED_LONG
 == 8)

139 
	#SCM_C_BVEC_LONG_BITS
 64

	)

140 
	#SCM_C_BVEC_OFFSET_SHIFT
 6

	)

141 
	#SCM_C_BVEC_POS_MASK
 63

	)

142 
	#SCM_CELL_SIZE_SHIFT
 4

	)

144 
	#SCM_C_BVEC_LONG_BITS
 32

	)

145 
	#SCM_C_BVEC_OFFSET_SHIFT
 5

	)

146 
	#SCM_C_BVEC_POS_MASK
 31

	)

147 
	#SCM_CELL_SIZE_SHIFT
 3

	)

150 
	#SCM_C_BVEC_OFFSET
(
pos
Ë’o†>> 
SCM_C_BVEC_OFFSET_SHIFT
)

	)

152 
	#SCM_C_BVEC_GET
(
bvec
, 
pos
Ë(bvec[
	`SCM_C_BVEC_OFFSET
 (pos)] & (1L << (po†& 
SCM_C_BVEC_POS_MASK
)))

	)

153 
	#SCM_C_BVEC_SET
(
bvec
, 
pos
Ë(bvec[
	`SCM_C_BVEC_OFFSET
 (pos)] |(1L << (po†& 
SCM_C_BVEC_POS_MASK
)))

	)

154 
	#SCM_C_BVEC_CLEAR
(
bvec
, 
pos
Ë(bvec[
	`SCM_C_BVEC_OFFSET
 (pos)] &~(1L << (po†& 
SCM_C_BVEC_POS_MASK
)))

	)

157 
	#SCM_GC_MARK_P
(
x
Ë
	`SCM_GC_CELL_GET_BIT
 (x)

	)

158 
	#SCM_SET_GC_MARK
(
x
Ë
	`SCM_GC_CELL_SET_BIT
 (x)

	)

159 
	#SCM_CLEAR_GC_MARK
(
x
Ë
	`SCM_GC_CELL_CLEAR_BIT
 (x)

	)

167 
	#SCM_GC_CELL_OBJECT
(
x
, 
n
Ë(((
SCM
 *)
	`SCM2PTR
 (x)Ë[n])

	)

168 
	#SCM_GC_CELL_WORD
(
x
, 
n
Ë(
	`SCM_UNPACK
 (
	`SCM_GC_CELL_OBJECT
 ((x), (n))))

	)

170 
	#SCM_GC_SET_CELL_OBJECT
(
x
, 
n
, 
v
Ë((((
SCM
 *)
	`SCM2PTR
 (x)Ë[n]Ë(v))

	)

171 
	#SCM_GC_SET_CELL_WORD
(
x
, 
n
, 
v
) \

172 (
	`SCM_GC_SET_CELL_OBJECT
 ((
x
), (
n
), 
	`SCM_PACK
 (
v
)))

	)

174 
	#SCM_GC_CELL_TYPE
(
x
Ë(
	`SCM_GC_CELL_OBJECT
 ((x), 0))

	)

184 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

185 
	#SCM_VALIDATE_CELL
(
˚Œ
, 
ex¥
Ë(
	`scm_as£π_˚Œ_vÆid
 (˚Œ), (ex¥))

	)

187 
	#SCM_VALIDATE_CELL
(
˚Œ
, 
ex¥
Ë”x¥)

	)

190 
	#SCM_CELL_WORD
(
x
, 
n
) \

191 
	`SCM_VALIDATE_CELL
 ((
x
), 
	`SCM_GC_CELL_WORD
 ((x), (
n
)))

	)

192 
	#SCM_CELL_WORD_0
(
x
Ë
	`SCM_CELL_WORD
 ((x), 0)

	)

193 
	#SCM_CELL_WORD_1
(
x
Ë
	`SCM_CELL_WORD
 ((x), 1)

	)

194 
	#SCM_CELL_WORD_2
(
x
Ë
	`SCM_CELL_WORD
 ((x), 2)

	)

195 
	#SCM_CELL_WORD_3
(
x
Ë
	`SCM_CELL_WORD
 ((x), 3)

	)

197 
	#SCM_CELL_OBJECT
(
x
, 
n
) \

198 
	`SCM_VALIDATE_CELL
 ((
x
), 
	`SCM_GC_CELL_OBJECT
 ((x), (
n
)))

	)

199 
	#SCM_CELL_OBJECT_0
(
x
Ë
	`SCM_CELL_OBJECT
 ((x), 0)

	)

200 
	#SCM_CELL_OBJECT_1
(
x
Ë
	`SCM_CELL_OBJECT
 ((x), 1)

	)

201 
	#SCM_CELL_OBJECT_2
(
x
Ë
	`SCM_CELL_OBJECT
 ((x), 2)

	)

202 
	#SCM_CELL_OBJECT_3
(
x
Ë
	`SCM_CELL_OBJECT
 ((x), 3)

	)

204 
	#SCM_SET_CELL_WORD
(
x
, 
n
, 
v
) \

205 
	`SCM_VALIDATE_CELL
 ((
x
), 
	`SCM_GC_SET_CELL_WORD
 ((x), (
n
), (
v
)))

	)

206 
	#SCM_SET_CELL_WORD_0
(
x
, 
v
Ë
	`SCM_SET_CELL_WORD
 ((x), 0, (v))

	)

207 
	#SCM_SET_CELL_WORD_1
(
x
, 
v
Ë
	`SCM_SET_CELL_WORD
 ((x), 1, (v))

	)

208 
	#SCM_SET_CELL_WORD_2
(
x
, 
v
Ë
	`SCM_SET_CELL_WORD
 ((x), 2, (v))

	)

209 
	#SCM_SET_CELL_WORD_3
(
x
, 
v
Ë
	`SCM_SET_CELL_WORD
 ((x), 3, (v))

	)

211 
	#SCM_SET_CELL_OBJECT
(
x
, 
n
, 
v
) \

212 
	`SCM_VALIDATE_CELL
 ((
x
), 
	`SCM_GC_SET_CELL_OBJECT
 ((x), (
n
), (
v
)))

	)

213 
	#SCM_SET_CELL_OBJECT_0
(
x
, 
v
Ë
	`SCM_SET_CELL_OBJECT
 ((x), 0, (v))

	)

214 
	#SCM_SET_CELL_OBJECT_1
(
x
, 
v
Ë
	`SCM_SET_CELL_OBJECT
 ((x), 1, (v))

	)

215 
	#SCM_SET_CELL_OBJECT_2
(
x
, 
v
Ë
	`SCM_SET_CELL_OBJECT
 ((x), 2, (v))

	)

216 
	#SCM_SET_CELL_OBJECT_3
(
x
, 
v
Ë
	`SCM_SET_CELL_OBJECT
 ((x), 3, (v))

	)

218 
	#SCM_CELL_OBJECT_LOC
(
x
, 
n
Ë(
	`SCM_VALIDATE_CELL
((x), &
	`SCM_GC_CELL_OBJECT
 ((x), (n))))

	)

219 
	#SCM_CARLOC
(
x
Ë(
	`SCM_CELL_OBJECT_LOC
 ((x), 0))

	)

220 
	#SCM_CDRLOC
(
x
Ë(
	`SCM_CELL_OBJECT_LOC
 ((x), 1))

	)

222 
	#SCM_CELL_TYPE
(
x
Ë
	`SCM_CELL_WORD_0
 (x)

	)

223 
	#SCM_SET_CELL_TYPE
(
x
, 
t
Ë
	`SCM_SET_CELL_WORD_0
 ((x), (t))

	)

230 
	#SCM_FREE_CELL_CDR
(
x
) \

231 (
	`SCM_GC_CELL_OBJECT
 ((
x
), 1))

	)

232 
	#SCM_SET_FREE_CELL_CDR
(
x
, 
v
) \

233 (
	`SCM_GC_SET_CELL_OBJECT
 ((
x
), 1, (
v
)))

	)

235 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

238 
SCM_API
 
	gscm_debug_˚Œ_ac˚s£s_p
;

239 
SCM_API
 
	gscm_ex≥nsive_debug_˚Œ_ac˚s£s_p
;

240 
SCM_API
 
	gscm_debug_˚Œs_gc_öãrvÆ
 ;

241 
scm_i_ex≥nsive_vÆid©i⁄_check
 (
SCM
 
˚Œ
);

244 
SCM_API
 
scm_i_±hªad_muãx_t
 
	gscm_i_gc_admö_muãx
;

246 
	#scm_gc_ru¬ög_p
 (
SCM_I_CURRENT_THREAD
->
gc_ru¬ög_p
)

	)

247 
SCM_API
 
scm_i_±hªad_muãx_t
 
	gscm_i_swìp_muãx
;

249 #ifde‡
__ü64__


250 *
scm_ü64_ªgi°î_backög_°‹e_ba£
 ();

251 *
scm_ü64_¨_b•
 (const *);

256 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

257 
SCM_API
 
size_t
 
	gscm_deÁu…_öô_hóp_size_1
;

258 
SCM_API
 
	gscm_deÁu…_mö_yõld_1
;

259 
SCM_API
 
size_t
 
	gscm_deÁu…_öô_hóp_size_2
;

260 
SCM_API
 
	gscm_deÁu…_mö_yõld_2
;

261 
SCM_API
 
size_t
 
	gscm_deÁu…_max_£gmít_size
;

263 
	#scm_deÁu…_öô_hóp_size_1
 
dïªˇãd


	)

264 
	#scm_deÁu…_mö_yõld_1
 
dïªˇãd


	)

265 
	#scm_deÁu…_öô_hóp_size_2
 
dïªˇãd


	)

266 
	#scm_deÁu…_mö_yõld_2
 
dïªˇãd


	)

267 
	#scm_deÁu…_max_£gmít_size
 
dïªˇãd


	)

271 
SCM_API
 
size_t
 
	gscm_max_£gmít_size
;

273 
	#SCM_SET_FREELIST_LOC
(
key
,
±r
Ë
	`scm_i_±hªad_£t•ecific
 ((key), (±r))

	)

274 
	#SCM_FREELIST_LOC
(
key
Ë((
SCM
 *Ë
	`scm_i_±hªad_gë•ecific
 (key))

	)

275 
SCM_API
 
scm_i_±hªad_key_t
 
	gscm_i_‰ìli°
;

276 
SCM_API
 
scm_i_±hªad_key_t
 
	gscm_i_‰ìli°2
;

277 
SCM_API
 
scm_t_˚Œ_ty≥_°©i°ics
 
	gscm_i_ma°î_‰ìli°
;

278 
SCM_API
 
scm_t_˚Œ_ty≥_°©i°ics
 
	gscm_i_ma°î_‰ìli°2
;

279 #ifde‡
__MINGW32__


280 
SCM_API
 
scm_i_±hªad_key_t
 *
	gscm_i_‰ìli°_±r
;

281 
SCM_API
 
scm_i_±hªad_key_t
 *
	gscm_i_‰ìli°2_±r
;

282 
SCM_API
 
scm_t_˚Œ_ty≥_°©i°ics
 *
	gscm_i_ma°î_‰ìli°_±r
;

283 
SCM_API
 
scm_t_˚Œ_ty≥_°©i°ics
 *
	gscm_i_ma°î_‰ìli°2_±r
;

286 
SCM_API
 
	gscm_gc_˚Œs_swït
;

287 
SCM_API
 
	gscm_gc_˚Œs_cﬁÀ˘ed
;

288 
SCM_API
 
	gscm_gc_mÆloc_cﬁÀ˘ed
;

289 
SCM_API
 
	gscm_gc_p‹ts_cﬁÀ˘ed
;

290 
SCM_API
 
	gscm_˚Œs_Æloˇãd
;

291 
SCM_API
 
	gscm_œ°_˚Œs_Æloˇãd
;

292 
SCM_API
 
	gscm_gc_˚Œ_yõld_≥r˚¡age
;

293 
SCM_API
 
	gscm_gc_mÆloc_yõld_≥r˚¡age
;

294 
SCM_API
 
	gscm_mÆloˇãd
;

295 
SCM_API
 
	gscm_måiggî
;

296 
SCM_API
 
	gscm_gc_˚Œs_Æloˇãd_acc
;

300 
SCM_API
 
SCM
 
	gscm_a·î_gc_hook
;

302 
SCM_API
 
scm_t_c_hook
 
	gscm_bef‹e_gc_c_hook
;

303 
SCM_API
 
scm_t_c_hook
 
	gscm_bef‹e_m¨k_c_hook
;

304 
SCM_API
 
scm_t_c_hook
 
	gscm_bef‹e_swìp_c_hook
;

305 
SCM_API
 
scm_t_c_hook
 
	gscm_a·î_swìp_c_hook
;

306 
SCM_API
 
scm_t_c_hook
 
	gscm_a·î_gc_c_hook
;

308 #i‡
deföed
 (
GUILE_DEBUG
Ë|| deföed (
GUILE_DEBUG_FREELIST
)

309 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

310 
SCM
 
scm_m≠_‰ì_li°
 ();

312 
	#scm_m≠_‰ì_li°
 
dïªˇãd


	)

313 
	#scm_‰ì_li°_Àngth
 
dïªˇãd


	)

317 #i‡(
SCM_ENABLE_DEPRECATED
 =1Ë&& 
deföed
 (
GUILE_DEBUG_FREELIST
)

318 
SCM_API
 
SCM
 
scm_gc_£t_debug_check_‰ìli°_x
 (SCM 
Êag
);

322 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

323 
SCM_API
 
scm_as£π_˚Œ_vÆid
 (
SCM
);

326 
SCM_API
 
SCM
 
scm_£t_debug_˚Œ_ac˚s£s_x
 (SCM 
Êag
);

329 
SCM_API
 
SCM
 
scm_obje˘_addªss
 (SCM 
obj
);

330 
SCM_API
 
SCM
 
scm_gc_°©s
 ();

331 
SCM_API
 
SCM
 
scm_gc_live_obje˘_°©s
 ();

332 
SCM_API
 
SCM
 
scm_gc
 ();

333 
SCM_API
 
scm_gc_f‹_Æloc
 (
scm_t_˚Œ_ty≥_°©i°ics
 *
‰ìli°
);

334 
SCM_API
 
SCM
 
scm_gc_f‹_√w˚Œ
 (
scm_t_˚Œ_ty≥_°©i°ics
 *
ma°î
, SCM *
‰ìli°
);

335 
SCM_API
 
scm_i_gc
 (c⁄° *
wh©
);

336 
SCM_API
 
scm_gc_m¨k
 (
SCM
 
p
);

337 
SCM_API
 
scm_gc_m¨k_dïídícõs
 (
SCM
 
p
);

338 
SCM_API
 
scm_m¨k_loˇti⁄s
 (
SCM_STACKITEM
 
x
[], 
n
);

339 
SCM_API
 
scm_ö_hóp_p
 (
SCM
 
vÆue
);

340 
SCM_API
 
scm_gc_swìp
 ();

342 
SCM_API
 *
scm_mÆloc
 (
size_t
 
size
);

343 
SCM_API
 *
scm_ˇŒoc
 (
size_t
 
size
);

344 
SCM_API
 *
scm_ªÆloc
 (*
mem
, 
size_t
 
size
);

345 
SCM_API
 *
scm_°rdup
 (c⁄° *
°r
);

346 
SCM_API
 *
scm_°∫dup
 (c⁄° *
°r
, 
size_t
 
n
);

347 
SCM_API
 
scm_gc_ªgi°î_cﬁÀ˘abÀ_mem‹y
 (*
mem
, 
size_t
 
size
,

348 c⁄° *
wh©
);

349 
SCM_API
 
scm_gc_uƒegi°î_cﬁÀ˘abÀ_mem‹y
 (*
mem
, 
size_t
 
size
,

350 c⁄° *
wh©
);

351 
SCM_API
 *
scm_gc_ˇŒoc
 (
size_t
 
size
, c⁄° *
wh©
);

352 
SCM_API
 *
scm_gc_mÆloc
 (
size_t
 
size
, c⁄° *
wh©
);

353 
SCM_API
 *
scm_gc_ªÆloc
 (*
mem
, 
size_t
 
ﬁd_size
,

354 
size_t
 
√w_size
, c⁄° *
wh©
);

355 
SCM_API
 
scm_gc_‰ì
 (*
mem
, 
size_t
 
size
, c⁄° *
wh©
);

356 
SCM_API
 *
scm_gc_°rdup
 (c⁄° *
°r
, c⁄° *
wh©
);

357 
SCM_API
 *
scm_gc_°∫dup
 (c⁄° *
°r
, 
size_t
 
n
, c⁄° *
wh©
);

359 
SCM_API
 
scm_ªmembî_u±o_hîe_1
 (
SCM
 
obj
);

360 
SCM_API
 
scm_ªmembî_u±o_hîe_2
 (
SCM
 
obj1
, SCM 
obj2
);

361 
SCM_API
 
scm_ªmembî_u±o_hîe
 (
SCM
 
obj1
, ...);

375 #ifde‡
__GNUC__


376 
	#scm_ªmembî_u±o_hîe_1
(
x
) \

378 
__asm__
 
	`__vﬁ©ûe__
 ("" : : "g" (
x
)); \

379 } 0)

	)

380 
	#scm_ªmembî_u±o_hîe_2
(
x
, 
y
) \

382 
	`scm_ªmembî_u±o_hîe_1
 (
x
); \

383 
	`scm_ªmembî_u±o_hîe_1
 (
y
); \

384 } 0)

	)

387 
SCM_API
 
SCM
 
scm_ªtu∫_fú°
 (SCM 
ñt
, ...);

388 
SCM_API
 
scm_ªtu∫_fú°_öt
 (
x
, ...);

389 
SCM_API
 
SCM
 
scm_≥rm™ít_obje˘
 (SCM 
obj
);

390 
SCM_API
 
SCM
 
scm_gc_¥Ÿe˘_obje˘
 (SCM 
obj
);

391 
SCM_API
 
SCM
 
scm_gc_u≈rŸe˘_obje˘
 (SCM 
obj
);

392 
SCM_API
 
scm_gc_ªgi°î_roŸ
 (
SCM
 *
p
);

393 
SCM_API
 
scm_gc_uƒegi°î_roŸ
 (
SCM
 *
p
);

394 
SCM_API
 
scm_gc_ªgi°î_roŸs
 (
SCM
 *
b
, 
n
);

395 
SCM_API
 
scm_gc_uƒegi°î_roŸs
 (
SCM
 *
b
, 
n
);

396 
SCM_API
 
scm_°‹age_¥ehi°‹y
 ();

397 
SCM_API
 
scm_öô_°‹age
 ();

398 
SCM_API
 *
scm_gë_°ack_ba£
 ();

399 
SCM_API
 
scm_öô_gc
 ();

401 #i‡
SCM_ENABLE_DEPRECATED
 == 1

403 
SCM_API
 
SCM
 
scm_dïªˇãd_√w˚Œ
 ();

404 
SCM_API
 
SCM
 
scm_dïªˇãd_√w˚Œ2
 ();

406 
	#SCM_NEWCELL
(
_öto
) \

407 dÿ{ 
_öto
 = 
	`scm_dïªˇãd_√w˚Œ
 (); } 0)

	)

408 
	#SCM_NEWCELL2
(
_öto
) \

409 dÿ{ 
_öto
 = 
	`scm_dïªˇãd_√w˚Œ2
 (); } 0)

	)

411 
SCM_API
 * 
scm_mu°_mÆloc
 (
size_t
 
Àn
, c⁄° *
wh©
);

412 
SCM_API
 * 
scm_mu°_ªÆloc
 (*
whîe
,

413 
size_t
 
ﬁí
, size_à
Àn
,

414 c⁄° *
wh©
);

415 
SCM_API
 *
scm_mu°_°rdup
 (c⁄° *
°r
);

416 
SCM_API
 *
scm_mu°_°∫dup
 (c⁄° *
°r
, 
size_t
 
n
);

417 
SCM_API
 
scm_d⁄e_mÆloc
 (
size
);

418 
SCM_API
 
scm_d⁄e_‰ì
 (
size
);

419 
SCM_API
 
scm_mu°_‰ì
 (*
obj
);

	@/usr/include/libguile/gdbint.h

3 #i‚de‡
SCM_GDBINT_H


4 
	#SCM_GDBINT_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
	gscm_¥öt_ˇªfuŒy_p
;

31 
SCM_API
 
scm_öô_gdböt
 ();

	@/usr/include/libguile/goops.h

3 #i‚de‡
SCM_GOOPS_H


4 
	#SCM_GOOPS_H


	)

32 
	~"libguûe/__scm.h
"

34 
	~"libguûe/vÆid©e.h
"

40 
	#SCM_CLASS_CLASS_LAYOUT
 "¥§pwp››wurururururururuΩwpwpwpwpwpwpwpwpwpwpwpw"

	)

42 
	#scm_si_œyout
 0

	)

43 
	#scm_si_vèbÀ
 1

	)

44 
	#scm_si_¥öt
 2

	)

45 
	#scm_si_¥oc
 3

	)

46 
	#scm_si_£âî
 4

	)

48 
	#scm_si_go›s_fõlds
 5

	)

54 
	#scm_si_«me
 14

	)

55 
	#scm_si_dúe˘_su≥rs
 15

	)

56 
	#scm_si_dúe˘_¶Ÿs
 16

	)

57 
	#scm_si_dúe˘_sub˛as£s
 17

	)

58 
	#scm_si_dúe˘_mëhods
 18

	)

59 
	#scm_si_˝l
 19

	)

60 
	#scm_si_¶Ÿdef_˛ass
 20

	)

61 
	#scm_si_¶Ÿs
 21

	)

62 
	#scm_si_«me_ac˚ss
 22

	)

63 
	#scm_si_keyw‹d_ac˚ss
 23

	)

64 
	#scm_si_nfõlds
 24

	)

65 
	#scm_si_ívú⁄mít
 25

	)

66 
	#SCM_N_CLASS_SLOTS
 26

	)

68 
	sscm_t_mëhod
 {

69 
SCM
 
	mgíîic_fun˘i⁄
;

70 
SCM
 
	m•ecülizîs
;

71 
SCM
 
	m¥o˚duª
;

72 } 
	tscm_t_mëhod
;

74 
	#SCM_METHOD
(
obj
Ë((
scm_t_mëhod
 *Ë
	`SCM_STRUCT_DATA
 (obj))

	)

76 
	#SCM_CLASSF_SIMPLE_METHOD
 (0x004 << 20)

	)

77 
	#SCM_CLASSF_ACCESSOR_METHOD
 (0x008 << 20)

	)

82 
	#SCM_CLASSF_FOREIGN
 (0x020 << 20)

	)

83 
	#SCM_CLASSF_METACLASS
 (0x040 << 20)

	)

88 
	#SCM_CLASSF_GOOPS_OR_VALID
 (
SCM_CLASSF_GOOPS
 | 
SCM_CLASSF_GOOPS_VALID
)

	)

90 
	#SCM_CLASSF_INHERIT
 (~(
SCM_CLASSF_PURE_GENERIC
 \

91 | 
SCM_CLASSF_SIMPLE_METHOD
 \

92 | 
SCM_CLASSF_ACCESSOR_METHOD
 \

93 | 
SCM_STRUCTF_LIGHT
) \

94 & 
SCM_CLASSF_MASK
)

	)

96 
	#SCM_INST
(
x
Ë
	`SCM_STRUCT_DATA
 (x)

	)

99 
	#SCM_CLASS_OF
(
x
Ë
	`SCM_STRUCT_VTABLE
 (x)

	)

100 
	#SCM_ACCESSORS_OF
(
x
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_VTABLE_DATA
 (x)[
scm_si_gëãrs_n_£âîs
]))

	)

102 
	#SCM_CLASSP
(
x
) \

103 (
	`SCM_STRUCTP
 (
x
Ë&& 
	`SCM_STRUCT_VTABLE_FLAGS
 (xË& 
SCM_CLASSF_METACLASS
)

	)

104 
	#SCM_VALIDATE_CLASS
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
CLASSP
, "˛ass")

	)

106 
	#SCM_INSTANCEP
(
x
) \

107 (
	`SCM_STRUCTP
 (
x
Ë&& (
	`SCM_STRUCT_VTABLE_FLAGS
 (xË& 
SCM_CLASSF_GOOPS
))

	)

108 
	#SCM_VALIDATE_INSTANCE
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
INSTANCEP
, "ö°™˚")

	)

110 
	#SCM_PUREGENERICP
(
x
) \

111 (
	`SCM_STRUCTP
 (
x
Ë&& (
	`SCM_STRUCT_VTABLE_FLAGS
 (xË& 
SCM_CLASSF_PURE_GENERIC
))

	)

112 
	#SCM_VALIDATE_PUREGENERIC
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
PUREGENERICP
, "puª gíîi¯fun˘i⁄")

	)

114 
	#SCM_ACCESSORP
(
x
) \

115 (
	`SCM_STRUCTP
 (
x
Ë&& (
	`SCM_STRUCT_VTABLE_FLAGS
 (xË& 
SCM_CLASSF_ACCESSOR_METHOD
))

	)

116 
	#SCM_VALIDATE_ACCESSOR
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
ACCESSORP
, "ac˚ss‹")

	)

118 
	#SCM_SLOT
(
x
, 
i
Ë(
	`SCM_PACK
 (
	`SCM_INST
 (xË[i]))

	)

119 
	#SCM_SET_SLOT
(
x
, 
i
, 
v
Ë(
	`SCM_INST
 (xË[i] = 
	`SCM_UNPACK
 (v))

	)

120 
	#SCM_INSTANCE_HASH
(
c
, 
i
Ë(
	`SCM_INST
 (cË[
scm_si_hash£ts
 + (i)])

	)

121 
	#SCM_SET_HASHSET
(
c
, 
i
, 
h
Ë(
	`SCM_INST
 (cË[
scm_si_hash£ts
 + (i)] = (h))

	)

123 
	#SCM_SUBCLASSP
(
c1
, 
c2
Ë(
	`scm_is_åue
 (
	`scm_c_memq
 (c2, 
	`SCM_SLOT
 (c1, 
scm_si_˝l
))))

	)

124 
	#SCM_IS_A_P
(
x
, 
c
) \

125 (
	`SCM_INSTANCEP
 (
x
Ë&& 
	`SCM_SUBCLASSP
 (
	`SCM_CLASS_OF
 (x), 
c
))

	)

127 
	#SCM_GENERICP
(
x
) \

128 (
	`SCM_INSTANCEP
 (
x
Ë&& 
	`SCM_SUBCLASSP
 (
	`SCM_CLASS_OF
 (x), 
scm_˛ass_gíîic
))

	)

129 
	#SCM_VALIDATE_GENERIC
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
GENERICP
, "gíîi¯fun˘i⁄")

	)

131 
	#SCM_METHODP
(
x
) \

132 (
	`SCM_INSTANCEP
 (
x
Ë&& 
	`SCM_SUBCLASSP
 (
	`SCM_CLASS_OF
 (x), 
scm_˛ass_mëhod
))

	)

133 
	#SCM_VALIDATE_METHOD
(
pos
, 
x
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, x, 
METHODP
, "mëhod")

	)

135 
	#SCM_MCACHE_N_SPECIALIZED
(
C
Ë
	`SCM_CADDR
 (C)

	)

136 
	#SCM_SET_MCACHE_N_SPECIALIZED
(
C
, 
X
Ë
	`SCM_SETCAR
 (
	`SCM_CDDR
 (C), X)

	)

138 
	#SCM_INITIAL_MCACHE_SIZE
 1

	)

140 
	#scm_si_gëãrs_n_£âîs
 
scm_si_«me_ac˚ss


	)

142 
	#scm_si_c⁄°ru˘‹
 
SCM_N_CLASS_SLOTS


	)

143 
	#scm_si_de°ru˘‹
 
SCM_N_CLASS_SLOTS
 + 1

	)

145 
	#scm_si_mëhods
 0

	)

146 
	#scm_si_n_•ecülized
 1

	)

147 
	#scm_si_u£d_by
 2

	)

148 
	#scm_si_ˇche_muãx
 3

	)

150 
	#scm_si_gíîic_fun˘i⁄
 0

	)

151 
	#scm_si_•ecülizîs
 1

	)

153 
	#scm_si_¥o˚duª
 2

	)

154 
	#scm_si_code_èbÀ
 3

	)

157 
SCM_API
 
SCM
 
	gscm_˛ass_boﬁón
;

158 
SCM_API
 
SCM
 
	gscm_˛ass_ch¨
;

159 
SCM_API
 
SCM
 
	gscm_˛ass_∑ú
;

160 
SCM_API
 
SCM
 
	gscm_˛ass_¥o˚duª
;

161 
SCM_API
 
SCM
 
	gscm_˛ass_°rög
;

162 
SCM_API
 
SCM
 
	gscm_˛ass_symbﬁ
;

163 
SCM_API
 
SCM
 
	gscm_˛ass_¥o˚duª_wôh_£âî
;

164 
SCM_API
 
SCM
 
	gscm_˛ass_¥imôive_gíîic
;

165 
SCM_API
 
SCM
 
	gscm_˛ass_ve˘‹
, 
	gscm_˛ass_nuŒ
;

166 
SCM_API
 
SCM
 
	gscm_˛ass_ªÆ
;

167 
SCM_API
 
SCM
 
	gscm_˛ass_com∂ex
;

168 
SCM_API
 
SCM
 
	gscm_˛ass_öãgî
;

169 
SCM_API
 
SCM
 
	gscm_˛ass_‰a˘i⁄
;

170 
SCM_API
 
SCM
 
	gscm_˛ass_unknown
;

171 
SCM_API
 
SCM
 *
	gscm_p‹t_˛ass
;

172 
SCM_API
 
SCM
 *
	gscm_smob_˛ass
;

173 
SCM_API
 
SCM
 
	gscm_˛ass_t›
;

174 
SCM_API
 
SCM
 
	gscm_˛ass_obje˘
;

175 
SCM_API
 
SCM
 
	gscm_˛ass_˛ass
;

176 
SCM_API
 
SCM
 
	gscm_˛ass_≠∂iˇbÀ
;

177 
SCM_API
 
SCM
 
	gscm_˛ass_ítôy
;

178 
SCM_API
 
SCM
 
	gscm_˛ass_ítôy_wôh_£âî
;

179 
SCM_API
 
SCM
 
	gscm_˛ass_gíîic
;

180 
SCM_API
 
SCM
 
	gscm_˛ass_gíîic_wôh_£âî
;

181 
SCM_API
 
SCM
 
	gscm_˛ass_ac˚ss‹
;

182 
SCM_API
 
SCM
 
	gscm_˛ass_exãnded_gíîic
;

183 
SCM_API
 
SCM
 
	gscm_˛ass_exãnded_gíîic_wôh_£âî
;

184 
SCM_API
 
SCM
 
	gscm_˛ass_exãnded_ac˚ss‹
;

185 
SCM_API
 
SCM
 
	gscm_˛ass_mëhod
;

186 
SCM_API
 
SCM
 
	gscm_˛ass_sim∂e_mëhod
;

187 
SCM_API
 
SCM
 
	gscm_˛ass_ac˚ss‹_mëhod
;

188 
SCM_API
 
SCM
 
	gscm_˛ass_¥o˚duª_˛ass
;

189 
SCM_API
 
SCM
 
	gscm_˛ass_›î©‹_˛ass
;

190 
SCM_API
 
SCM
 
	gscm_˛ass_›î©‹_wôh_£âî_˛ass
;

191 
SCM_API
 
SCM
 
	gscm_˛ass_ítôy_˛ass
;

192 
SCM_API
 
SCM
 
	gscm_˛ass_numbî
;

193 
SCM_API
 
SCM
 
	gscm_˛ass_li°
;

194 
SCM_API
 
SCM
 
	gscm_˛ass_keyw‹d
;

195 
SCM_API
 
SCM
 
	gscm_˛ass_p‹t
;

196 
SCM_API
 
SCM
 
	gscm_˛ass_öput_ouçut_p‹t
;

197 
SCM_API
 
SCM
 
	gscm_˛ass_öput_p‹t
;

198 
SCM_API
 
SCM
 
	gscm_˛ass_ouçut_p‹t
;

199 
SCM_API
 
SCM
 
	gscm_˛ass_f‹eign_˛ass
;

200 
SCM_API
 
SCM
 
	gscm_˛ass_f‹eign_obje˘
;

201 
SCM_API
 
SCM
 
	gscm_˛ass_f‹eign_¶Ÿ
;

202 
SCM_API
 
SCM
 
	gscm_˛ass_£lf
;

203 
SCM_API
 
SCM
 
	gscm_˛ass_¥Ÿe˘ed
;

204 
SCM_API
 
SCM
 
	gscm_˛ass_›aque
;

205 
SCM_API
 
SCM
 
	gscm_˛ass_ªad_⁄ly
;

206 
SCM_API
 
SCM
 
	gscm_˛ass_¥Ÿe˘ed_›aque
;

207 
SCM_API
 
SCM
 
	gscm_˛ass_¥Ÿe˘ed_ªad_⁄ly
;

208 
SCM_API
 
SCM
 
	gscm_˛ass_scm
;

209 
SCM_API
 
SCM
 
	gscm_˛ass_öt
;

210 
SCM_API
 
SCM
 
	gscm_˛ass_Êﬂt
;

211 
SCM_API
 
SCM
 
	gscm_˛ass_doubÀ
;

212 
SCM_API
 c⁄° *
	gscm_s_¶Ÿ_£t_x
;

214 
SCM_API
 
SCM
 
	gscm_no_≠∂iˇbÀ_mëhod
;

216 
SCM_API
 
SCM
 
	gscm_moduÀ_go›s
;

218 
SCM_API
 
SCM
 
scm_go›s_vîsi⁄
 ();

219 
SCM_API
 
SCM
 
scm_ﬁdfmt
 (SCM);

220 
SCM_API
 *
scm_c_ﬁdfmt0
 (*);

221 
SCM_API
 *
scm_c_ﬁdfmt
 (*, 
n
);

222 
SCM_API
 
scm_lﬂd_go›s
 ();

223 
SCM_API
 
SCM
 
scm_make_f‹eign_obje˘
 (SCM 
˛s
, SCM 
öô¨gs
);

224 
SCM_API
 
SCM
 
scm_make_˛ass
 (SCM 
mëa
, *
s_«me
, SCM 
su≥rs
, 
size_t
 
size
,

225 * (*
c⁄°ru˘‹
Ë(
SCM
 
öô¨gs
),

226 
	$size_t
 (*
de°ru˘‹
) (*));

227 
SCM_API
 
	`scm_add_¶Ÿ
 (
SCM
 
c
, *
¶Ÿ
, SCM 
¶Ÿ_˛ass
,

228 
	$SCM
 (*
gëãr
Ë(
SCM
 
obj
),

229 
	$SCM
 (*
£âî
Ë(
SCM
 
obj
, SCM 
x
),

230 *
ac˚ss‹_«me
);

231 
SCM_API
 
SCM
 
	`scm_wøp_obje˘
 (SCM 
c
, *);

232 
SCM_API
 
SCM
 
	`scm_wøp_comp⁄ít
 (SCM 
c
, SCM 
obj
, *);

233 
SCM_API
 
SCM
 
	`scm_ísuª_ac˚ss‹
 (SCM 
«me
);

234 
SCM_API
 
	`scm_add_mëhod
 (
SCM
 
gf
, SCM 
m
);

235 
SCM_API
 
SCM
 
	`scm_˛ass_of
 (SCM 
obj
);

238 
SCM_API
 
SCM
 
	`scm_make_√xt_mëhod
 (SCM 
mëhods
, SCM 
¨gs
, SCM 
gf
);

239 
SCM_API
 
SCM
 
	`scm_basic_basic_make_˛ass
 (SCM 
c
, SCM 
«me
, SCM 
dsu≥rs
, SCM 
d¶Ÿs
);

240 
SCM_API
 
SCM
 
	`scm_basic_make_˛ass
 (SCM 
c
, SCM 
«me
, SCM 
dsu≥rs
, SCM 
d¶Ÿs
);

243 
SCM_API
 
SCM
 
	`scm_sys_Æloˇã_ö°™˚
 (SCM 
c
, SCM 
öô¨gs
);

244 
SCM_API
 
SCM
 
	`scm_sys_£t_obje˘_£âî_x
 (SCM 
obj
, SCM 
£âî
);

245 
SCM_API
 
SCM
 
	`scm_¶Ÿ_ªf
 (SCM 
obj
, SCM 
¶Ÿ_«me
);

246 
SCM_API
 
SCM
 
	`scm_¶Ÿ_£t_x
 (SCM 
obj
, SCM 
¶Ÿ_«me
, SCM 
vÆue
);

248 
SCM_API
 
SCM
 
	`scm_compuã_≠∂iˇbÀ_mëhods
 (SCM 
gf
, SCM 
¨gs
, 
Àn
, 
scm_föd_mëhod
);

249 
SCM_API
 
SCM
 
	`scm_sys_compuã_≠∂iˇbÀ_mëhods
 (SCM 
gf
, SCM 
¨gs
);

250 #ifde‡
GUILE_DEBUG


251 
SCM_API
 
SCM
 
	`scm_puª_gíîic_p
 (SCM 
obj
);

254 
SCM_API
 
SCM
 
	`scm_sys_compuã_¶Ÿs
 (SCM 
c
);

255 
SCM_API
 
SCM
 
	`scm_i_gë_keyw‹d
 (SCM 
key
, SCM 
l
, 
Àn
, SCM 
deÁu…_vÆue
, c⁄° *
subr
);

256 
SCM_API
 
SCM
 
	`scm_gë_keyw‹d
 (SCM 
key
, SCM 
l
, SCM 
deÁu…_vÆue
);

257 
SCM_API
 
SCM
 
	`scm_sys_öôülize_obje˘
 (SCM 
obj
, SCM 
öô¨gs
);

258 
SCM_API
 
SCM
 
	`scm_sys_¥ï_œyout_x
 (SCM 
c
);

259 
SCM_API
 
SCM
 
	`scm_sys_öhîô_magic_x
 (SCM 
c
, SCM 
dsu≥rs
);

260 
SCM_API
 
SCM
 
	`scm_ö°™˚_p
 (SCM 
obj
);

261 
SCM_API
 
SCM
 
	`scm_˛ass_«me
 (SCM 
obj
);

262 
SCM_API
 
SCM
 
	`scm_˛ass_dúe˘_su≥rs
 (SCM 
obj
);

263 
SCM_API
 
SCM
 
	`scm_˛ass_dúe˘_¶Ÿs
 (SCM 
obj
);

264 
SCM_API
 
SCM
 
	`scm_˛ass_dúe˘_sub˛as£s
 (SCM 
obj
);

265 
SCM_API
 
SCM
 
	`scm_˛ass_dúe˘_mëhods
 (SCM 
obj
);

266 
SCM_API
 
SCM
 
	`scm_˛ass_¥e˚dí˚_li°
 (SCM 
obj
);

267 
SCM_API
 
SCM
 
	`scm_˛ass_¶Ÿs
 (SCM 
obj
);

268 
SCM_API
 
SCM
 
	`scm_˛ass_ívú⁄mít
 (SCM 
obj
);

269 
SCM_API
 
SCM
 
	`scm_gíîic_fun˘i⁄_«me
 (SCM 
obj
);

270 
SCM_API
 
SCM
 
	`scm_gíîic_fun˘i⁄_mëhods
 (SCM 
obj
);

271 
SCM_API
 
SCM
 
	`scm_mëhod_gíîic_fun˘i⁄
 (SCM 
obj
);

272 
SCM_API
 
SCM
 
	`scm_mëhod_•ecülizîs
 (SCM 
obj
);

273 
SCM_API
 
SCM
 
	`scm_mëhod_¥o˚duª
 (SCM 
obj
);

274 
SCM_API
 
SCM
 
	`scm_ac˚ss‹_mëhod_¶Ÿ_deföôi⁄
 (SCM 
obj
);

275 
SCM_API
 
SCM
 
	`scm_sys_èg_body
 (SCM 
body
);

276 
SCM_API
 
SCM
 
	`scm_sys_Á°_¶Ÿ_ªf
 (SCM 
obj
, SCM 
ödex
);

277 
SCM_API
 
SCM
 
	`scm_sys_Á°_¶Ÿ_£t_x
 (SCM 
obj
, SCM 
ödex
, SCM 
vÆue
);

278 
SCM_API
 
SCM
 
	`scm_¶Ÿ_ªf_usög_˛ass
 (SCM 
˛s
, SCM 
obj
, SCM 
¶Ÿ_«me
);

279 
SCM_API
 
SCM
 
	`scm_¶Ÿ_£t_usög_˛ass_x
 (SCM 
˛s
, SCM 
obj
, SCM 
¶Ÿ_«me
, SCM 
vÆue
);

280 
SCM_API
 
SCM
 
	`scm_¶Ÿ_bound_usög_˛ass_p
 (SCM 
˛s
, SCM 
obj
, SCM 
¶Ÿ_«me
);

281 
SCM_API
 
SCM
 
	`scm_¶Ÿ_exi°s_usög_˛ass_p
 (SCM 
˛s
, SCM 
obj
, SCM 
¶Ÿ_«me
);

282 
SCM_API
 
SCM
 
	`scm_¶Ÿ_bound_p
 (SCM 
obj
, SCM 
¶Ÿ_«me
);

283 
SCM_API
 
SCM
 
	`scm_¶Ÿ_exi°s_p
 (SCM 
obj
, SCM 
¶Ÿ_«me
);

284 
SCM_API
 
SCM
 
	`scm_sys_modify_ö°™˚
 (SCM 
ﬁd
, SCM 
√wö°
);

285 
SCM_API
 
SCM
 
	`scm_sys_modify_˛ass
 (SCM 
ﬁd
, SCM 
√w˛s
);

286 
SCM_API
 
SCM
 
	`scm_sys_övÆid©e_˛ass
 (SCM 
˛s
);

287 
SCM_API
 
SCM
 
	`scm_make_mëhod_ˇche
 (SCM 
gf
);

288 
SCM_API
 
SCM
 
	`scm_sys_övÆid©e_mëhod_ˇche_x
 (SCM 
gf
);

289 
SCM_API
 
SCM
 
	`scm_gíîic_ˇ∑bûôy_p
 (SCM 
¥oc
);

290 
SCM_API
 
SCM
 
	`scm_íabÀ_¥imôive_gíîic_x
 (SCM 
subrs
);

291 
SCM_API
 
SCM
 
	`scm_¥imôive_gíîic_gíîic
 (SCM 
subr
);

292 
SCM_API
 
	`scm_c_exãnd_¥imôive_gíîic
 (
SCM
 
subr
, SCM 
exãnsi⁄
);

293 
SCM_API
 
SCM
 
	`°klos_vîsi⁄
 ();

294 
SCM_API
 
SCM
 
	`scm_make
 (SCM 
¨gs
);

295 
SCM_API
 
SCM
 
	`scm_föd_mëhod
 (SCM 
¨gs
);

296 
SCM_API
 
SCM
 
	`scm_sys_mëhod_m‹e_•ecific_p
 (SCM 
m1
, SCM 
m2
, SCM 
èrgs
);

298 
SCM_API
 
SCM
 
	`scm_öô_go›s_buûtös
 ();

299 
SCM_API
 
	`scm_öô_go›s
 ();

301 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

303 
	#SCM_INST_TYPE
(
x
Ë
	`SCM_OBJ_CLASS_FLAGS
 (x)

	)

304 
	#SCM_SIMPLEMETHODP
(
x
) \

305 (
	`SCM_STRUCTP
 (
x
Ë&& (
	`SCM_STRUCT_VTABLE_FLAGS
 (xË& 
SCM_CLASSF_SIMPLE_METHOD
))

	)

306 
	#SCM_FASTMETHODP
(
x
) \

307 (
	`SCM_STRUCTP
 (
x
Ë&& (
	`SCM_STRUCT_VTABLE_FLAGS
 (x) \

308 & (
SCM_CLASSF_ACCESSOR_METHOD
 \

309 | 
SCM_CLASSF_SIMPLE_METHOD
)))

	)

	@/usr/include/libguile/gsubr.h

3 #i‚de‡
SCM_GSUBR_H


4 
	#SCM_GSUBR_H


	)

25 
	~"libguûe/__scm.h
"

29 
	#SCM_GSUBR_MAKTYPE
(
ªq
, 
›t
, 
r°
Ë(‘eq)|((›t)<<4)|(‘°)<<8))

	)

30 
	#SCM_GSUBR_REQ
(
x
Ë(()(x)&0xf)

	)

31 
	#SCM_GSUBR_OPT
(
x
Ë((()(x)&0xf0)>>4)

	)

32 
	#SCM_GSUBR_REST
(
x
Ë(()(x)>>8)

	)

34 
	#SCM_GSUBR_MAX
 10

	)

35 
	#SCM_GSUBR_TYPE
(
c˛o
Ë(
	`SCM_CCLO_REF
 ((c˛o), 1))

	)

36 
	#SCM_SET_GSUBR_TYPE
(
c˛o
, 
ty≥
Ë(
	`SCM_CCLO_SET
 ((c˛o), 1, (ty≥)))

	)

37 
	#SCM_GSUBR_PROC
(
c˛o
Ë(
	`SCM_CCLO_REF
 ((c˛o), 2))

	)

38 
	#SCM_SET_GSUBR_PROC
(
c˛o
, 
¥oc
Ë(
	`SCM_CCLO_SET
 ((c˛o), 2, (¥oc)))

	)

40 
SCM_API
 
SCM
 
	gscm_f_gsubr_≠∂y
;

42 
SCM_API
 
SCM
 
scm_c_make_gsubr
 (c⁄° *
«me
,

43 
ªq
, 
›t
, 
r°
, 
SCM
 (*
f˙
) ());

44 
SCM_API
 
SCM
 
scm_c_make_gsubr_wôh_gíîic
 (c⁄° *
«me
,

45 
ªq
, 
›t
, 
r°
,

46 
SCM
 (*
f˙
Ë(), SCM *
gf
);

47 
SCM_API
 
SCM
 
scm_c_deföe_gsubr
 (c⁄° *
«me
,

48 
ªq
, 
›t
, 
r°
, 
SCM
 (*
f˙
) ());

49 
SCM_API
 
SCM
 
scm_c_deföe_gsubr_wôh_gíîic
 (c⁄° *
«me
,

50 
ªq
, 
›t
, 
r°
,

51 
SCM
 (*
f˙
Ë(), SCM *
gf
);

53 
SCM_API
 
SCM
 
scm_gsubr_≠∂y
 (SCM 
¨gs
);

54 
SCM_API
 
scm_öô_gsubr
 ();

	@/usr/include/libguile/guardians.h

3 #i‚de‡
SCM_GUARDIANS_H


4 
	#SCM_GUARDIANS_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
scm_make_gu¨dün
 ();

29 
SCM_API
 
scm_i_öô_gu¨düns_f‹_gc
 ();

30 
SCM_API
 
scm_i_idítify_öac˚ssibÀ_gu¨deds
 ();

31 
SCM_API
 
scm_i_m¨k_öac˚ssibÀ_gu¨deds
 ();

33 
SCM_API
 
scm_öô_gu¨düns
 ();

	@/usr/include/libguile/hash.h

3 #i‚de‡
SCM_HASH_H


4 
	#SCM_HASH_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
scm_°rög_hash
 (c⁄° *
°r
, 
size_t
 
Àn
);

30 
SCM_API
 
scm_hashî
 (
SCM
 
obj
, 
n
, 
size_t
 
d
);

31 
SCM_API
 
scm_ihashq
 (
SCM
 
obj
, 
n
);

32 
SCM_API
 
SCM
 
scm_hashq
 (SCM 
obj
, SCM 
n
);

33 
SCM_API
 
scm_ihashv
 (
SCM
 
obj
, 
n
);

34 
SCM_API
 
SCM
 
scm_hashv
 (SCM 
obj
, SCM 
n
);

35 
SCM_API
 
scm_ihash
 (
SCM
 
obj
, 
n
);

36 
SCM_API
 
SCM
 
scm_hash
 (SCM 
obj
, SCM 
n
);

37 
SCM_API
 
scm_öô_hash
 ();

	@/usr/include/libguile/hashtab.h

3 #i‚de‡
SCM_HASHTAB_H


4 
	#SCM_HASHTAB_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"wóks.h
"

31 
	#SCM_HASHTABLEF_WEAK_CAR
 
SCM_WVECTF_WEAK_KEY


	)

32 
	#SCM_HASHTABLEF_WEAK_CDR
 
SCM_WVECTF_WEAK_VALUE


	)

34 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_hashèbÀ
;

36 
	#SCM_HASHTABLE_P
(
x
Ë
	`SCM_SMOB_PREDICATE
 (
scm_tc16_hashèbÀ
, x)

	)

37 
	#SCM_VALIDATE_HASHTABLE
(
pos
, 
¨g
) \

38 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
¨g
, 
HASHTABLE_P
, "hash-èbÀ")

	)

39 
	#SCM_HASHTABLE_VECTOR
(
h
Ë
	`SCM_SMOB_OBJECT
 (h)

	)

40 
	#SCM_SET_HASHTABLE_VECTOR
(
x
, 
v
Ë
	`SCM_SET_SMOB_OBJECT
 ((x), (v))

	)

41 
	#SCM_HASHTABLE
(
x
Ë((
scm_t_hashèbÀ
 *Ë
	`SCM_SMOB_DATA_2
 (x))

	)

42 
	#SCM_HASHTABLE_NEXT
(
x
Ë
	`SCM_SMOB_OBJECT_3
 (x)

	)

43 
	#SCM_HASHTABLE_NEXTLOC
(
x
Ë
	`SCM_SMOB_OBJECT_3_LOC
 (x)

	)

44 
	#SCM_SET_HASHTABLE_NEXT
(
x
, 
n
Ë
	`SCM_SET_SMOB_OBJECT_3
 ((x), (n))

	)

45 
	#SCM_HASHTABLE_FLAGS
(
x
Ë(
	`SCM_HASHTABLE
 (x)->
Êags
)

	)

46 
	#SCM_HASHTABLE_WEAK_KEY_P
(
x
) \

47 (
	`SCM_HASHTABLE_FLAGS
 (
x
Ë& 
SCM_HASHTABLEF_WEAK_CAR
)

	)

48 
	#SCM_HASHTABLE_WEAK_VALUE_P
(
x
) \

49 (
	`SCM_HASHTABLE_FLAGS
 (
x
Ë& 
SCM_HASHTABLEF_WEAK_CDR
)

	)

50 
	#SCM_HASHTABLE_DOUBLY_WEAK_P
(
x
) \

51 ((
	`SCM_HASHTABLE_FLAGS
 (
x
) \

52 & (
SCM_HASHTABLEF_WEAK_CAR
 | 
SCM_HASHTABLEF_WEAK_CDR
)) \

53 =(
SCM_HASHTABLEF_WEAK_CAR
 | 
SCM_HASHTABLEF_WEAK_CDR
))

	)

54 
	#SCM_HASHTABLE_WEAK_P
(
x
Ë
	`SCM_HASHTABLE_FLAGS
 (x)

	)

55 
	#SCM_HASHTABLE_N_ITEMS
(
x
Ë(
	`SCM_HASHTABLE
 (x)->
n_ôems
)

	)

56 
	#SCM_SET_HASHTABLE_N_ITEMS
(
x
, 
n
Ë(
	`SCM_HASHTABLE
 (x)->
n_ôems
 =Ç)

	)

57 
	#SCM_HASHTABLE_INCREMENT
(
x
Ë(
	`SCM_HASHTABLE_N_ITEMS
(x)++)

	)

58 
	#SCM_HASHTABLE_DECREMENT
(
x
Ë(
	`SCM_HASHTABLE_N_ITEMS
(x)--)

	)

59 
	#SCM_HASHTABLE_UPPER
(
x
Ë(
	`SCM_HASHTABLE
 (x)->
uµî
)

	)

60 
	#SCM_HASHTABLE_LOWER
(
x
Ë(
	`SCM_HASHTABLE
 (x)->
lowî
)

	)

62 
	#SCM_HASHTABLE_N_BUCKETS
(
h
) \

63 
	`SCM_SIMPLE_VECTOR_LENGTH
 (
	`SCM_HASHTABLE_VECTOR
 (
h
))

	)

64 
	#SCM_HASHTABLE_BUCKET
(
h
, 
i
) \

65 
	`SCM_SIMPLE_VECTOR_REF
 (
	`SCM_HASHTABLE_VECTOR
 (
h
), 
i
)

	)

66 
	#SCM_SET_HASHTABLE_BUCKET
(
h
, 
i
, 
x
) \

67 
	`SCM_SIMPLE_VECTOR_SET
 (
	`SCM_HASHTABLE_VECTOR
 (
h
), 
i
, 
x
)

	)

69 
	sscm_t_hashèbÀ
 {

70 
	mÊags
;

71 
	mn_ôems
;

72 
	mlowî
;

73 
	muµî
;

74 
	msize_ödex
;

75 
	mmö_size_ödex
;

76 (*
	mhash_‚
) ();

77 } 
	tscm_t_hashèbÀ
;

82 
	tscm_t_hash_‚
 (
	tSCM
 
	tobj
, 
	td
, *
	t˛osuª
);

83 
SCM
 
	tscm_t_assoc_‚
 (
	tSCM
 
	tkey
, SCM 
	tÆi°
, *
	t˛osuª
);

84 
SCM
 
	tscm_t_dñëe_‚
 (
	tSCM
 
	tñt
, SCM 
	tli°
);

87 
SCM_API
 
SCM
 
scm_ve˘‹_to_hash_èbÀ
 (SCM 
ve˘‹
);

88 
SCM_API
 
SCM
 
scm_c_make_hash_èbÀ
 (
k
);

89 
SCM_API
 
SCM
 
scm_make_hash_èbÀ
 (SCM 
n
);

90 
SCM_API
 
SCM
 
scm_make_wók_key_hash_èbÀ
 (SCM 
k
);

91 
SCM_API
 
SCM
 
scm_make_wók_vÆue_hash_èbÀ
 (SCM 
k
);

92 
SCM_API
 
SCM
 
scm_make_doubly_wók_hash_èbÀ
 (SCM 
k
);

94 
SCM_API
 
SCM
 
scm_hash_èbÀ_p
 (SCM 
h
);

95 
SCM_API
 
SCM
 
scm_wók_key_hash_èbÀ_p
 (SCM 
h
);

96 
SCM_API
 
SCM
 
scm_wók_vÆue_hash_èbÀ_p
 (SCM 
h
);

97 
SCM_API
 
SCM
 
scm_doubly_wók_hash_èbÀ_p
 (SCM 
h
);

99 
SCM_API
 
scm_i_ªhash
 (
SCM
 
èbÀ
, (*
hash_‚
)(), *
˛osuª
, c⁄° *
func_«me
);

100 
SCM_API
 
scm_i_sˇn_wók_hashèbÀs
 ();

102 
SCM_API
 
SCM
 
scm_hash_‚_gë_h™dÀ
 (SCM 
èbÀ
, SCM 
obj
, (*
hash_‚
Ë(), SCM (*
assoc_‚
Ë(), * 
˛osuª
);

103 
SCM_API
 
SCM
 
scm_hash_‚_¸óã_h™dÀ_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
öô
, (*
hash_‚
Ë(), SCM (*
assoc_‚
Ë(), * 
˛osuª
);

104 
SCM_API
 
SCM
 
scm_hash_‚_ªf
 (SCM 
èbÀ
, SCM 
obj
, SCM 
dÊt
, (*
hash_‚
Ë(), SCM (*
assoc_‚
Ë(), * 
˛osuª
);

105 
SCM_API
 
SCM
 
scm_hash_‚_£t_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
vÆ
, (*
hash_‚
Ë(), SCM (*
assoc_‚
Ë(), * 
˛osuª
);

106 
SCM_API
 
SCM
 
scm_hash_‚_ªmove_x
 (SCM 
èbÀ
, SCM 
obj
, (*
hash_‚
Ë(), SCM (*
assoc_‚
Ë(), * 
˛osuª
);

107 
SCM_API
 
SCM
 
scm_öã∫Æ_hash_fﬁd
 (SCM (*
‚
Ë(), *
˛osuª
, SCM 
öô
, SCM 
èbÀ
);

108 
SCM_API
 
scm_öã∫Æ_hash_f‹_óch_h™dÀ
 (
SCM
 (*
‚
Ë(), *
˛osuª
, SCM 
èbÀ
);

109 
SCM_API
 
SCM
 
scm_hash_˛ór_x
 (SCM 
èbÀ
);

111 
SCM_API
 
SCM
 
scm_hashq_gë_h™dÀ
 (SCM 
èbÀ
, SCM 
obj
);

112 
SCM_API
 
SCM
 
scm_hashq_¸óã_h™dÀ_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
öô
);

113 
SCM_API
 
SCM
 
scm_hashq_ªf
 (SCM 
èbÀ
, SCM 
obj
, SCM 
dÊt
);

114 
SCM_API
 
SCM
 
scm_hashq_£t_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
vÆ
);

115 
SCM_API
 
SCM
 
scm_hashq_ªmove_x
 (SCM 
èbÀ
, SCM 
obj
);

116 
SCM_API
 
SCM
 
scm_hashv_gë_h™dÀ
 (SCM 
èbÀ
, SCM 
obj
);

117 
SCM_API
 
SCM
 
scm_hashv_¸óã_h™dÀ_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
öô
);

118 
SCM_API
 
SCM
 
scm_hashv_ªf
 (SCM 
èbÀ
, SCM 
obj
, SCM 
dÊt
);

119 
SCM_API
 
SCM
 
scm_hashv_£t_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
vÆ
);

120 
SCM_API
 
SCM
 
scm_hashv_ªmove_x
 (SCM 
èbÀ
, SCM 
obj
);

121 
SCM_API
 
SCM
 
scm_hash_gë_h™dÀ
 (SCM 
èbÀ
, SCM 
obj
);

122 
SCM_API
 
SCM
 
scm_hash_¸óã_h™dÀ_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
öô
);

123 
SCM_API
 
SCM
 
scm_hash_ªf
 (SCM 
èbÀ
, SCM 
obj
, SCM 
dÊt
);

124 
SCM_API
 
SCM
 
scm_hash_£t_x
 (SCM 
èbÀ
, SCM 
obj
, SCM 
vÆ
);

125 
SCM_API
 
SCM
 
scm_hash_ªmove_x
 (SCM 
èbÀ
, SCM 
obj
);

126 
SCM_API
 
SCM
 
scm_hashx_gë_h™dÀ
 (SCM 
hash
, SCM 
assoc
, SCM 
èbÀ
, SCM 
obj
);

127 
SCM_API
 
SCM
 
scm_hashx_¸óã_h™dÀ_x
 (SCM 
hash
, SCM 
assoc
, SCM 
èbÀ
, SCM 
obj
, SCM 
öô
);

128 
SCM_API
 
SCM
 
scm_hashx_ªf
 (SCM 
hash
, SCM 
assoc
, SCM 
èbÀ
, SCM 
obj
, SCM 
dÊt
);

129 
SCM_API
 
SCM
 
scm_hashx_£t_x
 (SCM 
hash
, SCM 
assoc
, SCM 
èbÀ
, SCM 
obj
, SCM 
vÆ
);

130 
SCM_API
 
SCM
 
scm_hashx_ªmove_x
 (SCM 
hash
, SCM 
assoc
, SCM 
èbÀ
, SCM 
obj
);

131 
SCM_API
 
SCM
 
scm_hash_fﬁd
 (SCM 
¥oc
, SCM 
öô
, SCM 
hash
);

132 
SCM_API
 
SCM
 
scm_hash_f‹_óch
 (SCM 
¥oc
, SCM 
hash
);

133 
SCM_API
 
SCM
 
scm_hash_f‹_óch_h™dÀ
 (SCM 
¥oc
, SCM 
hash
);

134 
SCM_API
 
SCM
 
scm_hash_m≠_to_li°
 (SCM 
¥oc
, SCM 
hash
);

135 
SCM_API
 
scm_hashèb_¥ehi°‹y
 ();

136 
SCM_API
 
scm_öô_hashèb
 ();

	@/usr/include/libguile/init.h

3 #i‚de‡
SCM_INIT_H


4 
	#SCM_INIT_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/thªads.h
"

29 
SCM_API
 
scm_i_±hªad_muãx_t
 
	gscm_i_öô_muãx
;

30 
SCM_API
 
	gscm_öôülized_p
;

32 
SCM_API
 
scm_öô_guûe
 ();

34 
SCM_API
 
scm_boŸ_guûe
 (
¨gc
, **
¨gv
,

35 (*
maö_func
Ë(*
˛osuª
,

36 
¨gc
,

37 **
¨gv
),

38 *
˛osuª
);

40 
SCM_API
 
	`scm_i_öô_guûe
 (
SCM_STACKITEM
 *
ba£
);

42 
SCM_API
 
	`scm_lﬂd_°¨tup_fûes
 ();

	@/usr/include/libguile/inline.h

3 #i‚de‡
SCM_INLINE_H


4 
	#SCM_INLINE_H


	)

28 
	~<°dio.h
>

29 
	~<°rög.h
>

31 
	~"libguûe/__scm.h
"

33 
	~"libguûe/∑ús.h
"

34 
	~"libguûe/gc.h
"

35 
	~"libguûe/thªads.h
"

36 
	~"libguûe/unif.h
"

37 
	~"libguûe/p‹ts.h
"

38 
	~"libguûe/îr‹.h
"

41 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


57 #i‡(
deföed
 
__GNUC__
Ë&& (!(((deföed 
__APPLE_CC__
Ë&& (__APPLE_CC__ > 5400)Ë&& 
__STDC_VERSION__
 >= 199901L))

58 
	#SCM_C_USE_EXTERN_INLINE
 1

	)

59 #i‡(
deföed
 
__GNUC_STDC_INLINE__
Ë|| (
__GNUC__
 =4 && 
__GNUC_MINOR__
 == 2)

60 
	#SCM_C_EXTERN_INLINE
 \

61 
__ölöe__
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

63 
	#SCM_C_EXTERN_INLINE
 
__ölöe__


	)

65 #ñi‡(
deföed
 
SCM_C_INLINE
)

66 
	#SCM_C_EXTERN_INLINE
 
SCM_C_INLINE


	)

72 #i‡(!
deföed
 
SCM_C_INLINE
Ë|| (deföed 
SCM_INLINE_C_INCLUDING_INLINE_H
) \

73 || (
deföed
 
SCM_C_USE_EXTERN_INLINE
)

79 
SCM_API
 
SCM
 
scm_˚Œ
 (
scm_t_bôs
 
ˇr
, scm_t_bô†
cdr
);

80 
SCM_API
 
SCM
 
scm_doubÀ_˚Œ
 (
scm_t_bôs
 
ˇr
, scm_t_bô†
cbr
,

81 
scm_t_bôs
 
c¸
, scm_t_bô†
cdr
);

83 
SCM_API
 
SCM
 
scm_¨øy_h™dÀ_ªf
 (
scm_t_¨øy_h™dÀ
 *
h
, 
ssize_t
 
pos
);

84 
SCM_API
 
scm_¨øy_h™dÀ_£t
 (
scm_t_¨øy_h™dÀ
 *
h
, 
ssize_t
 
pos
, 
SCM
 
vÆ
);

86 
SCM_API
 
scm_is_∑ú
 (
SCM
 
x
);

88 
SCM_API
 
scm_gëc
 (
SCM
 
p‹t
);

89 
SCM_API
 
scm_putc
 (
c
, 
SCM
 
p‹t
);

90 
SCM_API
 
scm_puts
 (c⁄° *
°r_d©a
, 
SCM
 
p‹t
);

95 #i‡
deföed
 
SCM_C_EXTERN_INLINE
 || deföed 
SCM_INLINE_C_INCLUDING_INLINE_H


101 
scm_√w˚Œ2_cou¡
;

102 
scm_√w˚Œ_cou¡
;

105 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


106 
	gSCM_C_EXTERN_INLINE


108 
SCM


109 
	$scm_˚Œ
 (
scm_t_bôs
 
ˇr
, scm_t_bô†
cdr
)

111 
SCM
 
z
;

112 #ifde‡
__MINGW32__


113 
SCM
 *
‰ìli°
 = 
	`SCM_FREELIST_LOC
 (*
scm_i_‰ìli°_±r
);

115 
SCM
 *
‰ìli°
 = 
	`SCM_FREELIST_LOC
 (
scm_i_‰ìli°
);

118 i‡(
	`scm_is_nuŒ
 (*
‰ìli°
))

119 #ifde‡
__MINGW32__


120 
z
 = 
	`scm_gc_f‹_√w˚Œ
 (
scm_i_ma°î_‰ìli°_±r
, 
‰ìli°
);

122 
z
 = 
	`scm_gc_f‹_√w˚Œ
 (&
scm_i_ma°î_‰ìli°
, 
‰ìli°
);

126 
z
 = *
‰ìli°
;

127 *
‰ìli°
 = 
	`SCM_FREE_CELL_CDR
 (*freelist);

135 
scm_˚Œs_Æloˇãd
 += 1;

137 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

138 i‡(
scm_debug_˚Œ_ac˚s£s_p
)

140 i‡(
	`SCM_GC_MARK_P
 (
z
))

142 
	`Ârötf
(
°dîr
, "scm_cellÅriedÅoállocateá marked cell.\n");

143 
	`ab‹t
();

145 i‡(
	`SCM_GC_CELL_WORD
(
z
, 0Ë!
scm_tc_‰ì_˚Œ
)

147 
	`Ârötf
(
°dîr
, "cell from freelist isÇotá free cell.\n");

148 
	`ab‹t
();

156 
	`SCM_SET_GC_MARK
 (
z
);

172 
	`SCM_GC_SET_CELL_WORD
 (
z
, 1, 
cdr
);

173 
	`SCM_GC_SET_CELL_WORD
 (
z
, 0, 
ˇr
);

175 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

176 i‡(
scm_ex≥nsive_debug_˚Œ_ac˚s£s_p
 )

177 
	`scm_i_ex≥nsive_vÆid©i⁄_check
 (
z
);

180  
z
;

181 
	}
}

183 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


184 
	gSCM_C_EXTERN_INLINE


186 
SCM


187 
	$scm_doubÀ_˚Œ
 (
scm_t_bôs
 
ˇr
, scm_t_bô†
cbr
,

188 
scm_t_bôs
 
c¸
, scm_t_bô†
cdr
)

190 
SCM
 
z
;

191 #ifde‡
__MINGW32__


192 
SCM
 *
‰ìli°
 = 
	`SCM_FREELIST_LOC
 (*
scm_i_‰ìli°2_±r
);

194 
SCM
 *
‰ìli°
 = 
	`SCM_FREELIST_LOC
 (
scm_i_‰ìli°2
);

197 i‡(
	`scm_is_nuŒ
 (*
‰ìli°
))

198 #ifde‡
__MINGW32__


199 
z
 = 
	`scm_gc_f‹_√w˚Œ
 (
scm_i_ma°î_‰ìli°2_±r
, 
‰ìli°
);

201 
z
 = 
	`scm_gc_f‹_√w˚Œ
 (&
scm_i_ma°î_‰ìli°2
, 
‰ìli°
);

205 
z
 = *
‰ìli°
;

206 *
‰ìli°
 = 
	`SCM_FREE_CELL_CDR
 (*freelist);

209 
scm_˚Œs_Æloˇãd
 += 2;

216 
	`SCM_GC_SET_CELL_WORD
 (
z
, 1, 
cbr
);

217 
	`SCM_GC_SET_CELL_WORD
 (
z
, 2, 
c¸
);

218 
	`SCM_GC_SET_CELL_WORD
 (
z
, 3, 
cdr
);

219 
	`SCM_GC_SET_CELL_WORD
 (
z
, 0, 
ˇr
);

221 #i‡(
SCM_DEBUG_CELL_ACCESSES
 == 1)

222 i‡(
scm_debug_˚Œ_ac˚s£s_p
)

224 i‡(
	`SCM_GC_MARK_P
 (
z
))

226 
	`Ârötf
(
°dîr
,

228 
	`ab‹t
();

233 
	`SCM_SET_GC_MARK
 (
z
);

249 #ifde‡
__GNUC__


250 
__asm__
 volatile ("" : : : "memory");

254 
	`scm_ªmembî_u±o_hîe_1
 (
z
);

257  
z
;

258 
	}
}

260 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


261 
	gSCM_C_EXTERN_INLINE


263 
SCM


264 
	$scm_¨øy_h™dÀ_ªf
 (
scm_t_¨øy_h™dÀ
 *
h
, 
ssize_t
 
p
)

266  
h
->
	`ªf
 (h, 
p
);

267 
	}
}

269 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


270 
	gSCM_C_EXTERN_INLINE


273 
	$scm_¨øy_h™dÀ_£t
 (
scm_t_¨øy_h™dÀ
 *
h
, 
ssize_t
 
p
, 
SCM
 
v
)

275 
h
->
	`£t
 (h, 
p
, 
v
);

276 
	}
}

278 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


279 
	gSCM_C_EXTERN_INLINE


282 
	$scm_is_∑ú
 (
SCM
 
x
)

300 #i‡
	`deföed
 (
__GNUC__
Ë&& __GNUC__ =2 && 
__GNUC_MINOR__
 == 95

301 vﬁ©ûê
SCM
 
w‹k¨ound_f‹_gcc_295
 = 
x
;

302 
w‹k¨ound_f‹_gcc_295
 = workaround_for_gcc_295;

305  
	`SCM_I_CONSP
 (
x
);

306 
	}
}

311 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


312 
	gSCM_C_EXTERN_INLINE


315 
	$scm_gëc
 (
SCM
 
p‹t
)

317 
c
;

318 
scm_t_p‹t
 *
±
 = 
	`SCM_PTAB_ENTRY
 (
p‹t
);

320 i‡(
±
->
rw_a˘ive
 =
SCM_PORT_WRITE
)

322 
scm_±obs
[
	`SCM_PTOBNUM
 (
p‹t
)].
	`Êush
 (port);

324 i‡(
±
->
rw_øndom
)

325 
±
->
rw_a˘ive
 = 
SCM_PORT_READ
;

327 i‡(
±
->
ªad_pos
 >±->
ªad_íd
)

329 i‡(
	`scm_fûl_öput
 (
p‹t
Ë=
EOF
)

330  
EOF
;

333 
c
 = *(
±
->
ªad_pos
++);

335 
c
)

340 
	`SCM_DECCOL
 (
p‹t
);

343 
	`SCM_INCLINE
 (
p‹t
);

346 
	`SCM_ZEROCOL
 (
p‹t
);

349 
	`SCM_TABCOL
 (
p‹t
);

352 
	`SCM_INCCOL
 (
p‹t
);

356  
c
;

357 
	}
}

359 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


360 
	gSCM_C_EXTERN_INLINE


363 
	$scm_putc
 (
c
, 
SCM
 
p‹t
)

365 
	`SCM_ASSERT_TYPE
 (
	`SCM_OPOUTPORTP
 (
p‹t
),Ö‹t, 0, 
NULL
, "outputÖort");

366 
	`scm_lfwrôe
 (&
c
, 1, 
p‹t
);

367 
	}
}

369 #i‚de‡
SCM_INLINE_C_INCLUDING_INLINE_H


370 
	gSCM_C_EXTERN_INLINE


373 
	$scm_puts
 (c⁄° *
s
, 
SCM
 
p‹t
)

375 
	`SCM_ASSERT_TYPE
 (
	`SCM_OPOUTPORTP
 (
p‹t
),Ö‹t, 0, 
NULL
, "outputÖort");

376 
	`scm_lfwrôe
 (
s
, 
	`°æí
 (s), 
p‹t
);

377 
	}
}

	@/usr/include/libguile/ioext.h

3 #i‚de‡
SCM_IOEXT_H


4 
	#SCM_IOEXT_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_·ñl
 (SCM 
obje˘
);

30 
SCM_API
 
SCM
 
scm_ªdúe˘_p‹t
 (SCM 
öto_±
, SCM 
‰om_±
);

31 
SCM_API
 
SCM
 
scm_dup_to_fdes
 (SCM 
fd_‹_p‹t
, SCM 
√wfd
);

32 
SCM_API
 
SCM
 
scm_dup2
 (SCM 
ﬁdfd
, SCM 
√wfd
);

33 
SCM_API
 
SCM
 
scm_fûío
 (SCM 
p‹t
);

34 
SCM_API
 
SCM
 
scm_ißây_p
 (SCM 
p‹t
);

35 
SCM_API
 
SCM
 
scm_fd›í
 (SCM 
fdes
, SCM 
modes
);

36 
SCM_API
 
SCM
 
scm_¥imôive_move_to_fdes
 (SCM 
p‹t
, SCM 
fd
);

37 
SCM_API
 
SCM
 
scm_fdes_to_p‹ts
 (SCM 
fd
);

38 
SCM_API
 
scm_öô_i€xt
 ();

	@/usr/include/libguile/keywords.h

3 #i‚de‡
SCM_KEYWORDS_H


4 
	#SCM_KEYWORDS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_keyw‹d
;

33 
SCM_API
 
SCM
 
scm_keyw‹d_p
 (SCM 
obj
);

34 
SCM_API
 
SCM
 
scm_symbﬁ_to_keyw‹d
 (SCM 
symbﬁ
);

35 
SCM_API
 
SCM
 
scm_keyw‹d_to_symbﬁ
 (SCM 
keyw‹d
);

37 
SCM_API
 
scm_is_keyw‹d
 (
SCM
 
vÆ
);

38 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_keyw‹d
 (c⁄° *
°r
);

39 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_keyw‹dn
 (c⁄° *
°r
, 
size_t
 
Àn
);

41 
SCM_API
 
scm_öô_keyw‹ds
 ();

	@/usr/include/libguile/list.h

3 #i‚de‡
SCM_LIST_H


4 
	#SCM_LIST_H


	)

26 
	~"libguûe/__scm.h
"

30 
SCM_API
 
SCM
 
scm_li°_1
 (SCM 
e1
);

31 
SCM_API
 
SCM
 
scm_li°_2
 (SCM 
e1
, SCM 
e2
);

32 
SCM_API
 
SCM
 
scm_li°_3
 (SCM 
e1
, SCM 
e2
, SCM 
e3
);

33 
SCM_API
 
SCM
 
scm_li°_4
 (SCM 
e1
, SCM 
e2
, SCM 
e3
, SCM 
e4
);

34 
SCM_API
 
SCM
 
scm_li°_5
 (SCM 
e1
, SCM 
e2
, SCM 
e3
, SCM 
e4
, SCM 
e5
);

35 
SCM_API
 
SCM
 
scm_li°_n
 (SCM 
ñt
, ...);

36 
SCM_API
 
SCM
 
scm_li°
 (SCM 
objs
);

37 
SCM_API
 
SCM
 
scm_li°_hód
 (SCM 
l°
, SCM 
k
);

38 
SCM_API
 
SCM
 
scm_make_li°
 (SCM 
n
, SCM 
öô
);

39 
SCM_API
 
SCM
 
scm_c⁄s_°¨
 (SCM 
¨g
, SCM 
objs
);

40 
SCM_API
 
SCM
 
scm_nuŒ_p
 (SCM 
x
);

41 
SCM_API
 
SCM
 
scm_li°_p
 (SCM 
x
);

42 
SCM_API
 
scm_ûígth
 (
SCM
 
sx
);

43 
SCM_API
 
SCM
 
scm_Àngth
 (SCM 
x
);

44 
SCM_API
 
SCM
 
scm_≠≥nd
 (SCM 
¨gs
);

45 
SCM_API
 
SCM
 
scm_≠≥nd_x
 (SCM 
¨gs
);

46 
SCM_API
 
SCM
 
scm_ªvî£
 (SCM 
l°
);

47 
SCM_API
 
SCM
 
scm_ªvî£_x
 (SCM 
l°
, SCM 
√wèû
);

48 
SCM_API
 
SCM
 
scm_li°_ªf
 (SCM 
l°
, SCM 
k
);

49 
SCM_API
 
SCM
 
scm_li°_£t_x
 (SCM 
l°
, SCM 
k
, SCM 
vÆ
);

50 
SCM_API
 
SCM
 
scm_li°_cdr_£t_x
 (SCM 
l°
, SCM 
k
, SCM 
vÆ
);

51 
SCM_API
 
SCM
 
scm_œ°_∑ú
 (SCM 
sx
);

52 
SCM_API
 
SCM
 
scm_li°_èû
 (SCM 
l°
, SCM 
k
);

53 
SCM_API
 
SCM
 
scm_c_memq
 (SCM 
x
, SCM 
l°
);

54 
SCM_API
 
SCM
 
scm_memq
 (SCM 
x
, SCM 
l°
);

55 
SCM_API
 
SCM
 
scm_memv
 (SCM 
x
, SCM 
l°
);

56 
SCM_API
 
SCM
 
scm_membî
 (SCM 
x
, SCM 
l°
);

57 
SCM_API
 
SCM
 
scm_dñq_x
 (SCM 
ôem
, SCM 
l°
);

58 
SCM_API
 
SCM
 
scm_dñv_x
 (SCM 
ôem
, SCM 
l°
);

59 
SCM_API
 
SCM
 
scm_dñëe_x
 (SCM 
ôem
, SCM 
l°
);

60 
SCM_API
 
SCM
 
scm_li°_c›y
 (SCM 
l°
);

61 
SCM_API
 
SCM
 
scm_dñq
 (SCM 
ôem
, SCM 
l°
);

62 
SCM_API
 
SCM
 
scm_dñv
 (SCM 
ôem
, SCM 
l°
);

63 
SCM_API
 
SCM
 
scm_dñëe
 (SCM 
ôem
, SCM 
l°
);

64 
SCM_API
 
SCM
 
scm_dñq1_x
 (SCM 
ôem
, SCM 
l°
);

65 
SCM_API
 
SCM
 
scm_dñv1_x
 (SCM 
ôem
, SCM 
l°
);

66 
SCM_API
 
SCM
 
scm_dñëe1_x
 (SCM 
ôem
, SCM 
l°
);

67 
SCM_API
 
SCM
 
scm_fûãr
 (SCM 
¥ed
, SCM 
li°
);

68 
SCM_API
 
SCM
 
scm_fûãr_x
 (SCM 
¥ed
, SCM 
li°
);

74 
SCM_API
 
SCM
 
scm_i_föôe_li°_c›y
 (SCM );

75 
SCM_API
 
scm_öô_li°
 ();

	@/usr/include/libguile/load.h

3 #i‚de‡
SCM_LOAD_H


4 
	#SCM_LOAD_H


	)

25 
	~"libguûe/__scm.h
"

28 
SCM_API
 
SCM
 
scm_∑r£_∑th
 (SCM 
∑th
, SCM 
èû
);

29 
SCM_API
 
scm_öô_lﬂd_∑th
 ();

30 
SCM_API
 
SCM
 
scm_¥imôive_lﬂd
 (SCM 
fûíame
);

31 
SCM_API
 
SCM
 
scm_c_¥imôive_lﬂd
 (c⁄° *
fûíame
);

32 
SCM_API
 
SCM
 
scm_sys_∑ckage_d©a_dú
 ();

33 
SCM_API
 
SCM
 
scm_sys_libøry_dú
 ();

34 
SCM_API
 
SCM
 
scm_sys_sôe_dú
 ();

35 
SCM_API
 
SCM
 
scm_£¨ch_∑th
 (SCM 
∑th
, SCM 
fûíame
, SCM 
exts
);

36 
SCM_API
 
SCM
 
scm_sys_£¨ch_lﬂd_∑th
 (SCM 
fûíame
);

37 
SCM_API
 
SCM
 
scm_¥imôive_lﬂd_∑th
 (SCM 
fûíame
);

38 
SCM_API
 
SCM
 
scm_c_¥imôive_lﬂd_∑th
 (c⁄° *
fûíame
);

39 
SCM_API
 
scm_öô_lﬂd
 ();

	@/usr/include/libguile/macros.h

3 #i‚de‡
SCM_MACROS_H


4 
	#SCM_MACROS_H


	)

25 
	~"libguûe/__scm.h
"

29 
	#SCM_ASSYNT
(
_c⁄d
, 
_msg
, 
_subr
) \

30 i‡(!(
_c⁄d
)Ë
	`scm_misc_îr‹
 (
_subr
, 
_msg
, 
SCM_EOL
);

	)

32 
	#SCM_MACROP
(
x
Ë
	`SCM_SMOB_PREDICATE
 (
scm_tc16_ma¸o
, (x))

	)

33 
	#SCM_MACRO_TYPE
(
m
Ë
	`SCM_SMOB_FLAGS
 (m)

	)

34 
	#SCM_BUILTIN_MACRO_P
(
x
Ë(
	`SCM_MACROP
 (xË&& 
	`SCM_MACRO_TYPE
 (xË=3)

	)

35 
	#SCM_MACRO_CODE
(
m
Ë
	`SCM_SMOB_OBJECT
 (m)

	)

37 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_ma¸o
;

39 
SCM_API
 
SCM
 
scm_i_makbima¸o
 (SCM 
code
);

40 
SCM_API
 
SCM
 
scm_makmma¸o
 (SCM 
code
);

41 
SCM_API
 
SCM
 
scm_maka¸o
 (SCM 
code
);

42 
SCM_API
 
SCM
 
scm_ma¸o_p
 (SCM 
obj
);

43 
SCM_API
 
SCM
 
scm_ma¸o_ty≥
 (SCM 
m
);

44 
SCM_API
 
SCM
 
scm_ma¸o_«me
 (SCM 
m
);

45 
SCM_API
 
SCM
 
scm_ma¸o_å™sf‹mî
 (SCM 
m
);

46 
SCM_API
 
SCM
 
scm_make_sy¡
 (c⁄° *
«me
,

47 
	$SCM
 (*
ma¸oizî
Ë(
SCM
),

48 
	`SCM
 (*
f˙
) ());

49 
SCM_API
 
	`scm_öô_ma¸os
 ();

51 #i‡
SCM_ENABLE_DEPRECATED
 == 1

52 
SCM_API
 
SCM
 
	`scm_makma¸o
 (SCM 
code
);

	@/usr/include/libguile/mallocs.h

3 #i‚de‡
SCM_MALLOCS_H


4 
	#SCM_MALLOCS_H


	)

25 
	~"libguûe/__scm.h
"

28 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_mÆloc
;

30 
	#SCM_MALLOCP
(
X
Ë(
	`SCM_SMOB_PREDICATE
 (
scm_tc16_mÆloc
, (X)))

	)

31 
	#SCM_MALLOCDATA
(
obj
Ë((*Ë
	`SCM_SMOB_DATA
 (obj))

	)

32 
	#SCM_SETMALLOCDATA
(
obj
, 
vÆ
Ë(
	`SCM_SET_SMOB_DATA
 ((obj), (vÆ)))

	)

36 
SCM_API
 
SCM
 
scm_mÆloc_obj
 (
size_t
 
n
);

37 
SCM_API
 
scm_öô_mÆlocs
 ();

	@/usr/include/libguile/modules.h

3 #i‚de‡
SCM_MODULES_H


4 
	#SCM_MODULES_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/vÆid©e.h
"

31 
SCM_API
 
	gscm_moduÀ_sy°em_boŸed_p
;

32 
SCM_API
 
scm_t_bôs
 
	gscm_moduÀ_èg
;

34 
	#SCM_MODULEP
(
OBJ
) \

35 (!
	`SCM_IMP
 (
OBJ
Ë&& 
	`SCM_CELL_TYPE
 (OBJË=
scm_moduÀ_èg
)

	)

37 
	#SCM_VALIDATE_MODULE
(
pos
, 
scm
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, scm, 
MODULEP
, "moduÀ")

	)

43 
	#scm_moduÀ_ödex_ob¨øy
 0

	)

44 
	#scm_moduÀ_ödex_u£s
 1

	)

45 
	#scm_moduÀ_ödex_bödî
 2

	)

46 
	#scm_moduÀ_ödex_evÆ_˛osuª
 3

	)

47 
	#scm_moduÀ_ödex_å™sf‹mî
 4

	)

49 
	#SCM_MODULE_OBARRAY
(
moduÀ
) \

50 
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
moduÀ
Ë[
scm_moduÀ_ödex_ob¨øy
])

	)

51 
	#SCM_MODULE_USES
(
moduÀ
) \

52 
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
moduÀ
Ë[
scm_moduÀ_ödex_u£s
])

	)

53 
	#SCM_MODULE_BINDER
(
moduÀ
) \

54 
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
moduÀ
Ë[
scm_moduÀ_ödex_bödî
])

	)

55 
	#SCM_MODULE_EVAL_CLOSURE
(
moduÀ
) \

56 
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
moduÀ
)[
scm_moduÀ_ödex_evÆ_˛osuª
])

	)

57 
	#SCM_MODULE_TRANSFORMER
(
moduÀ
) \

58 
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
moduÀ
)[
scm_moduÀ_ödex_å™sf‹mî
])

	)

60 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_evÆ_˛osuª
;

62 
	#SCM_EVAL_CLOSURE_P
(
x
Ë
	`SCM_TYP16_PREDICATE
 (
scm_tc16_evÆ_˛osuª
, x)

	)

66 
SCM_API
 
SCM
 
scm_cuºít_moduÀ
 ();

67 
SCM_API
 
SCM
 
scm_öãø˘i⁄_ívú⁄mít
 ();

68 
SCM_API
 
SCM
 
scm_£t_cuºít_moduÀ
 (SCM 
moduÀ
);

70 
SCM_API
 
SCM
 
scm_c_ˇŒ_wôh_cuºít_moduÀ
 (SCM 
moduÀ
,

71 
	$SCM
 (*
func
)(*), *
d©a
);

72 
SCM_API
 
	`scm_dynwöd_cuºít_moduÀ
 (
SCM
 
moduÀ
);

74 
SCM_API
 
SCM
 
	`scm_c_lookup
 (c⁄° *
«me
);

75 
SCM_API
 
SCM
 
	`scm_c_deföe
 (c⁄° *
«me
, SCM 
vÆ
);

76 
SCM_API
 
SCM
 
	`scm_lookup
 (SCM 
symbﬁ
);

77 
SCM_API
 
SCM
 
	`scm_deföe
 (SCM 
symbﬁ
, SCM 
vÆ
);

79 
SCM_API
 
SCM
 
	`scm_c_moduÀ_lookup
 (SCM 
moduÀ
, c⁄° *
«me
);

80 
SCM_API
 
SCM
 
	`scm_c_moduÀ_deföe
 (SCM 
moduÀ
, c⁄° *
«me
, SCM 
vÆ
);

81 
SCM_API
 
SCM
 
	`scm_moduÀ_lookup
 (SCM 
moduÀ
, SCM 
symbﬁ
);

82 
SCM_API
 
SCM
 
	`scm_moduÀ_deföe
 (SCM 
moduÀ
, SCM 
symbﬁ
, SCM 
vÆ
);

83 
SCM_API
 
SCM
 
	`scm_moduÀ_ªvî£_lookup
 (SCM 
moduÀ
, SCM 
v¨übÀ
);

85 
SCM_API
 
SCM
 
	`scm_c_ªsﬁve_moduÀ
 (c⁄° *
«me
);

86 
SCM_API
 
SCM
 
	`scm_ªsﬁve_moduÀ
 (SCM 
«me
);

87 
SCM_API
 
SCM
 
	`scm_c_deföe_moduÀ
 (c⁄° *
«me
,

88 (*
öô
)(*), *
d©a
);

89 
SCM_API
 
	`scm_c_u£_moduÀ
 (c⁄° *
«me
);

90 
SCM_API
 
	`scm_c_exp‹t
 (c⁄° *
«me
, ...);

92 
SCM_API
 
SCM
 
	`scm_sym2v¨
 (SCM 
sym
, SCM 
thunk
, SCM 
deföï
);

94 
SCM_API
 
SCM
 
	`scm_moduÀ_imp‹t_öãrÁ˚
 (SCM 
moduÀ
, SCM 
sym
);

95 
SCM_API
 
SCM
 
	`scm_moduÀ_lookup_˛osuª
 (SCM 
moduÀ
);

96 
SCM_API
 
SCM
 
	`scm_moduÀ_å™sf‹mî
 (SCM 
moduÀ
);

97 
SCM_API
 
SCM
 
	`scm_cuºít_moduÀ_lookup_˛osuª
 ();

98 
SCM_API
 
SCM
 
	`scm_cuºít_moduÀ_å™sf‹mî
 ();

99 
SCM_API
 
SCM
 
	`scm_evÆ_˛osuª_lookup
 (SCM 
e˛o
, SCM 
sym
, SCM 
deföï
);

100 
SCM_API
 
SCM
 
	`scm_°™d¨d_evÆ_˛osuª
 (SCM 
moduÀ
);

101 
SCM_API
 
SCM
 
	`scm_°™d¨d_öãrÁ˚_evÆ_˛osuª
 (SCM 
moduÀ
);

102 
SCM_API
 
SCM
 
	`scm_gë_¥e_moduÀs_ob¨øy
 ();

103 
SCM_API
 
SCM
 
	`scm_lookup_˛osuª_moduÀ
 (SCM 
¥oc
);

105 
SCM_API
 
SCM
 
	`scm_ív_t›_Àvñ
 (SCM 
ív
);

106 
SCM_API
 
SCM
 
	`scm_ív_moduÀ
 (SCM 
ív
);

107 
SCM_API
 
SCM
 
	`scm_t›_Àvñ_ív
 (SCM 
thunk
);

108 
SCM_API
 
SCM
 
	`scm_sy°em_moduÀ_ív_p
 (SCM 
ív
);

110 
SCM_API
 
	`scm_moduÀs_¥ehi°‹y
 ();

111 
SCM_API
 
	`scm_öô_moduÀs
 ();

	@/usr/include/libguile/net_db.h

3 #i‚de‡
SCM_NET_DB_H


4 
	#SCM_NET_DB_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_gëho°
 (SCM 
ho°
);

30 
SCM_API
 
SCM
 
scm_gë√t
 (SCM 
«me
);

31 
SCM_API
 
SCM
 
scm_gë¥Ÿo
 (SCM 
«me
);

32 
SCM_API
 
SCM
 
scm_gë£rv
 (SCM 
«me
, SCM 
¥Ÿo
);

33 
SCM_API
 
SCM
 
scm_£tho°
 (SCM 
¨g
);

34 
SCM_API
 
SCM
 
scm_£äë
 (SCM 
¨g
);

35 
SCM_API
 
SCM
 
scm_£çrŸo
 (SCM 
¨g
);

36 
SCM_API
 
SCM
 
scm_£t£rv
 (SCM 
¨g
);

37 
SCM_API
 
scm_öô_√t_db
 ();

	@/usr/include/libguile/numbers.h

3 #i‚de‡
SCM_NUMBERS_H


4 
	#SCM_NUMBERS_H


	)

25 
	~<gmp.h
>

27 
	~"libguûe/__scm.h
"

28 
	~"libguûe/¥öt.h
"

30 #i‡
SCM_HAVE_FLOATINGPOINT_H


31 
	~<Êﬂtögpoöt.h
>

34 #i‡
SCM_HAVE_IEEEFP_H


35 
	~<õìÂ.h
>

38 #i‡
SCM_HAVE_NAN_H


39 #i‡
deföed
 (
SCO
)

40 
	#_IEEE
 1

	)

42 
	~<«n.h
>

43 #i‡
deföed
 (
SCO
)

44 #unde‡
_IEEE


59 
	#SCM_I_FIXNUM_BIT
 (
SCM_LONG_BIT
 - 2)

	)

60 
	#SCM_MOST_POSITIVE_FIXNUM
 ((
SCM_T_SIGNED_BITS_MAX
-3)/4)

	)

61 
	#SCM_MOST_NEGATIVE_FIXNUM
 (-
SCM_MOST_POSITIVE_FIXNUM
-1)

	)

65 
	#SCM_SRS
(
x
, 
y
Ë((xË>> (y))

	)

67 
	#SCM_SRS
(
x
, 
y
Ë((xË< 0 ? ~((~(x)Ë>> (y)Ë: ((xË>> (y)))

	)

71 
	#SCM_I_INUMP
(
x
Ë(2 & 
	`SCM_UNPACK
 (x))

	)

72 
	#SCM_I_NINUMP
(
x
Ë(!
	`SCM_I_INUMP
 (x))

	)

73 
	#SCM_I_MAKINUM
(
x
) \

74 (
	`SCM_PACK
 ((((
scm_t_sig√d_bôs
Ë(
x
)Ë<< 2Ë+ 
scm_tc2_öt
))

	)

75 
	#SCM_I_INUM
(
x
Ë(
	`SCM_SRS
 ((
scm_t_sig√d_bôs
Ë
	`SCM_UNPACK
 (x), 2))

	)

78 
	#SCM_POSFIXABLE
(
n
Ë(“Ë<
SCM_MOST_POSITIVE_FIXNUM
)

	)

79 
	#SCM_NEGFIXABLE
(
n
Ë(“Ë>
SCM_MOST_NEGATIVE_FIXNUM
)

	)

80 
	#SCM_FIXABLE
(
n
Ë(
	`SCM_POSFIXABLE
 (nË&& 
	`SCM_NEGFIXABLE
 (n))

	)

84 
	#SCM_INUM0
 (
	`SCM_I_MAKINUM
 (0))

	)

90 #i‡
SCM_HAVE_STDC_HEADERS


91 #i‚de‡
GO32


92 
	~<Êﬂt.h
>

93 #ifde‡
__MINGW32__


94 
	#c›ysign
 
_c›ysign


	)

95 
	#föôe
 
_föôe


	)

100 #ifde‡
DBL_MAX_10_EXP


101 
	#SCM_MAXEXP
 
DBL_MAX_10_EXP


	)

103 
	#SCM_MAXEXP
 308

	)

106 #ifde‡
FLT_MAX


107 
	#SCM_FLTMAX
 
FLT_MAX


	)

109 
	#SCM_FLTMAX
 1e+23

	)

118 
	#SCM_INTBUFLEN
 (5 + 
SCM_CHAR_BIT
*(
scm_t_ötmax
))

	)

132 
	#scm_tc16_big
 (
scm_tc7_numbî
 + 1 * 256L)

	)

133 
	#scm_tc16_ªÆ
 (
scm_tc7_numbî
 + 2 * 256L)

	)

134 
	#scm_tc16_com∂ex
 (
scm_tc7_numbî
 + 3 * 256L)

	)

135 
	#scm_tc16_‰a˘i⁄
 (
scm_tc7_numbî
 + 4 * 256L)

	)

137 
	#SCM_INEXACTP
(
x
) \

138 (!
	`SCM_IMP
 (
x
Ë&& (0x„f‡& 
	`SCM_CELL_TYPE
 (x)Ë=
scm_tc16_ªÆ
)

	)

139 
	#SCM_REALP
(
x
Ë(!
	`SCM_IMP
 (xË&& 
	`SCM_TYP16
 (xË=
scm_tc16_ªÆ
)

	)

140 
	#SCM_COMPLEXP
(
x
Ë(!
	`SCM_IMP
 (xË&& 
	`SCM_TYP16
 (xË=
scm_tc16_com∂ex
)

	)

142 
	#SCM_REAL_VALUE
(
x
Ë(((
scm_t_doubÀ
 *Ë
	`SCM2PTR
 (x))->
ªÆ
)

	)

143 
	#SCM_COMPLEX_MEM
(
x
Ë((
scm_t_com∂ex
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

144 
	#SCM_COMPLEX_REAL
(
x
Ë(
	`SCM_COMPLEX_MEM
 (x)->
ªÆ
)

	)

145 
	#SCM_COMPLEX_IMAG
(
x
Ë(
	`SCM_COMPLEX_MEM
 (x)->
imag
)

	)

148 
	#SCM_I_BIG_MPZ
(
x
Ë(*((
mpz_t
 *Ë(
	`SCM_CELL_OBJECT_LOC
((x),1))))

	)

149 
	#SCM_BIGP
(
x
Ë(!
	`SCM_IMP
 (xË&& 
	`SCM_TYP16
 (xË=
scm_tc16_big
)

	)

151 
	#SCM_NUMBERP
(
x
Ë(
	`SCM_I_INUMP
(xË|| 
	`SCM_NUMP
(x))

	)

152 
	#SCM_NUMP
(
x
Ë(!
	`SCM_IMP
(x) \

153 && (((0xfcf‡& 
	`SCM_CELL_TYPE
 (
x
)Ë=
scm_tc7_numbî
) \

154 || ((0xfbf‡& 
	`SCM_CELL_TYPE
 (
x
)Ë=
scm_tc7_numbî
)))

	)

157 
	#SCM_FRACTIONP
(
x
Ë(!
	`SCM_IMP
 (xË&& 
	`SCM_TYP16
 (xË=
scm_tc16_‰a˘i⁄
)

	)

158 
	#SCM_FRACTION_NUMERATOR
(
x
Ë(
	`SCM_CELL_OBJECT_1
 (x))

	)

159 
	#SCM_FRACTION_DENOMINATOR
(
x
Ë(
	`SCM_CELL_OBJECT_2
 (x))

	)

163 
	sscm_t_doubÀ


165 
SCM
 
	mty≥
;

166 
SCM
 
	m∑d
;

167 
	mªÆ
;

168 } 
	tscm_t_doubÀ
;

170 
	sscm_t_com∂ex


172 
	mªÆ
;

173 
	mimag
;

174 } 
	tscm_t_com∂ex
;

178 
SCM_API
 
SCM
 
scm_exa˘_p
 (SCM 
x
);

179 
SCM_API
 
SCM
 
scm_odd_p
 (SCM 
n
);

180 
SCM_API
 
SCM
 
scm_eví_p
 (SCM 
n
);

181 
SCM_API
 
SCM
 
scm_öf_p
 (SCM 
n
);

182 
SCM_API
 
SCM
 
scm_«n_p
 (SCM 
n
);

183 
SCM_API
 
SCM
 
scm_öf
 ();

184 
SCM_API
 
SCM
 
scm_«n
 ();

185 
SCM_API
 
SCM
 
scm_abs
 (SCM 
x
);

186 
SCM_API
 
SCM
 
scm_quŸõ¡
 (SCM 
x
, SCM 
y
);

187 
SCM_API
 
SCM
 
scm_ªmaödî
 (SCM 
x
, SCM 
y
);

188 
SCM_API
 
SCM
 
scm_modulo
 (SCM 
x
, SCM 
y
);

189 
SCM_API
 
SCM
 
scm_gcd
 (SCM 
x
, SCM 
y
);

190 
SCM_API
 
SCM
 
scm_lcm
 (SCM 
n1
, SCM 
n2
);

191 
SCM_API
 
SCM
 
scm_log™d
 (SCM 
n1
, SCM 
n2
);

192 
SCM_API
 
SCM
 
scm_logi‹
 (SCM 
n1
, SCM 
n2
);

193 
SCM_API
 
SCM
 
scm_logx‹
 (SCM 
n1
, SCM 
n2
);

194 
SCM_API
 
SCM
 
scm_logã°
 (SCM 
n1
, SCM 
n2
);

195 
SCM_API
 
SCM
 
scm_logbô_p
 (SCM 
n1
, SCM 
n2
);

196 
SCM_API
 
SCM
 
scm_lognŸ
 (SCM 
n
);

197 
SCM_API
 
SCM
 
scm_modulo_ex±
 (SCM 
n
, SCM 
k
, SCM 
m
);

198 
SCM_API
 
SCM
 
scm_öãgî_ex±
 (SCM 
z1
, SCM 
z2
);

199 
SCM_API
 
SCM
 
scm_ash
 (SCM 
n
, SCM 
˙t
);

200 
SCM_API
 
SCM
 
scm_bô_exåa˘
 (SCM 
n
, SCM 
°¨t
, SCM 
íd
);

201 
SCM_API
 
SCM
 
scm_logcou¡
 (SCM 
n
);

202 
SCM_API
 
SCM
 
scm_öãgî_Àngth
 (SCM 
n
);

204 
SCM_API
 
size_t
 
scm_iöt2°r
 (
scm_t_ötmax
 
num
, 
ød
, *
p
);

205 
SCM_API
 
size_t
 
scm_iuöt2°r
 (
scm_t_uötmax
 
num
, 
ød
, *
p
);

206 
SCM_API
 
SCM
 
scm_numbî_to_°rög
 (SCM 
x
, SCM 
ødix
);

207 
SCM_API
 
scm_¥öt_ªÆ
 (
SCM
 
£xp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

208 
SCM_API
 
scm_¥öt_com∂ex
 (
SCM
 
£xp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

209 
SCM_API
 
scm_big¥öt
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

210 
SCM_API
 
SCM
 
scm_c_loˇÀ_°rögn_to_numbî
 (c⁄° *
mem
, 
size_t
 
Àn
,

211 
ødix
);

212 
SCM_API
 
SCM
 
scm_°rög_to_numbî
 (SCM 
°r
, SCM 
ødix
);

213 
SCM_API
 
SCM
 
scm_bigequÆ
 (SCM 
x
, SCM 
y
);

214 
SCM_API
 
SCM
 
scm_ªÆ_equÆp
 (SCM 
x
, SCM 
y
);

215 
SCM_API
 
SCM
 
scm_com∂ex_equÆp
 (SCM 
x
, SCM 
y
);

216 
SCM_API
 
SCM
 
scm_numbî_p
 (SCM 
x
);

217 
SCM_API
 
SCM
 
scm_com∂ex_p
 (SCM 
x
);

218 
SCM_API
 
SCM
 
scm_ªÆ_p
 (SCM 
x
);

219 
SCM_API
 
SCM
 
scm_øti⁄Æ_p
 (SCM 
z
);

220 
SCM_API
 
SCM
 
scm_öãgî_p
 (SCM 
x
);

221 
SCM_API
 
SCM
 
scm_öexa˘_p
 (SCM 
x
);

222 
SCM_API
 
SCM
 
scm_num_eq_p
 (SCM 
x
, SCM 
y
);

223 
SCM_API
 
SCM
 
scm_Àss_p
 (SCM 
x
, SCM 
y
);

224 
SCM_API
 
SCM
 
scm_gr_p
 (SCM 
x
, SCM 
y
);

225 
SCM_API
 
SCM
 
scm_Àq_p
 (SCM 
x
, SCM 
y
);

226 
SCM_API
 
SCM
 
scm_geq_p
 (SCM 
x
, SCM 
y
);

227 
SCM_API
 
SCM
 
scm_zîo_p
 (SCM 
z
);

228 
SCM_API
 
SCM
 
scm_posôive_p
 (SCM 
x
);

229 
SCM_API
 
SCM
 
scm_√g©ive_p
 (SCM 
x
);

230 
SCM_API
 
SCM
 
scm_max
 (SCM 
x
, SCM 
y
);

231 
SCM_API
 
SCM
 
scm_mö
 (SCM 
x
, SCM 
y
);

232 
SCM_API
 
SCM
 
scm_sum
 (SCM 
x
, SCM 
y
);

233 
SCM_API
 
SCM
 
scm_⁄ïlus
 (SCM 
x
);

234 
SCM_API
 
SCM
 
scm_dif„ªn˚
 (SCM 
x
, SCM 
y
);

235 
SCM_API
 
SCM
 
scm_⁄emöus
 (SCM 
x
);

236 
SCM_API
 
SCM
 
scm_¥odu˘
 (SCM 
x
, SCM 
y
);

237 
SCM_API
 
SCM
 
scm_divide
 (SCM 
x
, SCM 
y
);

238 
SCM_API
 
SCM
 
scm_Êo‹
 (SCM 
x
);

239 
SCM_API
 
SCM
 
scm_˚ûög
 (SCM 
x
);

240 
SCM_API
 
scm_asöh
 (
x
);

241 
SCM_API
 
scm_acosh
 (
x
);

242 
SCM_API
 
scm_©™h
 (
x
);

243 
SCM_API
 
scm_c_åunˇã
 (
x
);

244 
SCM_API
 
scm_c_round
 (
x
);

245 
SCM_API
 
SCM
 
scm_åunˇã_numbî
 (SCM 
x
);

246 
SCM_API
 
SCM
 
scm_round_numbî
 (SCM 
x
);

247 
SCM_API
 
SCM
 
scm_sys_ex±
 (SCM 
z1
, SCM 
z2
);

248 
SCM_API
 
SCM
 
scm_sys_©™2
 (SCM 
z1
, SCM 
z2
);

249 
SCM_API
 
SCM
 
scm_make_ª˘™guœr
 (SCM 
z1
, SCM 
z2
);

250 
SCM_API
 
SCM
 
scm_make_pﬁ¨
 (SCM 
z1
, SCM 
z2
);

251 
SCM_API
 
SCM
 
scm_ªÆ_∑π
 (SCM 
z
);

252 
SCM_API
 
SCM
 
scm_imag_∑π
 (SCM 
z
);

253 
SCM_API
 
SCM
 
scm_magnôude
 (SCM 
z
);

254 
SCM_API
 
SCM
 
scm_™gÀ
 (SCM 
z
);

255 
SCM_API
 
SCM
 
scm_exa˘_to_öexa˘
 (SCM 
z
);

256 
SCM_API
 
SCM
 
scm_öexa˘_to_exa˘
 (SCM 
z
);

257 
SCM_API
 
SCM
 
scm_åunc
 (SCM 
x
);

258 
SCM_API
 
SCM
 
scm_log
 (SCM 
z
);

259 
SCM_API
 
SCM
 
scm_log10
 (SCM 
z
);

260 
SCM_API
 
SCM
 
scm_exp
 (SCM 
z
);

261 
SCM_API
 
SCM
 
scm_sqπ
 (SCM 
z
);

264 
SCM_API
 
SCM
 
scm_i_mkbig
 ();

265 
SCM_API
 
SCM
 
scm_i_n‹mbig
 (SCM 
x
);

266 
SCM_API
 
scm_i_bigcmp
 (
SCM
 
a
, SCM 
b
);

267 
SCM_API
 
SCM
 
scm_i_dbl2big
 (
d
);

268 
SCM_API
 
SCM
 
scm_i_dbl2num
 (
d
);

269 
SCM_API
 
scm_i_big2dbl
 (
SCM
 
b
);

270 
SCM_API
 
SCM
 
scm_i_l⁄g2big
 (
n
);

271 
SCM_API
 
SCM
 
scm_i_ul⁄g2big
 (
n
);

272 
SCM_API
 
SCM
 
scm_i_˛⁄ebig
 (SCM 
§c_big
, 
ßme_sign_p
);

275 
SCM_API
 
SCM
 
scm_øti⁄Æize
 (SCM 
x
, SCM 
îr
);

276 
SCM_API
 
SCM
 
scm_numî©‹
 (SCM 
z
);

277 
SCM_API
 
SCM
 
scm_díomö©‹
 (SCM 
z
);

280 
SCM_API
 
scm_i_‰a˘i⁄2doubÀ
 (
SCM
 
z
);

281 
SCM_API
 
SCM
 
scm_i_‰a˘i⁄_equÆp
 (SCM 
x
, SCM 
y
);

282 
SCM_API
 
scm_i_¥öt_‰a˘i⁄
 (
SCM
 
£xp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

285 
SCM_API
 
scm_i_¥öt_doubÀ
 (
vÆ
, 
SCM
 
p‹t
);

286 
SCM_API
 
scm_i_¥öt_com∂ex
 (
ªÆ
, 
imag
, 
SCM
 
p‹t
);

290 
SCM_API
 
scm_is_öãgî
 (
SCM
 
vÆ
);

291 
SCM_API
 
scm_is_sig√d_öãgî
 (
SCM
 
vÆ
,

292 
scm_t_ötmax
 
mö
, scm_t_ötmax 
max
);

293 
SCM_API
 
scm_is_unsig√d_öãgî
 (
SCM
 
vÆ
,

294 
scm_t_uötmax
 
mö
, scm_t_uötmax 
max
);

296 
SCM_API
 
SCM
 
scm_‰om_sig√d_öãgî
 (
scm_t_ötmax
 
vÆ
);

297 
SCM_API
 
SCM
 
scm_‰om_unsig√d_öãgî
 (
scm_t_uötmax
 
vÆ
);

299 
SCM_API
 
scm_t_ötmax
 
scm_to_sig√d_öãgî
 (
SCM
 
vÆ
,

300 
scm_t_ötmax
 
mö
,

301 
scm_t_ötmax
 
max
);

302 
SCM_API
 
scm_t_uötmax
 
scm_to_unsig√d_öãgî
 (
SCM
 
vÆ
,

303 
scm_t_uötmax
 
mö
,

304 
scm_t_uötmax
 
max
);

306 
SCM_API
 
scm_t_öt8
 
scm_to_öt8
 (
SCM
 
x
);

307 
SCM_API
 
SCM
 
scm_‰om_öt8
 (
scm_t_öt8
 
x
);

309 
SCM_API
 
scm_t_uöt8
 
scm_to_uöt8
 (
SCM
 
x
);

310 
SCM_API
 
SCM
 
scm_‰om_uöt8
 (
scm_t_uöt8
 
x
);

312 
SCM_API
 
scm_t_öt16
 
scm_to_öt16
 (
SCM
 
x
);

313 
SCM_API
 
SCM
 
scm_‰om_öt16
 (
scm_t_öt16
 
x
);

315 
SCM_API
 
scm_t_uöt16
 
scm_to_uöt16
 (
SCM
 
x
);

316 
SCM_API
 
SCM
 
scm_‰om_uöt16
 (
scm_t_uöt16
 
x
);

318 
SCM_API
 
scm_t_öt32
 
scm_to_öt32
 (
SCM
 
x
);

319 
SCM_API
 
SCM
 
scm_‰om_öt32
 (
scm_t_öt32
 
x
);

321 
SCM_API
 
scm_t_uöt32
 
scm_to_uöt32
 (
SCM
 
x
);

322 
SCM_API
 
SCM
 
scm_‰om_uöt32
 (
scm_t_uöt32
 
x
);

324 #i‡
SCM_HAVE_T_INT64


326 
SCM_API
 
scm_t_öt64
 
scm_to_öt64
 (
SCM
 
x
);

327 
SCM_API
 
SCM
 
scm_‰om_öt64
 (
scm_t_öt64
 
x
);

329 
SCM_API
 
scm_t_uöt64
 
scm_to_uöt64
 (
SCM
 
x
);

330 
SCM_API
 
SCM
 
scm_‰om_uöt64
 (
scm_t_uöt64
 
x
);

334 
SCM_API
 
scm_to_mpz
 (
SCM
 
x
, 
mpz_t
 
r›
);

335 
SCM_API
 
SCM
 
scm_‰om_mpz
 (
mpz_t
 
r›
);

349 #i‡
SCM_SIZEOF_CHAR
 == 1

350 
	#scm_to_sch¨
 
scm_to_öt8


	)

351 
	#scm_‰om_sch¨
 
scm_‰om_öt8


	)

352 
	#scm_to_uch¨
 
scm_to_uöt8


	)

353 
	#scm_‰om_uch¨
 
scm_‰om_uöt8


	)

354 #i‡
CHAR_MIN
 == 0

355 
	#scm_to_ch¨
 
scm_to_uöt8


	)

356 
	#scm_‰om_ch¨
 
scm_‰om_uöt8


	)

358 
	#scm_to_ch¨
 
scm_to_öt8


	)

359 
	#scm_‰om_ch¨
 
scm_‰om_öt8


	)

362 #îr‹ (Ë
is
 
nŸ
 1.

365 #i‡
SCM_SIZEOF_SHORT
 == 1

366 
	#scm_to_sh‹t
 
scm_to_öt8


	)

367 
	#scm_‰om_sh‹t
 
scm_‰om_öt8


	)

368 
	#scm_to_ush‹t
 
scm_to_uöt8


	)

369 
	#scm_‰om_ush‹t
 
scm_‰om_uöt8


	)

371 #i‡
SCM_SIZEOF_SHORT
 == 2

372 
	#scm_to_sh‹t
 
scm_to_öt16


	)

373 
	#scm_‰om_sh‹t
 
scm_‰om_öt16


	)

374 
	#scm_to_ush‹t
 
scm_to_uöt16


	)

375 
	#scm_‰om_ush‹t
 
scm_‰om_uöt16


	)

377 #i‡
SCM_SIZEOF_SHORT
 == 4

378 
	#scm_to_sh‹t
 
scm_to_öt32


	)

379 
	#scm_‰om_sh‹t
 
scm_‰om_öt32


	)

380 
	#scm_to_ush‹t
 
scm_to_uöt32


	)

381 
	#scm_‰om_ush‹t
 
scm_‰om_uöt32


	)

383 #îr‹ (Ë
is
 
nŸ
 1, 2, 
‹
 4.

388 #i‡
SCM_SIZEOF_INT
 == 4

389 
	#scm_to_öt
 
scm_to_öt32


	)

390 
	#scm_‰om_öt
 
scm_‰om_öt32


	)

391 
	#scm_to_uöt
 
scm_to_uöt32


	)

392 
	#scm_‰om_uöt
 
scm_‰om_uöt32


	)

394 #i‡
SCM_SIZEOF_INT
 == 8

395 
	#scm_to_öt
 
scm_to_öt64


	)

396 
	#scm_‰om_öt
 
scm_‰om_öt64


	)

397 
	#scm_to_uöt
 
scm_to_uöt64


	)

398 
	#scm_‰om_uöt
 
scm_‰om_uöt64


	)

400 #îr‹ (Ë
is
 
nŸ
 4 
‹
 8.

404 #i‡
SCM_SIZEOF_LONG
 == 4

405 
	#scm_to_l⁄g
 
scm_to_öt32


	)

406 
	#scm_‰om_l⁄g
 
scm_‰om_öt32


	)

407 
	#scm_to_ul⁄g
 
scm_to_uöt32


	)

408 
	#scm_‰om_ul⁄g
 
scm_‰om_uöt32


	)

410 #i‡
SCM_SIZEOF_LONG
 == 8

411 
	#scm_to_l⁄g
 
scm_to_öt64


	)

412 
	#scm_‰om_l⁄g
 
scm_‰om_öt64


	)

413 
	#scm_to_ul⁄g
 
scm_to_uöt64


	)

414 
	#scm_‰om_ul⁄g
 
scm_‰om_uöt64


	)

416 #îr‹ (Ë
is
 
nŸ
 4 
‹
 8.

420 #i‡
SCM_SIZEOF_INTMAX
 == 4

421 
	#scm_to_ötmax
 
scm_to_öt32


	)

422 
	#scm_‰om_ötmax
 
scm_‰om_öt32


	)

423 
	#scm_to_uötmax
 
scm_to_uöt32


	)

424 
	#scm_‰om_uötmax
 
scm_‰om_uöt32


	)

426 #i‡
SCM_SIZEOF_INTMAX
 == 8

427 
	#scm_to_ötmax
 
scm_to_öt64


	)

428 
	#scm_‰om_ötmax
 
scm_‰om_öt64


	)

429 
	#scm_to_uötmax
 
scm_to_uöt64


	)

430 
	#scm_‰om_uötmax
 
scm_‰om_uöt64


	)

432 #îr‹ (
scm_t_ötmax
Ë
is
 
nŸ
 4 
‹
 8.

436 #i‡
SCM_SIZEOF_LONG_LONG
 == 0

438 #i‡
SCM_SIZEOF_LONG_LONG
 == 8

439 
	#scm_to_l⁄g_l⁄g
 
scm_to_öt64


	)

440 
	#scm_‰om_l⁄g_l⁄g
 
scm_‰om_öt64


	)

441 
	#scm_to_ul⁄g_l⁄g
 
scm_to_uöt64


	)

442 
	#scm_‰om_ul⁄g_l⁄g
 
scm_‰om_uöt64


	)

444 #îr‹ (Ë
is
 
nŸ
 8.

448 #i‡
SCM_SIZEOF_SIZE_T
 == 4

449 
	#scm_to_ssize_t
 
scm_to_öt32


	)

450 
	#scm_‰om_ssize_t
 
scm_‰om_öt32


	)

451 
	#scm_to_size_t
 
scm_to_uöt32


	)

452 
	#scm_‰om_size_t
 
scm_‰om_uöt32


	)

454 #i‡
SCM_SIZEOF_SIZE_T
 == 8

455 
	#scm_to_ssize_t
 
scm_to_öt64


	)

456 
	#scm_‰om_ssize_t
 
scm_‰om_öt64


	)

457 
	#scm_to_size_t
 
scm_to_uöt64


	)

458 
	#scm_‰om_size_t
 
scm_‰om_uöt64


	)

460 #îr‹ (
size_t
Ë
is
 
nŸ
 4 
‹
 8.

466 
SCM_API
 
scm_is_ªÆ
 (
SCM
 
vÆ
);

467 
SCM_API
 
scm_is_øti⁄Æ
 (
SCM
 
vÆ
);

468 
SCM_API
 
scm_to_doubÀ
 (
SCM
 
vÆ
);

469 
SCM_API
 
SCM
 
scm_‰om_doubÀ
 (
vÆ
);

473 
SCM_API
 
scm_is_com∂ex
 (
SCM
 
vÆ
);

474 
SCM_API
 
SCM
 
scm_c_make_ª˘™guœr
 (
ª
, 
im
);

475 
SCM_API
 
SCM
 
scm_c_make_pﬁ¨
 (
mag
, 
™g
);

476 
SCM_API
 
scm_c_ªÆ_∑π
 (
SCM
 
z
);

477 
SCM_API
 
scm_c_imag_∑π
 (
SCM
 
z
);

478 
SCM_API
 
scm_c_magnôude
 (
SCM
 
z
);

479 
SCM_API
 
scm_c_™gÀ
 (
SCM
 
z
);

481 
SCM_API
 
scm_is_numbî
 (
SCM
 
vÆ
);

483 
SCM_API
 
scm_öô_numbîs
 ();

	@/usr/include/libguile/objects.h

3 #i‚de‡
SCM_OBJECTS_H


4 
	#SCM_OBJECTS_H


	)

36 
	~"libguûe/__scm.h
"

37 
	~"libguûe/°ru˘.h
"

47 
	#SCM_CLASS_FLAGS
(
˛ass
Ë(
	`SCM_STRUCT_DATA
 (˛assË[
scm_°ru˘_i_Êags
])

	)

48 
	#SCM_OBJ_CLASS_FLAGS
(
obj
Ë(
	`SCM_STRUCT_VTABLE_DATA
 (objË[
scm_°ru˘_i_Êags
])

	)

49 
	#SCM_SET_CLASS_FLAGS
(
c
, 
f
Ë(
	`SCM_CLASS_FLAGS
 (cË|(f))

	)

50 
	#SCM_CLEAR_CLASS_FLAGS
(
c
, 
f
Ë(
	`SCM_CLASS_FLAGS
 (cË&~(f))

	)

51 
	#SCM_CLASSF_MASK
 
SCM_STRUCTF_MASK


	)

53 
	#SCM_CLASSF_ENTITY
 
SCM_STRUCTF_ENTITY


	)

56 
	#SCM_CLASSF_OPERATOR
 (1L << 29)

	)

58 
	#SCM_I_OPERATORP
(
obj
)\

59 ((
	`SCM_OBJ_CLASS_FLAGS
 (
obj
Ë& 
SCM_CLASSF_OPERATOR
Ë!0)

	)

60 
	#SCM_OPERATOR_CLASS
(
obj
)\

61 ((
scm_mëa˛ass_›î©‹
 *Ë
	`SCM_STRUCT_DATA
 (
obj
))

	)

62 
	#SCM_OBJ_OPERATOR_CLASS
(
obj
)\

63 ((
scm_mëa˛ass_›î©‹
 *Ë
	`SCM_STRUCT_VTABLE_DATA
 (
obj
))

	)

64 
	#SCM_OPERATOR_PROCEDURE
(
obj
Ë(
	`SCM_OBJ_OPERATOR_CLASS
 (obj)->
¥o˚duª
)

	)

65 
	#SCM_OPERATOR_SETTER
(
obj
Ë(
	`SCM_OBJ_OPERATOR_CLASS
 (obj)->
£âî
)

	)

67 
	#SCM_I_ENTITYP
(
obj
)\

68 ((
	`SCM_OBJ_CLASS_FLAGS
 (
obj
Ë& 
SCM_CLASSF_ENTITY
Ë!0)

	)

69 
	#SCM_ENTITY_PROCEDURE
(
obj
) \

70 (
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (
obj
Ë[
scm_°ru˘_i_¥o˚duª
]))

	)

71 
	#SCM_SET_ENTITY_PROCEDURE
(
obj
, 
v
) \

72 (
	`SCM_STRUCT_DATA
 (
obj
Ë[
scm_°ru˘_i_¥o˚duª
] = 
	`SCM_UNPACK
 (
v
))

	)

73 
	#SCM_ENTITY_SETTER
(
obj
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_DATA
 (obj)[
scm_°ru˘_i_£âî
]))

	)

74 
	#SCM_SET_ENTITY_SETTER
(
obj
, 
v
) \

75 (
	`SCM_STRUCT_DATA
 (
obj
Ë[
scm_°ru˘_i_£âî
] = 
	`SCM_UNPACK
 (
v
))

	)

77 
	#SCM_SET_CLASS_DESTRUCTOR
(
c
, 
d
Ë
	`SCM_SET_VTABLE_DESTRUCTOR
 (c, d)

	)

78 
	#SCM_SET_CLASS_INSTANCE_SIZE
(
c
, 
s
) \

79 (
	`SCM_STRUCT_DATA
 (
c
)[
scm_°ru˘_i_size
] \

80 (
	`SCM_STRUCT_DATA
 (
c
Ë[
scm_°ru˘_i_size
] & 
SCM_STRUCTF_MASK
Ë| 
s
)

	)

114 
	#SCM_METACLASS_STANDARD_LAYOUT
 ""

	)

115 
	sscm_mëa˛ass_°™d¨d
 {

116 
SCM
 
	mœyout
;

117 
SCM
 
	mv˚Œ
;

118 
SCM
 
	mvèbÀ
;

119 
SCM
 
	m¥öt
;

122 
	#SCM_METACLASS_OPERATOR_LAYOUT
 "p›o"

	)

123 
	sscm_mëa˛ass_›î©‹
 {

124 
SCM
 
	mœyout
;

125 
SCM
 
	mv˚Œ
;

126 
SCM
 
	mvèbÀ
;

127 
SCM
 
	m¥öt
;

128 
SCM
 
	m¥o˚duª
;

129 
SCM
 
	m£âî
;

140 
	#SCM_ENTITY_LAYOUT
 ""

	)

150 
	#SCM_CLASSF_PURE_GENERIC
 (0x010 << 20)

	)

151 
	#SCM_CLASSF_GOOPS_VALID
 (0x080 << 20)

	)

152 
	#SCM_CLASSF_GOOPS
 (0x100 << 20)

	)

153 
	#scm_si_ªdeföed
 5

	)

154 
	#scm_si_hash£ts
 6

	)

155 
	#SCM_CLASS_OF
(
x
Ë
	`SCM_STRUCT_VTABLE
 (x)

	)

156 
	#SCM_OBJ_CLASS_REDEF
(
x
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_VTABLE_DATA
 (xË[
scm_si_ªdeföed
]))

	)

158 
	sscm_ef„˘ive_¶Ÿ_deföôi⁄
 {

159 
SCM
 
	m«me
;

160 
	mloˇti⁄
;

161 
SCM
 
	möô_vÆue
;

162 
SCM
 (*
gë
Ë(SCM 
	mobj
, SCM 
	m¶Ÿdef
);

163 
SCM
 (*
£t
Ë(SCM 
	mobj
, SCM 
	m¶Ÿdef
, SCM 
	mvÆue
);

164 } 
	tscm_ef„˘ive_¶Ÿ_deföôi⁄
;

166 
	#SCM_ESLOTDEF
(
x
Ë((
scm_ef„˘ive_¶Ÿ_deföôi⁄
 *Ë
	`SCM_CDR
 (x))

	)

168 
	#SCM_CMETHOD_CODE
(
cmëhod
Ë
	`SCM_CDR
 (cmëhod)

	)

169 
	#SCM_CMETHOD_FORMALS
(
cmëhod
Ë
	`SCM_CAR
 (
	`SCM_CMETHOD_CODE
 (cmëhod))

	)

170 
	#SCM_CMETHOD_BODY
(
cmëhod
Ë
	`SCM_CDR
 (
	`SCM_CMETHOD_CODE
 (cmëhod))

	)

171 
	#SCM_CMETHOD_ENV
(
cmëhod
Ë
	`SCM_CAR
 (cmëhod)

	)

174 
	#SCM_IN_PCLASS_INDEX
 0x000

	)

175 
	#SCM_OUT_PCLASS_INDEX
 0x100

	)

176 
	#SCM_INOUT_PCLASS_INDEX
 0x200

	)

179 
SCM_API
 
SCM
 
	gscm_mëa˛ass_°™d¨d
;

180 
SCM_API
 
SCM
 
	gscm_mëa˛ass_›î©‹
;

183 
SCM_API
 
SCM
 
scm_make_exãnded_˛ass
 (c⁄° *
ty≥_«me
, 
≠∂iˇbÀp
);

184 
SCM_API
 
scm_i_öhîô_≠∂iˇbÀ
 (
SCM
 
c
);

185 
SCM_API
 
scm_make_p‹t_˛as£s
 (
±obnum
, *
ty≥_«me
);

186 
SCM_API
 
scm_ch™ge_obje˘_˛ass
 (
SCM
, SCM, SCM);

187 
SCM_API
 
SCM
 
scm_memoize_mëhod
 (SCM 
x
, SCM 
¨gs
);

189 
SCM_API
 
SCM
 
scm_mˇche_lookup_cmëhod
 (SCM 
ˇche
, SCM 
¨gs
);

190 
SCM_API
 
SCM
 
scm_mˇche_compuã_cmëhod
 (SCM 
ˇche
, SCM 
¨gs
);

197 
SCM_API
 
SCM
 
scm_ˇŒ_gíîic_3
 (SCM 
gf
, SCM 
a1
, SCM 
a2
, SCM 
a3
);

198 
SCM_API
 
SCM
 
scm_ítôy_p
 (SCM 
obj
);

199 
SCM_API
 
SCM
 
scm_›î©‹_p
 (SCM 
obj
);

200 
SCM_API
 
SCM
 
scm_vÆid_obje˘_¥o˚duª_p
 (SCM 
¥oc
);

201 
SCM_API
 
SCM
 
scm_£t_obje˘_¥o˚duª_x
 (SCM 
obj
, SCM 
¥oc
);

202 #ifde‡
GUILE_DEBUG


203 
SCM_API
 
SCM
 
scm_obje˘_¥o˚duª
 (SCM 
obj
);

205 
SCM_API
 
SCM
 
scm_make_˛ass_obje˘
 (SCM 
mëa˛ass
, SCM 
œyout
);

206 
SCM_API
 
SCM
 
scm_make_sub˛ass_obje˘
 (SCM 
c
, SCM 
œyout
);

208 
SCM_API
 
SCM
 
scm_i_make_˛ass_obje˘
 (SCM 
mëa˛ass
, SCM 
œyout_°rög
,

209 
Êags
);

210 
SCM_API
 
scm_öô_obje˘s
 ();

	@/usr/include/libguile/objprop.h

3 #i‚de‡
SCM_OBJPROP_H


4 
	#SCM_OBJPROP_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_obje˘_¥›îtõs
 (SCM 
obj
);

30 
SCM_API
 
SCM
 
scm_£t_obje˘_¥›îtõs_x
 (SCM 
obj
, SCM 
∂i°
);

31 
SCM_API
 
SCM
 
scm_obje˘_¥›îty
 (SCM 
obj
, SCM 
key
);

32 
SCM_API
 
SCM
 
scm_£t_obje˘_¥›îty_x
 (SCM 
obj
, SCM 
key
, SCM 
vÆ
);

33 
SCM_API
 
scm_öô_obj¥›
 ();

	@/usr/include/libguile/options.h

3 #i‚de‡
SCM_OPTIONS_H


4 
	#SCM_OPTIONS_H


	)

25 
	~"libguûe/__scm.h
"

29 
	sscm_t_›ti⁄


31 
	mty≥
;

32 c⁄° *
	m«me
;

33 
scm_t_bôs
 
	mvÆ
;

34 *
	mdoc
;

35 } 
	tscm_t_›ti⁄
;

38 
	#SCM_OPTION_BOOLEAN
 0

	)

39 
	#SCM_OPTION_INTEGER
 1

	)

40 
	#SCM_OPTION_SCM
 2

	)

43 
SCM_API
 
SCM
 
scm_›ti⁄s
 (SCM, 
scm_t_›ti⁄
 [], , const *);

44 
SCM_API
 
scm_öô_›ts
 (
	$SCM
 (*Ë(
SCM
), 
scm_t_›ti⁄
 [], 
n
);

45 
SCM_API
 
	`scm_öô_›ti⁄s
 ();

	@/usr/include/libguile/pairs.h

3 #i‚de‡
SCM_PAIRS_H


4 
	#SCM_PAIRS_H


	)

25 
	~"libguûe/__scm.h
"

29 #i‡(
SCM_DEBUG_PAIR_ACCESSES
 == 1)

30 
	#SCM_VALIDATE_PAIR
(
˚Œ
, 
ex¥
) \

31 ((!
	`scm_is_∑ú
 (
˚Œ
Ë? 
	`scm_îr‹_∑ú_ac˚ss
 (˚Œ), 0 : 0), (
ex¥
))

	)

33 
	#SCM_VALIDATE_PAIR
(
˚Œ
, 
ex¥
Ë”x¥)

	)

36 
	#scm_is_nuŒ
(
x
Ë(
	`scm_is_eq
 ((x), 
SCM_EOL
))

	)

38 
	#SCM_CAR
(
x
Ë(
	`SCM_VALIDATE_PAIR
 (x, 
	`SCM_CELL_OBJECT_0
 (x)))

	)

39 
	#SCM_CDR
(
x
Ë(
	`SCM_VALIDATE_PAIR
 (x, 
	`SCM_CELL_OBJECT_1
 (x)))

	)

41 
	#SCM_SETCAR
(
x
, 
v
Ë(
	`SCM_VALIDATE_PAIR
 (x, 
	`SCM_SET_CELL_OBJECT_0
 ((x), (v))))

	)

42 
	#SCM_SETCDR
(
x
, 
v
Ë(
	`SCM_VALIDATE_PAIR
 (x, 
	`SCM_SET_CELL_OBJECT_1
 ((x), (v))))

	)

44 
	#SCM_CAAR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (OBJ))

	)

45 
	#SCM_CDAR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (OBJ))

	)

46 
	#SCM_CADR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (OBJ))

	)

47 
	#SCM_CDDR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (OBJ))

	)

49 
	#SCM_CAAAR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (SCM_CAR (OBJ)))

	)

50 
	#SCM_CDAAR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CAR (OBJ)))

	)

51 
	#SCM_CADAR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CAR (OBJ)))

	)

52 
	#SCM_CDDAR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (
	`SCM_CAR
 (OBJ)))

	)

53 
	#SCM_CAADR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (
	`SCM_CDR
 (OBJ)))

	)

54 
	#SCM_CDADR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CDR (OBJ)))

	)

55 
	#SCM_CADDR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CDR (OBJ)))

	)

56 
	#SCM_CDDDR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (SCM_CDR (OBJ)))

	)

58 
	#SCM_CAAAAR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (SCM_CAR (SCM_CAR (OBJ))))

	)

59 
	#SCM_CDAAAR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CAR (SCM_CAR (OBJ))))

	)

60 
	#SCM_CADAAR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CAR (SCM_CAR (OBJ))))

	)

61 
	#SCM_CDDAAR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (
	`SCM_CAR
 (SCM_CAR (OBJ))))

	)

62 
	#SCM_CAADAR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (
	`SCM_CDR
 (SCM_CAR (OBJ))))

	)

63 
	#SCM_CDADAR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CDR (SCM_CAR (OBJ))))

	)

64 
	#SCM_CADDAR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CDR (SCM_CAR (OBJ))))

	)

65 
	#SCM_CDDDAR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (SCM_CDR (
	`SCM_CAR
 (OBJ))))

	)

66 
	#SCM_CAAADR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (SCM_CAR (
	`SCM_CDR
 (OBJ))))

	)

67 
	#SCM_CDAADR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CAR (SCM_CDR (OBJ))))

	)

68 
	#SCM_CADADR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CAR (SCM_CDR (OBJ))))

	)

69 
	#SCM_CDDADR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (
	`SCM_CAR
 (SCM_CDR (OBJ))))

	)

70 
	#SCM_CAADDR
(
OBJ
Ë
	`SCM_CAR
 (SCM_CAR (
	`SCM_CDR
 (SCM_CDR (OBJ))))

	)

71 
	#SCM_CDADDR
(
OBJ
Ë
	`SCM_CDR
 (
	`SCM_CAR
 (SCM_CDR (SCM_CDR (OBJ))))

	)

72 
	#SCM_CADDDR
(
OBJ
Ë
	`SCM_CAR
 (
	`SCM_CDR
 (SCM_CDR (SCM_CDR (OBJ))))

	)

73 
	#SCM_CDDDDR
(
OBJ
Ë
	`SCM_CDR
 (SCM_CDR (SCM_CDR (SCM_CDR (OBJ))))

	)

77 #i‡(
SCM_DEBUG_PAIR_ACCESSES
 == 1)

78 
SCM_API
 
scm_îr‹_∑ú_ac˚ss
 (
SCM
);

81 
SCM_API
 
SCM
 
scm_c⁄s
 (SCM 
x
, SCM 
y
);

82 
SCM_API
 
SCM
 
scm_c⁄s2
 (SCM 
w
, SCM 
x
, SCM 
y
);

83 
SCM_API
 
SCM
 
scm_∑ú_p
 (SCM 
x
);

84 
SCM_API
 
SCM
 
scm_ˇr
 (SCM 
x
);

85 
SCM_API
 
SCM
 
scm_cdr
 (SCM 
x
);

86 
SCM_API
 
SCM
 
scm_£t_ˇr_x
 (SCM 
∑ú
, SCM 
vÆue
);

87 
SCM_API
 
SCM
 
scm_£t_cdr_x
 (SCM 
∑ú
, SCM 
vÆue
);

89 
	#SCM_I_D_PAT
 0x02

	)

90 
	#SCM_I_A_PAT
 0x03

	)

91 
	#SCM_I_DD_PAT
 0x0®

	)

92 
	#SCM_I_DA_PAT
 0x0b

	)

93 
	#SCM_I_AD_PAT
 0x0ê

	)

94 
	#SCM_I_AA_PAT
 0x0‡

	)

95 
	#SCM_I_DDD_PAT
 0x2®

	)

96 
	#SCM_I_DDA_PAT
 0x2b

	)

97 
	#SCM_I_DAD_PAT
 0x2ê

	)

98 
	#SCM_I_DAA_PAT
 0x2‡

	)

99 
	#SCM_I_ADD_PAT
 0x3®

	)

100 
	#SCM_I_ADA_PAT
 0x3b

	)

101 
	#SCM_I_AAD_PAT
 0x3ê

	)

102 
	#SCM_I_AAA_PAT
 0x3‡

	)

103 
	#SCM_I_DDDD_PAT
 0xØ

	)

104 
	#SCM_I_DDDA_PAT
 0xab

	)

105 
	#SCM_I_DDAD_PAT
 0x´

	)

106 
	#SCM_I_DDAA_PAT
 0xa‡

	)

107 
	#SCM_I_DADD_PAT
 0xb®

	)

108 
	#SCM_I_DADA_PAT
 0xbb

	)

109 
	#SCM_I_DAAD_PAT
 0xbê

	)

110 
	#SCM_I_DAAA_PAT
 0xb‡

	)

111 
	#SCM_I_ADDD_PAT
 0xó

	)

112 
	#SCM_I_ADDA_PAT
 0xeb

	)

113 
	#SCM_I_ADAD_PAT
 0xì

	)

114 
	#SCM_I_ADAA_PAT
 0xe‡

	)

115 
	#SCM_I_AADD_PAT
 0xÁ

	)

116 
	#SCM_I_AADA_PAT
 0xfb

	)

117 
	#SCM_I_AAAD_PAT
 0x„

	)

118 
	#SCM_I_AAAA_PAT
 0xf‡

	)

120 
SCM_API
 
SCM
 
scm_i_cha£_∑ús
 (SCM 
x
, 
scm_t_uöt32
 
∑âîn
);

122 
	#scm_cddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DD_PAT
)

	)

123 
	#scm_cd¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DA_PAT
)

	)

124 
	#scm_ˇdr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AD_PAT
)

	)

125 
	#scm_ˇ¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AA_PAT
)

	)

126 
	#scm_cdddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDD_PAT
)

	)

127 
	#scm_cdd¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDA_PAT
)

	)

128 
	#scm_cdadr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DAD_PAT
)

	)

129 
	#scm_cdØr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DAA_PAT
)

	)

130 
	#scm_ˇddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADD_PAT
)

	)

131 
	#scm_ˇd¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADA_PAT
)

	)

132 
	#scm_ˇadr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AAD_PAT
)

	)

133 
	#scm_ˇØr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AAA_PAT
)

	)

134 
	#scm_cddddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDDD_PAT
)

	)

135 
	#scm_cddd¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDDA_PAT
)

	)

136 
	#scm_cddadr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDAD_PAT
)

	)

137 
	#scm_cddØr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DDAA_PAT
)

	)

138 
	#scm_cdaddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DADD_PAT
)

	)

139 
	#scm_cdad¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DADA_PAT
)

	)

140 
	#scm_cdØdr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DAAD_PAT
)

	)

141 
	#scm_cdØ¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_DAAA_PAT
)

	)

142 
	#scm_ˇdddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADDD_PAT
)

	)

143 
	#scm_ˇdd¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADDA_PAT
)

	)

144 
	#scm_ˇdadr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADAD_PAT
)

	)

145 
	#scm_ˇdØr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_ADAA_PAT
)

	)

146 
	#scm_ˇaddr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AADD_PAT
)

	)

147 
	#scm_ˇad¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AADA_PAT
)

	)

148 
	#scm_ˇØdr
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AAAD_PAT
)

	)

149 
	#scm_ˇØ¨
(
x
Ë
	`scm_i_cha£_∑ús
 ((x), 
SCM_I_AAAA_PAT
)

	)

151 
SCM_API
 
scm_öô_∑ús
 ();

	@/usr/include/libguile/ports.h

3 #i‚de‡
SCM_PORTS_H


4 
	#SCM_PORTS_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/¥öt.h
"

28 
	~"libguûe/°ru˘.h
"

29 
	~"libguûe/thªads.h
"

32 
	~<sys/ty≥s.h
>

36 
	#SCM_INITIAL_PUTBACK_BUF_SIZE
 4

	)

39 
	escm_t_p‹t_rw_a˘ive
 {

40 
	mSCM_PORT_NEITHER
 = 0,

41 
	mSCM_PORT_READ
 = 1,

42 
	mSCM_PORT_WRITE
 = 2

43 } 
	tscm_t_p‹t_rw_a˘ive
;

49 
SCM
 
	mp‹t
;

50 
	míåy
;

51 
	mªvóÀd
;

55 
scm_t_bôs
 
	m°ªam
;

57 
SCM
 
	mfûe_«me
;

58 
	mlöe_numbî
;

59 
	mcﬁumn_numbî
;

70 *
	mªad_buf
;

71 c⁄° *
	mªad_pos
;

72 *
	mªad_íd
;

73 
off_t
 
	mªad_buf_size
;

79 *
	mßved_ªad_buf
;

80 c⁄° *
	mßved_ªad_pos
;

81 *
	mßved_ªad_íd
;

82 
off_t
 
	mßved_ªad_buf_size
;

88 *
	mwrôe_buf
;

89 *
	mwrôe_pos
;

90 *
	mwrôe_íd
;

91 
off_t
 
	mwrôe_buf_size
;

93 
	msh‹tbuf
;

95 
	mrw_øndom
;

100 
scm_t_p‹t_rw_a˘ive
 
	mrw_a˘ive
;

108 *
	mputback_buf
;

109 
size_t
 
	mputback_buf_size
;

110 } 
	tscm_t_p‹t
;

112 
SCM_API
 
scm_t_p‹t
 **
	gscm_i_p‹t_èbÀ
;

113 
SCM_API
 
	gscm_i_p‹t_èbÀ_size
;

114 
SCM_API
 
scm_i_±hªad_muãx_t
 
	gscm_i_p‹t_èbÀ_muãx
;

116 
	#SCM_READ_BUFFER_EMPTY_P
(
c_p‹t
Ë(c_p‹t->
ªad_pos
 >c_p‹t->
ªad_íd
)

	)

120 
	#SCM_EOF_OBJECT_P
(
x
Ë(
	`scm_is_eq
 ((x), 
SCM_EOF_VAL
))

	)

127 
	#SCM_OPN
 (1L<<16Ë

	)

128 
	#SCM_RDNG
 (2L<<16Ë

	)

129 
	#SCM_WRTNG
 (4L<<16Ë

	)

130 
	#SCM_BUF0
 (8L<<16Ë

	)

131 
	#SCM_BUFLINE
 (64L<<16Ë

	)

133 
	#SCM_PORTP
(
x
Ë(!
	`SCM_IMP
 (xË&& (
	`SCM_TYP7
 (xË=
scm_tc7_p‹t
))

	)

134 
	#SCM_OPPORTP
(
x
Ë(!
	`SCM_IMP
(xË&& (((0x7‡| 
SCM_OPN
Ë& 
	`SCM_CELL_WORD_0
(x))==(
scm_tc7_p‹t
 | SCM_OPN)))

	)

135 
	#SCM_OPINPORTP
(
x
Ë(!
	`SCM_IMP
(xË&& (((0x7‡| 
SCM_OPN
 | 
SCM_RDNG
Ë& 
	`SCM_CELL_WORD_0
(x))==(
scm_tc7_p‹t
 | SCM_OPN | SCM_RDNG)))

	)

136 
	#SCM_OPOUTPORTP
(
x
Ë(!
	`SCM_IMP
(xË&& (((0x7‡| 
SCM_OPN
 | 
SCM_WRTNG
Ë& 
	`SCM_CELL_WORD_0
(x))==(
scm_tc7_p‹t
 | SCM_OPN | SCM_WRTNG)))

	)

137 
	#SCM_INPUT_PORT_P
(
x
) \

138 (!
	`SCM_IMP
(
x
) \

139 && (((0x7‡| 
SCM_RDNG
Ë& 
	`SCM_CELL_WORD_0
(
x
)Ë=(
scm_tc7_p‹t
 | SCM_RDNG)))

	)

140 
	#SCM_OUTPUT_PORT_P
(
x
) \

141 (!
	`SCM_IMP
(
x
) \

142 && (((0x7‡| 
SCM_WRTNG
Ë& 
	`SCM_CELL_WORD_0
(
x
))==(
scm_tc7_p‹t
 | SCM_WRTNG)))

	)

143 
	#SCM_OPENP
(
x
Ë(!
	`SCM_IMP
(xË&& (
SCM_OPN
 & 
	`SCM_CELL_WORD_0
 (x)))

	)

144 
	#SCM_CLOSEDP
(
x
Ë(!
	`SCM_OPENP
(x))

	)

145 
	#SCM_CLR_PORT_OPEN_FLAG
(
p
) \

146 
	`SCM_SET_CELL_WORD_0
 ((
p
), 
	`SCM_CELL_WORD_0
 (pË& ~
SCM_OPN
)

	)

148 
	#SCM_PTAB_ENTRY
(
x
Ë((
scm_t_p‹t
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

149 
	#SCM_SETPTAB_ENTRY
(
x
, 
ít
Ë(
	`SCM_SET_CELL_WORD_1
 ((x), (
scm_t_bôs
Ë”¡)))

	)

150 
	#SCM_STREAM
(
x
Ë(
	`SCM_PTAB_ENTRY
(x)->
°ªam
)

	)

151 
	#SCM_SETSTREAM
(
x
, 
s
Ë(
	`SCM_PTAB_ENTRY
(x)->
°ªam
 = (
scm_t_bôs
Ë(s))

	)

152 
	#SCM_FILENAME
(
x
Ë(
	`SCM_PTAB_ENTRY
(x)->
fûe_«me
)

	)

153 
	#SCM_SET_FILENAME
(
x
, 
n
Ë(
	`SCM_PTAB_ENTRY
(x)->
fûe_«me
 = (n))

	)

154 
	#SCM_LINUM
(
x
Ë(
	`SCM_PTAB_ENTRY
(x)->
löe_numbî
)

	)

155 
	#SCM_COL
(
x
Ë(
	`SCM_PTAB_ENTRY
(x)->
cﬁumn_numbî
)

	)

156 
	#SCM_REVEALED
(
x
Ë(
	`SCM_PTAB_ENTRY
(x)->
ªvóÀd
)

	)

157 
	#SCM_SETREVEALED
(
x
, 
s
Ë(
	`SCM_PTAB_ENTRY
(x)->
ªvóÀd
 = (s))

	)

159 
	#SCM_INCLINE
(
p‹t
Ë{
	`SCM_LINUM
 (p‹tË+1; 
	`SCM_COL
 (p‹tË0;}

	)

160 
	#SCM_ZEROCOL
(
p‹t
Ë{
	`SCM_COL
 (p‹tË0;}

	)

161 
	#SCM_INCCOL
(
p‹t
Ë{
	`SCM_COL
 (p‹tË+1;}

	)

162 
	#SCM_DECCOL
(
p‹t
Ë{i‡(
	`SCM_COL
 (p‹tË> 0ËSCM_COL (p‹tË-1;}

	)

163 
	#SCM_TABCOL
(
p‹t
Ë{
	`SCM_COL
 (p‹tË+8 - SCM_COL (p‹tË% 8;}

	)

168 
	sscm_t_±ob_des¸ùt‹


170 *
	m«me
;

171 
SCM
 (*
m¨k
Ë(
	mSCM
);

172 
size_t
 (*
‰ì
Ë(
	mSCM
);

173 (*
	m¥öt
Ë(
SCM
 
	mexp
, SCM 
	mp‹t
, 
scm_¥öt_°©e
 *
	mp°©e
);

174 
SCM
 (*
equÆp
Ë(
	mSCM
, SCM);

175 (*
	m˛o£
Ë(
SCM
 
	mp‹t
);

177 (*
	mwrôe
Ë(
SCM
 
	mp‹t
, c⁄° *
	md©a
, 
size_t
 
	msize
);

178 (*
	mÊush
Ë(
SCM
 
	mp‹t
);

180 (*
	míd_öput
Ë(
SCM
 
	mp‹t
, 
	moff£t
);

181 (*
	mfûl_öput
Ë(
SCM
 
	mp‹t
);

182 (*
	möput_waôög
Ë(
SCM
 
	mp‹t
);

184 
off_t
 (*
£ek
Ë(
SCM
 
	mp‹t
, off_à
	mOFFSET
, 
	mWHENCE
);

185 (*
	måunˇã
Ë(
SCM
 
	mp‹t
, 
off_t
 
	mÀngth
);

187 } 
	tscm_t_±ob_des¸ùt‹
;

189 
	#SCM_TC2PTOBNUM
(
x
Ë(0x0f‡& ((xË>> 8))

	)

190 
	#SCM_PTOBNUM
(
x
Ë(
	`SCM_TC2PTOBNUM
 (
	`SCM_CELL_TYPE
 (x)))

	)

192 
	#SCM_PTOBNAME
(
±obnum
Ë
scm_±obs
[±obnum].
«me


	)

196 
SCM_API
 
scm_t_±ob_des¸ùt‹
 *
	gscm_±obs
;

197 
SCM_API
 
	gscm_num±ob
;

198 
SCM_API
 
	gscm_i_p‹t_èbÀ_room
;

202 
SCM_API
 
SCM
 
scm_m¨k°ªam
 (SCM 
±r
);

203 
SCM_API
 
scm_t_bôs
 
scm_make_p‹t_ty≥
 (*
«me
,

204 (*
fûl_öput
Ë(
SCM
 
p‹t
),

205 (*
wrôe
Ë(
SCM
 
p‹t
,

206 c⁄° *
d©a
,

207 
size_t
 
size
));

208 
SCM_API
 
	`scm_£t_p‹t_m¨k
 (
scm_t_bôs
 
tc
, 
	$SCM
 (*
m¨k
Ë(
SCM
));

209 
SCM_API
 
	`scm_£t_p‹t_‰ì
 (
scm_t_bôs
 
tc
, 
	$size_t
 (*
‰ì
Ë(
SCM
));

210 
SCM_API
 
	`scm_£t_p‹t_¥öt
 (
scm_t_bôs
 
tc
,

211 (*
¥öt
Ë(
SCM
 
exp
,

212 
SCM
 
p‹t
,

213 
scm_¥öt_°©e
 *
p°©e
));

214 
SCM_API
 
	`scm_£t_p‹t_equÆp
 (
scm_t_bôs
 
tc
, 
	$SCM
 (*
equÆp
Ë(
SCM
, SCM));

215 
SCM_API
 
	`scm_£t_p‹t_˛o£
 (
scm_t_bôs
 
tc
, (*
˛o£
Ë(
SCM
));

217 
SCM_API
 
	`scm_£t_p‹t_Êush
 (
scm_t_bôs
 
tc
,

218 (*
Êush
Ë(
SCM
 
p‹t
));

219 
SCM_API
 
	`scm_£t_p‹t_íd_öput
 (
scm_t_bôs
 
tc
,

220 (*
íd_öput
Ë(
SCM
 
p‹t
,

221 
off£t
));

222 
SCM_API
 
	`scm_£t_p‹t_£ek
 (
scm_t_bôs
 
tc
,

223 
	$off_t
 (*
£ek
Ë(
SCM
 
p‹t
,

224 
off_t
 
OFFSET
,

225 
WHENCE
));

226 
SCM_API
 
	`scm_£t_p‹t_åunˇã
 (
scm_t_bôs
 
tc
,

227 (*
åunˇã
Ë(
SCM
 
p‹t
,

228 
off_t
 
Àngth
));

229 
SCM_API
 
	`scm_£t_p‹t_öput_waôög
 (
scm_t_bôs
 
tc
, (*
öput_waôög
Ë(
SCM
));

230 
SCM_API
 
SCM
 
	`scm_ch¨_ªady_p
 (SCM 
p‹t
);

231 
size_t
 
	`scm_èke_‰om_öput_buf„rs
 (
SCM
 
p‹t
, *
de°
, size_à
ªad_Àn
);

232 
SCM_API
 
SCM
 
	`scm_døö_öput
 (SCM 
p‹t
);

233 
SCM_API
 
SCM
 
	`scm_cuºít_öput_p‹t
 ();

234 
SCM_API
 
SCM
 
	`scm_cuºít_ouçut_p‹t
 ();

235 
SCM_API
 
SCM
 
	`scm_cuºít_îr‹_p‹t
 ();

236 
SCM_API
 
SCM
 
	`scm_cuºít_lﬂd_p‹t
 ();

237 
SCM_API
 
SCM
 
	`scm_£t_cuºít_öput_p‹t
 (SCM 
p‹t
);

238 
SCM_API
 
SCM
 
	`scm_£t_cuºít_ouçut_p‹t
 (SCM 
p‹t
);

239 
SCM_API
 
SCM
 
	`scm_£t_cuºít_îr‹_p‹t
 (SCM 
p‹t
);

240 
SCM_API
 
	`scm_dynwöd_cuºít_öput_p‹t
 (
SCM
 
p‹t
);

241 
SCM_API
 
	`scm_dynwöd_cuºít_ouçut_p‹t
 (
SCM
 
p‹t
);

242 
SCM_API
 
	`scm_dynwöd_cuºít_îr‹_p‹t
 (
SCM
 
p‹t
);

243 
SCM_API
 
SCM
 
	`scm_√w_p‹t_èbÀ_íåy
 (
scm_t_bôs
 
èg
);

244 
SCM_API
 
	`scm_ªmove_‰om_p‹t_èbÀ
 (
SCM
 
p‹t
);

245 
SCM_API
 
	`scm_grow_p‹t_cbuf
 (
SCM
 
p‹t
, 
size_t
 
ªque°ed
);

246 
SCM_API
 
SCM
 
	`scm_±_size
 ();

247 
SCM_API
 
SCM
 
	`scm_±_membî
 (SCM 
membî
);

248 
SCM_API
 
	`scm_p‹t_n⁄_buf„r
 (
scm_t_p‹t
 *
±
);

249 
SCM_API
 
	`scm_ªvóÀd_cou¡
 (
SCM
 
p‹t
);

250 
SCM_API
 
SCM
 
	`scm_p‹t_ªvóÀd
 (SCM 
p‹t
);

251 
SCM_API
 
SCM
 
	`scm_£t_p‹t_ªvóÀd_x
 (SCM 
p‹t
, SCM 
rcou¡
);

252 
SCM_API
 
	`scm_mode_bôs
 (*
modes
);

253 
SCM_API
 
SCM
 
	`scm_p‹t_mode
 (SCM 
p‹t
);

254 
SCM_API
 
SCM
 
	`scm_˛o£_öput_p‹t
 (SCM 
p‹t
);

255 
SCM_API
 
SCM
 
	`scm_˛o£_ouçut_p‹t
 (SCM 
p‹t
);

256 
SCM_API
 
SCM
 
	`scm_˛o£_p‹t
 (SCM 
p‹t
);

257 
SCM_API
 
SCM
 
	`scm_p‹t_f‹_óch
 (SCM 
¥oc
);

258 
SCM_API
 
	`scm_c_p‹t_f‹_óch
 ((*
¥oc
)(*
d©a
, 
SCM
 
p
), *data);

259 
SCM_API
 
SCM
 
	`scm_öput_p‹t_p
 (SCM 
x
);

260 
SCM_API
 
SCM
 
	`scm_ouçut_p‹t_p
 (SCM 
x
);

261 
SCM_API
 
SCM
 
	`scm_p‹t_p
 (SCM 
x
);

262 
SCM_API
 
SCM
 
	`scm_p‹t_˛o£d_p
 (SCM 
p‹t
);

263 
SCM_API
 
SCM
 
	`scm_eof_obje˘_p
 (SCM 
x
);

264 
SCM_API
 
SCM
 
	`scm_f‹˚_ouçut
 (SCM 
p‹t
);

265 
SCM_API
 
SCM
 
	`scm_Êush_Æl_p‹ts
 ();

266 
SCM_API
 
SCM
 
	`scm_ªad_ch¨
 (SCM 
p‹t
);

267 
SCM_API
 
size_t
 
	`scm_c_ªad
 (
SCM
 
p‹t
, *
buf„r
, size_à
size
);

268 
SCM_API
 
	`scm_c_wrôe
 (
SCM
 
p‹t
, c⁄° *
buf„r
, 
size_t
 
size
);

269 
SCM_API
 
	`scm_lfwrôe
 (c⁄° *
±r
, 
size_t
 
size
, 
SCM
 
p‹t
);

270 
SCM_API
 
	`scm_Êush
 (
SCM
 
p‹t
);

271 
SCM_API
 
	`scm_íd_öput
 (
SCM
 
p‹t
);

272 
SCM_API
 
	`scm_fûl_öput
 (
SCM
 
p‹t
);

273 
SCM_API
 
	`scm_ungëc
 (
c
, 
SCM
 
p‹t
);

274 
SCM_API
 
	`scm_ungës
 (c⁄° *
s
, 
n
, 
SCM
 
p‹t
);

275 
SCM_API
 
SCM
 
	`scm_≥ek_ch¨
 (SCM 
p‹t
);

276 
SCM_API
 
SCM
 
	`scm_uƒód_ch¨
 (SCM 
cobj
, SCM 
p‹t
);

277 
SCM_API
 
SCM
 
	`scm_uƒód_°rög
 (SCM 
°r
, SCM 
p‹t
);

278 
SCM_API
 
SCM
 
	`scm_£ek
 (SCM 
obje˘
, SCM 
off£t
, SCM 
whí˚
);

279 
SCM_API
 
SCM
 
	`scm_åunˇã_fûe
 (SCM 
obje˘
, SCM 
Àngth
);

280 
SCM_API
 
SCM
 
	`scm_p‹t_löe
 (SCM 
p‹t
);

281 
SCM_API
 
SCM
 
	`scm_£t_p‹t_löe_x
 (SCM 
p‹t
, SCM 
löe
);

282 
SCM_API
 
SCM
 
	`scm_p‹t_cﬁumn
 (SCM 
p‹t
);

283 
SCM_API
 
SCM
 
	`scm_£t_p‹t_cﬁumn_x
 (SCM 
p‹t
, SCM 
löe
);

284 
SCM_API
 
SCM
 
	`scm_p‹t_fûíame
 (SCM 
p‹t
);

285 
SCM_API
 
SCM
 
	`scm_£t_p‹t_fûíame_x
 (SCM 
p‹t
, SCM 
fûíame
);

286 
SCM_API
 
	`scm_p‹t_¥öt
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *);

287 
SCM_API
 
	`scm_¥öt_p‹t_mode
 (
SCM
 
exp
, SCM 
p‹t
);

288 
SCM_API
 
	`scm_p‹ts_¥ehi°‹y
 ();

289 
SCM_API
 
SCM
 
	`scm_void_p‹t
 (* 
mode_°r
);

290 
SCM_API
 
SCM
 
	`scm_sys_make_void_p‹t
 (SCM 
mode
);

291 
SCM_API
 
	`scm_öô_p‹ts
 ();

294 #i‡
SCM_ENABLE_DEPRECATED
==1

295 
SCM_API
 
scm_t_p‹t
 * 
	`scm_add_to_p‹t_èbÀ
 (
SCM
 
p‹t
);

298 #ifde‡
GUILE_DEBUG


299 
SCM_API
 
SCM
 
	`scm_±_size
 ();

300 
SCM_API
 
SCM
 
	`scm_±_membî
 (SCM 
membî
);

305 
SCM_API
 
	`scm_i_mode_bôs
 (
SCM
 
modes
);

306 
SCM_API
 
	`scm_i_dynwöd_cuºít_lﬂd_p‹t
 (
SCM
 
p‹t
);

	@/usr/include/libguile/posix.h

3 #i‚de‡
SCM_POSIX_H


4 
	#SCM_POSIX_H


	)

25 
	~"libguûe/__scm.h
"

32 
SCM_API
 
SCM
 
scm_tc£çgΩ
 (SCM 
p‹t
, SCM 
pgid
);

33 
SCM_API
 
SCM
 
scm_tcgëpgΩ
 (SCM 
p‹t
);

34 
SCM_API
 
SCM
 
scm_˘îmid
 ();

35 
SCM_API
 
SCM
 
scm_£tsid
 ();

36 
SCM_API
 
SCM
 
scm_£çgid
 (SCM 
pid
, SCM 
pgid
);

37 
SCM_API
 
SCM
 
scm_pùe
 ();

38 
SCM_API
 
SCM
 
scm_gëgroups
 ();

39 
SCM_API
 
SCM
 
scm_£tgroups
 (SCM 
groups
);

40 
SCM_API
 
SCM
 
scm_gëpgΩ
 ();

41 
SCM_API
 
SCM
 
scm_gëpwuid
 (SCM 
u£r
);

42 
SCM_API
 
SCM
 
scm_£çwít
 (SCM 
¨g
);

43 
SCM_API
 
SCM
 
scm_gëgrgid
 (SCM 
«me
);

44 
SCM_API
 
SCM
 
scm_£tgª¡
 (SCM 
¨g
);

45 
SCM_API
 
SCM
 
scm_kûl
 (SCM 
pid
, SCM 
sig
);

46 
SCM_API
 
SCM
 
scm_waôpid
 (SCM 
pid
, SCM 
›ti⁄s
);

47 
SCM_API
 
SCM
 
scm_°©us_exô_vÆ
 (SCM 
°©us
);

48 
SCM_API
 
SCM
 
scm_°©us_ãrm_sig
 (SCM 
°©us
);

49 
SCM_API
 
SCM
 
scm_°©us_°›_sig
 (SCM 
°©us
);

50 
SCM_API
 
SCM
 
scm_gëµid
 ();

51 
SCM_API
 
SCM
 
scm_gëuid
 ();

52 
SCM_API
 
SCM
 
scm_gëgid
 ();

53 
SCM_API
 
SCM
 
scm_gëeuid
 ();

54 
SCM_API
 
SCM
 
scm_gëegid
 ();

55 
SCM_API
 
SCM
 
scm_£tuid
 (SCM 
uid
);

56 
SCM_API
 
SCM
 
scm_£tgid
 (SCM 
gid
);

57 
SCM_API
 
SCM
 
scm_£ãuid
 (SCM 
euid
);

58 
SCM_API
 
SCM
 
scm_£ãgid
 (SCM 
egid
);

59 
SCM_API
 
SCM
 
scm_ây«me
 (SCM 
p‹t
);

60 
SCM_API
 
SCM
 
scm_exe˛
 (SCM 
fûíame
, SCM 
¨gs
);

61 
SCM_API
 
SCM
 
scm_exe˛p
 (SCM 
fûíame
, SCM 
¨gs
);

62 
SCM_API
 
SCM
 
scm_exe˛e
 (SCM 
fûíame
, SCM 
ív
, SCM 
¨gs
);

63 
SCM_API
 
SCM
 
scm_f‹k
 ();

64 
SCM_API
 
SCM
 
scm_u«me
 ();

65 
SCM_API
 
SCM
 
scm_ívú⁄
 (SCM 
ív
);

66 
SCM_API
 
SCM
 
scm_tm≤am
 ();

67 
SCM_API
 
SCM
 
scm_mk°emp
 (SCM 
tm∂
);

68 
SCM_API
 
SCM
 
scm_›í_pùe
 (SCM 
pùe°r
, SCM 
modes
);

69 
SCM_API
 
SCM
 
scm_˛o£_pùe
 (SCM 
p‹t
);

70 
SCM_API
 
SCM
 
scm_utime
 (SCM 
∑th«me
, SCM 
a˘ime
, SCM 
modtime
);

71 
SCM_API
 
SCM
 
scm_ac˚ss
 (SCM 
∑th
, SCM 
how
);

72 
SCM_API
 
SCM
 
scm_gëpid
 ();

73 
SCM_API
 
SCM
 
scm_puãnv
 (SCM 
°r
);

74 
SCM_API
 
SCM
 
scm_£éoˇÀ
 (SCM 
ˇãg‹y
, SCM 
loˇÀ
);

75 
SCM_API
 
SCM
 
scm_mknod
 (SCM 
∑th
, SCM 
ty≥
, SCM 
≥rms
, SCM 
dev
);

76 
SCM_API
 
SCM
 
scm_ni˚
 (SCM 
ö¸
);

77 
SCM_API
 
SCM
 
scm_sync
 ();

78 
SCM_API
 
SCM
 
scm_¸y±
 (SCM 
key
, SCM 
ß…
);

79 
SCM_API
 
SCM
 
scm_chroŸ
 (SCM 
∑th
);

80 
SCM_API
 
SCM
 
scm_gëlogö
 ();

81 
SCM_API
 
SCM
 
scm_cu£rid
 ();

82 
SCM_API
 
SCM
 
scm_gë¥i‹ôy
 (SCM 
which
, SCM 
who
);

83 
SCM_API
 
SCM
 
scm_£çri‹ôy
 (SCM 
which
, SCM 
who
, SCM 
¥io
);

84 
SCM_API
 
SCM
 
scm_gë∑ss
 (SCM 
¥om±
);

85 
SCM_API
 
SCM
 
scm_Êock
 (SCM 
fûe
, SCM 
›î©i⁄
);

86 
SCM_API
 
SCM
 
scm_£tho°«me
 (SCM 
«me
);

87 
SCM_API
 
SCM
 
scm_gëho°«me
 ();

88 
SCM_API
 
scm_öô_posix
 ();

	@/usr/include/libguile/print.h

3 #i‚de‡
SCM_PRINT_H


4 
	#SCM_PRINT_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/›ti⁄s.h
"

29 
SCM_API
 
scm_t_›ti⁄
 
	gscm_¥öt_›ts
[];

31 
	#SCM_PRINT_CLOSURE
 (
	`SCM_PACK
 (
scm_¥öt_›ts
[0].
vÆ
))

	)

32 
	#SCM_PRINT_SOURCE_P
 ((Ë
scm_¥öt_›ts
[1].
vÆ
)

	)

33 
	#SCM_PRINT_HIGHLIGHT_PREFIX
 (
	`SCM_PACK
 (
scm_¥öt_›ts
[2].
vÆ
))

	)

34 
	#SCM_PRINT_HIGHLIGHT_SUFFIX
 (
	`SCM_PACK
 (
scm_¥öt_›ts
[3].
vÆ
))

	)

35 
	#SCM_PRINT_KEYWORD_STYLE_I
 4

	)

36 
	#SCM_PRINT_KEYWORD_STYLE
 (
	`SCM_PACK
 (
scm_¥öt_›ts
[4].
vÆ
))

	)

37 
	#SCM_N_PRINT_OPTIONS
 5

	)

41 
	#SCM_PRINT_STATE_P
(
obj
Ë(
	`SCM_STRUCTP
(obj) \

42 && (
	`scm_is_eq
 (
	`SCM_STRUCT_VTABLE
(
obj
), \

43 
scm_¥öt_°©e_vèbÀ
)))

	)

44 
	#SCM_PRINT_STATE
(
obj
Ë((
scm_¥öt_°©e
 *Ë
	`SCM_STRUCT_DATA
 (obj))

	)

46 
	#RESET_PRINT_STATE
(
p°©e
) \

48 
p°©e
->
li°_off£t
 = 0; \

49 
p°©e
->
t›
 = 0; \

50 } 0)

	)

52 
	#SCM_WRITINGP
(
p°©e
Ë(’°©e)->
wrôögp
)

	)

53 
	#SCM_SET_WRITINGP
(
p°©e
, 
x
Ë{ (p°©e)->
wrôögp
 = (x); }

	)

55 
	#SCM_PORT_WITH_PS_P
(
p
Ë
	`SCM_TYP16_PREDICATE
 (
scm_tc16_p‹t_wôh_ps
,Ö)

	)

56 
	#SCM_PORT_WITH_PS_PORT
(
p
Ë
	`SCM_CAR
 (
	`SCM_CELL_OBJECT_1
 (p))

	)

57 
	#SCM_PORT_WITH_PS_PS
(
p
Ë
	`SCM_CDR
 (
	`SCM_CELL_OBJECT_1
 (p))

	)

59 
	#SCM_COERCE_OUTPORT
(
p
) \

60 (
	`SCM_PORT_WITH_PS_P
 (
p
Ë? 
	`SCM_PORT_WITH_PS_PORT
 (pË:Ö)

	)

62 
	#SCM_PRINT_STATE_LAYOUT
 "§uwuwuwuwuwpwuwuwuΩΩw"

	)

63 
	sscm_¥öt_°©e
 {

64 
SCM
 
	mh™dÀ
;

65 
	mªvóÀd
;

66 
	mwrôögp
;

67 
	mÁncyp
;

68 
	mÀvñ
;

69 
	mÀngth
;

70 
SCM
 
	mhŸ_ªf
;

71 
	mli°_off£t
;

72 
	mt›
;

73 
	m˚ûög
;

74 
SCM
 
	mªf_ve˘
;

77 
SCM
 
	mhighlight_obje˘s
;

78 } 
	tscm_¥öt_°©e
;

80 
SCM_API
 
SCM
 
	gscm_¥öt_°©e_vèbÀ
;

82 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_p‹t_wôh_ps
;

84 
SCM_API
 
SCM
 
scm_¥öt_›ti⁄s
 (SCM 
£âög
);

85 
SCM_API
 
SCM
 
scm_make_¥öt_°©e
 ();

86 
SCM_API
 
scm_‰ì_¥öt_°©e
 (
SCM
 
¥öt_°©e
);

87 
SCM
 
scm_i_p‹t_wôh_¥öt_°©e
 (SCM 
p‹t
, SCM 
¥öt_°©e
);

88 
SCM_API
 
scm_öçröt
 (
scm_t_ötmax
 
n
, 
ødix
, 
SCM
 
p‹t
);

89 
SCM_API
 
scm_uöçröt
 (
scm_t_uötmax
 
n
, 
ødix
, 
SCM
 
p‹t
);

90 
SCM_API
 
scm_ùruk
 (*
hdr
, 
SCM
 
±r
, SCM 
p‹t
);

91 
SCM_API
 
scm_ùæi°
 (*
hdr
, 
SCM
 
exp
, 
ér
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

92 
SCM_API
 
scm_¥öt_symbﬁ_«me
 (c⁄° *
°r
, 
size_t
 
Àn
, 
SCM
 
p‹t
);

93 
SCM_API
 
scm_¥ö1
 (
SCM
 
exp
, SCM 
p‹t
, 
wrôögp
);

94 
SCM_API
 
scm_ùrö1
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

95 
SCM_API
 
SCM
 
scm_wrôe
 (SCM 
obj
, SCM 
p‹t
);

96 
SCM_API
 
SCM
 
scm_di•œy
 (SCM 
obj
, SCM 
p‹t
);

97 
SCM_API
 
SCM
 
scm_sim∂e_f‹m©
 (SCM 
p‹t
, SCM 
mesßge
, SCM 
¨gs
);

98 
SCM_API
 
SCM
 
scm_√wlöe
 (SCM 
p‹t
);

99 
SCM_API
 
SCM
 
scm_wrôe_ch¨
 (SCM 
chr
, SCM 
p‹t
);

100 
SCM_API
 
SCM
 
scm_¥öãr_≠∂y
 (SCM 
¥oc
, SCM 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *);

101 
SCM_API
 
SCM
 
scm_p‹t_wôh_¥öt_°©e
 (SCM 
p‹t
, SCM 
p°©e
);

102 
SCM_API
 
SCM
 
scm_gë_¥öt_°©e
 (SCM 
p‹t
);

103 
SCM_API
 
scm_vÆid_›‹t_vÆue_p
 (
SCM
 
vÆ
);

104 
SCM_API
 
scm_öô_¥öt
 ();

106 #ifde‡
GUILE_DEBUG


107 
SCM_API
 
SCM
 
scm_cuºít_p°©e
 ();

	@/usr/include/libguile/procprop.h

3 #i‚de‡
SCM_PROCPROP_H


4 
	#SCM_PROCPROP_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
	gscm_sym_«me
;

30 
SCM_API
 
SCM
 
	gscm_sym_¨ôy
;

31 
SCM_API
 
SCM
 
	gscm_sym_sy°em_¥o˚duª
;

35 
SCM_API
 
SCM
 
scm_i_¥o˚duª_¨ôy
 (SCM 
¥oc
);

36 
SCM_API
 
SCM
 
scm_¥o˚duª_¥›îtõs
 (SCM 
¥oc
);

37 
SCM_API
 
SCM
 
scm_£t_¥o˚duª_¥›îtõs_x
 (SCM 
¥oc
, SCM 
√w_vÆ
);

38 
SCM_API
 
SCM
 
scm_¥o˚duª_¥›îty
 (SCM 
p
, SCM 
k
);

39 
SCM_API
 
SCM
 
scm_£t_¥o˚duª_¥›îty_x
 (SCM 
p
, SCM 
k
, SCM 
v
);

40 
SCM_API
 
scm_öô_¥o˝r›
 ();

	@/usr/include/libguile/procs.h

3 #i‚de‡
SCM_PROCS_H


4 
	#SCM_PROCS_H


	)

25 
	~"libguûe/__scm.h
"

35 
SCM
 
	mh™dÀ
;

36 
SCM
 
	m«me
;

37 
SCM
 *
	mgíîic
;

40 
SCM
 
	m¥›îtõs
;

41 } 
	tscm_t_subr_íåy
;

43 
	#SCM_SUBRNUM
(
subr
Ë(
	`SCM_CELL_WORD_0
 (subrË>> 8)

	)

44 
	#SCM_SET_SUBRNUM
(
subr
, 
num
) \

45 
	`SCM_SET_CELL_WORD_0
 (
subr
, (
num
 << 8Ë+ 
	`SCM_TYP7
 (subr))

	)

46 
	#SCM_SUBR_ENTRY
(
x
Ë(
scm_subr_èbÀ
[
	`SCM_SUBRNUM
 (x)])

	)

47 
	#SCM_SNAME
(
x
Ë(
	`SCM_SUBR_ENTRY
 (x).
«me
)

	)

48 
	#SCM_SUBRF
(
x
Ë((
	`SCM
 (*)()Ë
	`SCM_CELL_WORD_1
 (x))

	)

49 
	#SCM_SET_SUBRF
(
x
, 
v
Ë(
	`SCM_SET_CELL_WORD_1
 ((x), (v)))

	)

50 
	#SCM_DSUBRF
(
x
Ë(((*)()Ë
	`SCM_CELL_WORD_1
 (x))

	)

51 
	#SCM_SUBR_PROPS
(
x
Ë(
	`SCM_SUBR_ENTRY
 (x).
¥›îtõs
)

	)

52 
	#SCM_SUBR_GENERIC
(
x
Ë(
	`SCM_SUBR_ENTRY
 (x).
gíîic
)

	)

54 
	#SCM_CCLO_LENGTH
(
x
Ë(
	`SCM_CELL_WORD_0
 (xË>> 8)

	)

55 
	#SCM_MAKE_CCLO_TAG
(
v
Ë(((vË<< 8Ë+ 
scm_tc7_c˛o
)

	)

56 
	#SCM_SET_CCLO_LENGTH
(
x
, 
v
Ë(
	`SCM_SET_CELL_WORD_0
 ((x), 
	`SCM_MAKE_CCLO_TAG
(v)))

	)

57 
	#SCM_CCLO_BASE
(
x
Ë((
scm_t_bôs
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

58 
	#SCM_SET_CCLO_BASE
(
x
, 
v
Ë(
	`SCM_SET_CELL_WORD_1
 ((x), (v)))

	)

60 
	#SCM_CCLO_REF
(
x
, 
i
Ë(
	`SCM_PACK
 (
	`SCM_CCLO_BASE
 (xË[i]))

	)

61 
	#SCM_CCLO_SET
(
x
, 
i
, 
v
Ë(
	`SCM_CCLO_BASE
 (xË[i] = 
	`SCM_UNPACK
 (v))

	)

63 
	#SCM_CCLO_SUBR
(
x
Ë(
	`SCM_CCLO_REF
 ((x), 0))

	)

64 
	#SCM_SET_CCLO_SUBR
(
x
, 
v
Ë(
	`SCM_CCLO_SET
 ((x), 0, (v)))

	)

69 
	#SCM_CLOSUREP
(
x
Ë(!
	`SCM_IMP
(xË&& (
	`SCM_TYP3
 (xË=
scm_tc3_˛osuª
))

	)

70 
	#SCM_CLOSCAR
(
x
Ë
	`SCM_PACK
 (
	`SCM_CELL_WORD_0
 (xË- 
scm_tc3_˛osuª
)

	)

71 
	#SCM_CODE
(
x
Ë
	`SCM_CAR
 (
	`SCM_CLOSCAR
 (x))

	)

72 
	#SCM_CLOSURE_FORMALS
(
x
Ë
	`SCM_CAR
 (
	`SCM_CODE
 (x))

	)

73 
	#SCM_CLOSURE_BODY
(
x
Ë
	`SCM_CDR
 (
	`SCM_CODE
 (x))

	)

74 
	#SCM_PROCPROPS
(
x
Ë
	`SCM_CDR
 (
	`SCM_CLOSCAR
 (x))

	)

75 
	#SCM_SETPROCPROPS
(
x
, 
p
Ë
	`SCM_SETCDR
 (
	`SCM_CLOSCAR
 (x),Ö)

	)

76 
	#SCM_SETCODE
(
x
, 
e
Ë(
	`SCM_SET_CELL_WORD_0
 (x, 
	`SCM_UNPACK
 (
	`scm_c⁄s
 (”), 
SCM_EOL
)) \

77 + 
scm_tc3_˛osuª
))

	)

78 
	#SCM_ENV
(
x
Ë
	`SCM_CELL_OBJECT_1
 (x)

	)

79 
	#SCM_SETENV
(
x
, 
e
Ë
	`SCM_SET_CELL_OBJECT_1
 ((x), (e))

	)

80 
	#SCM_TOP_LEVEL
(
ENV
Ë(
	`scm_is_nuŒ
 (ENVË|| (
	`scm_is_åue
 (
	`scm_¥o˚duª_p
 (
	`SCM_CAR
 (ENV)))))

	)

129 
	#SCM_PROCEDURE_WITH_SETTER_P
(
obj
Ë(!
	`SCM_IMP
(objË&& (
	`SCM_TYP7
 (objË=
scm_tc7_pws
))

	)

130 
	#SCM_PROCEDURE
(
obj
Ë
	`SCM_CELL_OBJECT_1
 (obj)

	)

131 
	#SCM_SETTER
(
obj
Ë
	`SCM_CELL_OBJECT_2
 (obj)

	)

133 
SCM_API
 
scm_t_subr_íåy
 *
	gscm_subr_èbÀ
;

134 
SCM_API
 
	gscm_subr_èbÀ_size
;

135 
SCM_API
 
	gscm_subr_èbÀ_room
;

139 
SCM_API
 
scm_m¨k_subr_èbÀ
 ();

140 
SCM_API
 
scm_‰ì_subr_íåy
 (
SCM
 
subr
);

141 
SCM_API
 
SCM
 
scm_c_make_subr
 (c⁄° *
«me
, 
ty≥
, SCM (*
f˙
)());

142 
SCM_API
 
SCM
 
scm_c_make_subr_wôh_gíîic
 (c⁄° *
«me
, 
ty≥
,

143 
SCM
 (*
f˙
)(), SCM *
gf
);

144 
SCM_API
 
SCM
 
scm_c_deföe_subr
 (c⁄° *
«me
, 
ty≥
, SCM (*
f˙
)());

145 
SCM_API
 
SCM
 
scm_c_deföe_subr_wôh_gíîic
 (c⁄° *
«me
, 
ty≥
,

146 
SCM
 (*
f˙
)(), SCM *
gf
);

147 
SCM_API
 
SCM
 
scm_makc˛o
 (SCM 
¥oc
, 
size_t
 
Àn
);

148 
SCM_API
 
SCM
 
scm_¥o˚duª_p
 (SCM 
obj
);

149 
SCM_API
 
SCM
 
scm_˛osuª_p
 (SCM 
obj
);

150 
SCM_API
 
SCM
 
scm_thunk_p
 (SCM 
obj
);

151 
SCM_API
 
scm_subr_p
 (
SCM
 
obj
);

152 
SCM_API
 
SCM
 
scm_¥o˚duª_documíèti⁄
 (SCM 
¥oc
);

153 
SCM_API
 
SCM
 
scm_¥o˚duª_wôh_£âî_p
 (SCM 
obj
);

154 
SCM_API
 
SCM
 
scm_make_¥o˚duª_wôh_£âî
 (SCM 
¥o˚duª
, SCM 
£âî
);

155 
SCM_API
 
SCM
 
scm_¥o˚duª
 (SCM 
¥oc
);

156 
SCM_API
 
SCM
 
scm_£âî
 (SCM 
¥oc
);

157 
SCM_API
 
scm_öô_subr_èbÀ
 ();

158 
SCM_API
 
scm_öô_¥ocs
 ();

160 #ifde‡
GUILE_DEBUG


161 
SCM_API
 
SCM
 
scm_make_c˛o
 (SCM 
¥oc
, SCM 
Àn
);

	@/usr/include/libguile/properties.h

3 #i‚de‡
SCM_PROPERTIES_H


4 
	#SCM_PROPERTIES_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
scm_¥imôive_make_¥›îty
 (SCM 
nŸ_found_¥oc
);

28 
SCM_API
 
SCM
 
scm_¥imôive_¥›îty_ªf
 (SCM 
¥›
, SCM 
obj
);

29 
SCM_API
 
SCM
 
scm_¥imôive_¥›îty_£t_x
 (SCM 
¥›
, SCM 
obj
, SCM 
vÆ
);

30 
SCM_API
 
SCM
 
scm_¥imôive_¥›îty_dñ_x
 (SCM 
¥›
, SCM 
obj
);

32 
SCM_API
 
scm_öô_¥›îtõs
 ();

	@/usr/include/libguile/ramap.h

3 #i‚de‡
SCM_RAMAP_H


4 
	#SCM_RAMAP_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
scm_ø_m©chp
 (
SCM
 
ø0
, SCM 
øs
);

30 
SCM_API
 
scm_øm≠c
 ((*
˝roc
Ë(), 
SCM
 
d©a
, SCM 
ø0
, SCM 
Ãa
,

31 c⁄° *
wh©
);

32 
SCM_API
 
scm_¨øy_fûl_öt
 (
SCM
 
ø
, SCM 
fûl
, SCM 
ign‹e
);

33 
SCM_API
 
SCM
 
scm_¨øy_fûl_x
 (SCM 
ø
, SCM 
fûl
);

34 
SCM_API
 
SCM
 
scm_¨øy_c›y_x
 (SCM 
§c
, SCM 
d°
);

35 
SCM_API
 
scm_ø_eqp
 (
SCM
 
ø0
, SCM 
øs
);

36 
SCM_API
 
scm_ø_Às•
 (
SCM
 
ø0
, SCM 
øs
);

37 
SCM_API
 
scm_ø_Àqp
 (
SCM
 
ø0
, SCM 
øs
);

38 
SCM_API
 
scm_ø_gΩ
 (
SCM
 
ø0
, SCM 
øs
);

39 
SCM_API
 
scm_ø_gªqp
 (
SCM
 
ø0
, SCM 
øs
);

40 
SCM_API
 
scm_ø_sum
 (
SCM
 
ø0
, SCM 
øs
);

41 
SCM_API
 
scm_ø_dif„ªn˚
 (
SCM
 
ø0
, SCM 
øs
);

42 
SCM_API
 
scm_ø_¥odu˘
 (
SCM
 
ø0
, SCM 
øs
);

43 
SCM_API
 
scm_ø_divide
 (
SCM
 
ø0
, SCM 
øs
);

44 
SCM_API
 
scm_¨øy_idítôy
 (
SCM
 
§c
, SCM 
d°
);

45 
SCM_API
 
SCM
 
scm_¨øy_m≠_x
 (SCM 
ø0
, SCM 
¥oc
, SCM 
Ãa
);

46 
SCM_API
 
SCM
 
scm_¨øy_f‹_óch
 (SCM 
¥oc
, SCM 
ø0
, SCM 
Ãa
);

47 
SCM_API
 
SCM
 
scm_¨øy_ödex_m≠_x
 (SCM 
ø
, SCM 
¥oc
);

48 
SCM_API
 
SCM
 
scm_øequÆ
 (SCM 
ø0
, SCM 
ø1
);

49 
SCM_API
 
SCM
 
scm_¨øy_equÆ_p
 (SCM 
ø0
, SCM 
ø1
);

50 
SCM_API
 
scm_öô_øm≠
 ();

	@/usr/include/libguile/random.h

3 #i‚de‡
SCM_RANDOM_H


4 
	#SCM_RANDOM_H


	)

25 
	~"libguûe/__scm.h
"

40 
	sscm_t_r°©e
 {

41 
	mª£rved0
;

42 
	mª£rved1
;

44 } 
	tscm_t_r°©e
;

46 
	sscm_t_∫g
 {

47 
size_t
 
	mr°©e_size
;

48 (*
	møndom_bôs
Ë(
scm_t_r°©e
 *
	m°©e
);

49 (*
	möô_r°©e
Ë(
scm_t_r°©e
 *
	m°©e
, c⁄° *
	m£ed
, 
	mn
);

50 
	mscm_t_r°©e
 *(*
	mc›y_r°©e
Ë(
scm_t_r°©e
 *
	m°©e
);

51 } 
	tscm_t_∫g
;

53 
SCM_API
 
scm_t_∫g
 
	gscm_the_∫g
;

59 
	sscm_t_i_r°©e
 {

60 
scm_t_r°©e
 
	mr°©e
;

61 
	mw
;

62 
	mc
;

63 } 
	tscm_t_i_r°©e
;

65 
SCM_API
 
scm_i_unif‹m32
 (
scm_t_i_r°©e
 *);

66 
SCM_API
 
scm_i_öô_r°©e
 (
scm_t_i_r°©e
 *, c⁄° *
£ed
, 
n
);

67 
SCM_API
 
scm_t_i_r°©e
 *
scm_i_c›y_r°©e
 (scm_t_i_rstate *);

73 
SCM_API
 
scm_t_r°©e
 *
scm_c_make_r°©e
 (const *, );

74 
SCM_API
 
scm_t_r°©e
 *
scm_c_deÁu…_r°©e
 ();

75 
	#scm_c_unif‹m32
(
RSTATE
Ë
scm_the_∫g
.
	`øndom_bôs
 (RSTATE)

	)

76 
SCM_API
 
scm_c_unif‹m01
 (
scm_t_r°©e
 *);

77 
SCM_API
 
scm_c_n‹mÆ01
 (
scm_t_r°©e
 *);

78 
SCM_API
 
scm_c_exp1
 (
scm_t_r°©e
 *);

79 
SCM_API
 
scm_c_øndom
 (
scm_t_r°©e
 *, 
m
);

80 
SCM_API
 
SCM
 
scm_c_øndom_bignum
 (
scm_t_r°©e
 *, SCM 
m
);

86 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_r°©e
;

87 
	#SCM_RSTATEP
(
obj
Ë
	`SCM_SMOB_PREDICATE
 (
scm_tc16_r°©e
, obj)

	)

88 
	#SCM_RSTATE
(
obj
Ë((
scm_t_r°©e
 *Ë
	`SCM_SMOB_DATA
 (obj))

	)

90 
SCM_API
 
	gscm_maskèb
[256];

92 
SCM_API
 
SCM
 
	gscm_v¨_øndom_°©e
;

93 
SCM_API
 
SCM
 
scm_øndom
 (SCM 
n
, SCM 
°©e
);

94 
SCM_API
 
SCM
 
scm_c›y_øndom_°©e
 (SCM 
°©e
);

95 
SCM_API
 
SCM
 
scm_£ed_to_øndom_°©e
 (SCM 
£ed
);

96 
SCM_API
 
SCM
 
scm_øndom_unif‹m
 (SCM 
°©e
);

97 
SCM_API
 
SCM
 
scm_øndom_sﬁid_•hîe_x
 (SCM 
v
, SCM 
°©e
);

98 
SCM_API
 
SCM
 
scm_øndom_hﬁlow_•hîe_x
 (SCM 
v
, SCM 
°©e
);

99 
SCM_API
 
SCM
 
scm_øndom_n‹mÆ
 (SCM 
°©e
);

100 
SCM_API
 
SCM
 
scm_øndom_n‹mÆ_ve˘‹_x
 (SCM 
v
, SCM 
°©e
);

101 
SCM_API
 
SCM
 
scm_øndom_exp
 (SCM 
°©e
);

102 
SCM_API
 
scm_öô_øndom
 ();

	@/usr/include/libguile/rdelim.h

3 #i‚de‡
SCM_RDELIM_H


4 
	#SCM_RDELIM_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
scm_ªad_dñimôed_x
 (SCM 
dñims
, SCM 
buf
, SCM 
gobbÀ
, SCM 
p‹t
,

28 
SCM
 
off£t
, SCM 
Àngth
);

29 
SCM_API
 
SCM
 
scm_ªad_löe
 (SCM 
p‹t
);

30 
SCM_API
 
SCM
 
scm_wrôe_löe
 (SCM 
obj
, SCM 
p‹t
);

31 
SCM_API
 
SCM
 
scm_öô_rdñim_buûtös
 ();

33 
SCM_API
 
scm_öô_rdñim
 ();

	@/usr/include/libguile/read.h

3 #i‚de‡
SCM_READ_H


4 
	#SCM_READ_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/›ti⁄s.h
"

38 
	#SCM_LINE_INCREMENTORS
 '\n'

	)

40 #ifde‡
MSDOS


41 
	#SCM_SINGLE_SPACES
 ' ':'\r':'\f': 26

	)

43 
	#SCM_SINGLE_SPACES
 ' ':'\r':'\f'

	)

46 
	#SCM_WHITE_SPACES
 
SCM_SINGLE_SPACES
: '\t'

	)

48 
SCM_API
 
scm_t_›ti⁄
 
	gscm_ªad_›ts
[];

50 
	#SCM_COPY_SOURCE_P
 
scm_ªad_›ts
[0].
vÆ


	)

51 
	#SCM_RECORD_POSITIONS_P
 
scm_ªad_›ts
[1].
vÆ


	)

52 
	#SCM_CASE_INSENSITIVE_P
 
scm_ªad_›ts
[2].
vÆ


	)

53 
	#SCM_KEYWORD_STYLE
 
scm_ªad_›ts
[3].
vÆ


	)

54 #i‡
SCM_ENABLE_ELISP


55 
	#SCM_ELISP_VECTORS_P
 
scm_ªad_›ts
[4].
vÆ


	)

56 
	#SCM_ESCAPED_PARENS_P
 
scm_ªad_›ts
[5].
vÆ


	)

57 
	#SCM_N_READ_OPTIONS
 6

	)

59 
	#SCM_N_READ_OPTIONS
 4

	)

64 
SCM_API
 
SCM
 
	gscm_sym_dŸ
;

66 
SCM_API
 
SCM
 
scm_ªad_›ti⁄s
 (SCM 
£âög
);

67 
SCM_API
 
SCM
 
scm_ªad
 (SCM 
p‹t
);

68 
SCM_API
 
size_t
 
scm_ªad_tokí
 (
ic
, 
SCM
 * 
tok_buf
, SCM 
p‹t
, 
weúd
);

69 
SCM_API
 
SCM
 
scm_ªad_hash_exãnd
 (SCM 
chr
, SCM 
¥oc
);

71 
SCM_API
 
	$scm_i_öput_îr‹
 (c⁄° *
func
, 
SCM
 
p‹t
,

72 c⁄° *
mesßge
, 
SCM
 
¨g
)

73 
SCM_NORETURN
;

75 
SCM_API
 
	`scm_öô_ªad
 ();

	@/usr/include/libguile/root.h

3 #i‚de‡
SCM_ROOT_H


4 
	#SCM_ROOT_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/debug.h
"

27 
	~"libguûe/throw.h
"

31 
	#scm_Êo0
 
scm_sys_¥Ÿe˘s
[0]

	)

32 
	#scm_li°o‚uŒ
 
scm_sys_¥Ÿe˘s
[1]

	)

33 
	#scm_nuŒve˘
 
scm_sys_¥Ÿe˘s
[2]

	)

34 
	#scm_nuŒ°r
 
scm_sys_¥Ÿe˘s
[3]

	)

35 
	#scm_keyw‹d_ob¨øy
 
scm_sys_¥Ÿe˘s
[4]

	)

36 
	#scm_°™d_ö_¥ocs
 
scm_sys_¥Ÿe˘s
[5]

	)

37 
	#scm_obje˘_whash
 
scm_sys_¥Ÿe˘s
[6]

	)

38 
	#scm_≥rmobjs
 
scm_sys_¥Ÿe˘s
[7]

	)

39 
	#scm_asyncs
 
scm_sys_¥Ÿe˘s
[8]

	)

40 
	#scm_¥Ÿe˘s
 
scm_sys_¥Ÿe˘s
[9]

	)

41 
	#scm_¥›îtõs_whash
 
scm_sys_¥Ÿe˘s
[10]

	)

42 
	#scm_gc_ªgi°îed_roŸs
 
scm_sys_¥Ÿe˘s
[11]

	)

43 
	#scm_sour˚_whash
 
scm_sys_¥Ÿe˘s
[12]

	)

44 
	#SCM_NUM_PROTECTS
 13

	)

46 
SCM_API
 
SCM
 
	gscm_sys_¥Ÿe˘s
[];

50 
SCM_API
 
SCM
 
scm_öã∫Æ_cwdr
 (
scm_t_ˇtch_body
 
body
,

51 *
body_d©a
,

52 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

53 *
h™dÀr_d©a
,

54 
SCM_STACKITEM
 *
°ack_°¨t
);

55 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_dy«mic_roŸ
 (SCM 
thunk
, SCM 
h™dÀr
);

56 
SCM_API
 
SCM
 
scm_dy«mic_roŸ
 ();

57 
SCM_API
 
SCM
 
scm_≠∂y_wôh_dy«mic_roŸ
 (SCM 
¥oc
, SCM 
a1
, SCM 
¨gs
, SCM 
h™dÀr
);

58 
SCM_API
 
scm_öô_roŸ
 ();

	@/usr/include/libguile/rw.h

3 #i‚de‡
SCM_RW_H


4 
	#SCM_RW_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
scm_ªad_°rög_x_∑πül
 (SCM 
°r
, SCM 
p‹t_‹_fdes
, SCM 
°¨t
,

28 
SCM
 
íd
);

29 
SCM_API
 
SCM
 
scm_wrôe_°rög_∑πül
 (SCM 
°r
, SCM 
p‹t_‹_fdes
, SCM 
°¨t
,

30 
SCM
 
íd
);

32 
SCM_API
 
SCM
 
scm_öô_rw_buûtös
 ();

33 
SCM_API
 
scm_öô_rw
 ();

	@/usr/include/libguile/scmsigs.h

3 #i‚de‡
SCM_SCMSIGS_H


4 
	#SCM_SCMSIGS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_siga˘i⁄
 (SCM 
signum
, SCM 
h™dÀr
, SCM 
Êags
);

30 
SCM_API
 
SCM
 
scm_siga˘i⁄_f‹_thªad
 (SCM 
signum
, SCM 
h™dÀr
, SCM 
Êags
,

31 
SCM
 
thªad
);

32 
SCM_API
 
SCM
 
scm_ª°‹e_sig«ls
 ();

33 
SCM_API
 
SCM
 
scm_Æ¨m
 (SCM 
i
);

34 
SCM_API
 
SCM
 
scm_£tôimî
 (SCM 
which_timî
,

35 
SCM
 
öãrvÆ_£c⁄ds
, SCM 
öãrvÆ_mi¸o£c⁄ds
,

36 
SCM
 
vÆue_£c⁄ds
, SCM 
vÆue_mi¸o£c⁄ds
);

37 
SCM_API
 
SCM
 
scm_gëôimî
 (SCM 
which_timî
);

38 
SCM_API
 
SCM
 
scm_∑u£
 ();

39 
SCM_API
 
SCM
 
scm_¶ìp
 (SCM 
i
);

40 
SCM_API
 
SCM
 
scm_u¶ìp
 (SCM 
i
);

41 
SCM_API
 
SCM
 
scm_øi£
 (SCM 
sig
);

42 
SCM_API
 
scm_öô_scmsigs
 ();

	@/usr/include/libguile/script.h

3 #i‚de‡
SCM_SCRIPT_H


4 
	#SCM_SCRIPT_H


	)

25 
	~"libguûe/__scm.h
"

28 
SCM_API
 *
scm_föd_execuèbÀ
 (c⁄° *
«me
);

29 
SCM_API
 *
scm_föd_im∂_fûe
 (*
exec_∑th
,

30 c⁄° *
gíîic_«me
,

31 c⁄° *
öô«me
,

32 c⁄° *
£p
);

33 
SCM_API
 **
scm_gë_mëa_¨gs
 (
¨gc
, **
¨gv
);

34 
SCM_API
 
scm_cou¡_¨gv
 (**
¨gv
);

35 
SCM_API
 
scm_shñl_ußge
 (
Áèl
, *
mesßge
);

36 
SCM_API
 
SCM
 
scm_compûe_shñl_swôches
 (
¨gc
, **
¨gv
);

37 
SCM_API
 
scm_shñl
 (
¨gc
, **
¨gv
);

38 
SCM_API
 *
	gscm_ußge_«me
;

39 
SCM_API
 
scm_öô_s¸ùt
 ();

	@/usr/include/libguile/simpos.h

3 #i‚de‡
SCM_SIMPOS_H


4 
	#SCM_SIMPOS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_sy°em
 (SCM 
cmd
);

30 
SCM_API
 
SCM
 
scm_sy°em_°¨
 (SCM 
cmds
);

31 
SCM_API
 
SCM
 
scm_gëív
 (SCM 
«m
);

32 
SCM_API
 
SCM
 
scm_¥imôive_exô
 (SCM 
°©us
);

33 
SCM_API
 
SCM
 
scm_¥imôive__exô
 (SCM 
°©us
);

34 
SCM_API
 
scm_öô_simpos
 ();

	@/usr/include/libguile/smob.h

3 #i‚de‡
SCM_SMOB_H


4 
	#SCM_SMOB_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/¥öt.h
"

31 
	sscm_smob_des¸ùt‹


33 c⁄° *
	m«me
;

34 
size_t
 
	msize
;

35 
SCM
 (*
m¨k
Ë(
	mSCM
);

36 
size_t
 (*
‰ì
Ë(
	mSCM
);

37 (*
	m¥öt
Ë(
SCM
 
	mexp
, SCM 
	mp‹t
, 
scm_¥öt_°©e
 *
	mp°©e
);

38 
SCM
 (*
equÆp
Ë(
	mSCM
, SCM);

39 
SCM
 (*
≠∂y
) ();

40 
SCM
 (*
≠∂y_0
Ë(
	mSCM
);

41 
SCM
 (*
≠∂y_1
Ë(
	mSCM
, SCM);

42 
SCM
 (*
≠∂y_2
Ë(
	mSCM
, SCM, SCM);

43 
SCM
 (*
≠∂y_3
Ë(
	mSCM
, SCM, SCM, SCM);

44 
	mgsubr_ty≥
;

45 } 
	tscm_smob_des¸ùt‹
;

49 
	#SCM_NEWSMOB
(
z
, 
tc
, 
d©a
) \

51 
z
 = 
	`scm_˚Œ
 ((
tc
), (
scm_t_bôs
Ë(
d©a
)); \

52 } 0)

	)

54 
	#SCM_RETURN_NEWSMOB
(
tc
, 
d©a
) \

55 dÿ{ 
SCM
 
__SCM_smob_™swî
; \

56 
	`SCM_NEWSMOB
 (
__SCM_smob_™swî
, (
tc
), (
d©a
)); \

57  
__SCM_smob_™swî
; \

58 } 0)

	)

60 
	#SCM_NEWSMOB2
(
z
, 
tc
, 
d©a1
, 
d©a2
) \

62 
z
 = 
	`scm_doubÀ_˚Œ
 ((
tc
), (
scm_t_bôs
)(
d©a1
), (scm_t_bôs)(
d©a2
), 0); \

63 } 0)

	)

65 
	#SCM_RETURN_NEWSMOB2
(
tc
, 
d©a1
, 
d©a2
) \

66 dÿ{ 
SCM
 
__SCM_smob_™swî
; \

67 
	`SCM_NEWSMOB2
 (
__SCM_smob_™swî
, (
tc
), (
d©a1
), (
d©a2
)); \

68  
__SCM_smob_™swî
; \

69 } 0)

	)

71 
	#SCM_NEWSMOB3
(
z
, 
tc
, 
d©a1
, 
d©a2
, 
d©a3
) \

73 
z
 = 
	`scm_doubÀ_˚Œ
 ((
tc
), (
scm_t_bôs
)(
d©a1
), \

74 (
scm_t_bôs
)(
d©a2
), (scm_t_bôs)(
d©a3
)); \

75 } 0)

	)

77 
	#SCM_RETURN_NEWSMOB3
(
tc
, 
d©a1
, 
d©a2
, 
d©a3
) \

78 dÿ{ 
SCM
 
__SCM_smob_™swî
; \

79 
	`SCM_NEWSMOB3
 (
__SCM_smob_™swî
, (
tc
), (
d©a1
), (
d©a2
), (
d©a3
)); \

80  
__SCM_smob_™swî
; \

81 } 0)

	)

84 
	#SCM_SMOB_FLAGS
(
x
Ë(
	`SCM_CELL_WORD_0
 (xË>> 16)

	)

85 
	#SCM_SMOB_DATA
(
x
Ë(
	`SCM_CELL_WORD_1
 (x))

	)

86 
	#SCM_SMOB_DATA_2
(
x
Ë(
	`SCM_CELL_WORD_2
 (x))

	)

87 
	#SCM_SMOB_DATA_3
(
x
Ë(
	`SCM_CELL_WORD_3
 (x))

	)

88 
	#SCM_SET_SMOB_DATA
(
x
, 
d©a
Ë(
	`SCM_SET_CELL_WORD_1
 ((x), (d©a)))

	)

89 
	#SCM_SET_SMOB_DATA_2
(
x
, 
d©a
Ë(
	`SCM_SET_CELL_WORD_2
 ((x), (d©a)))

	)

90 
	#SCM_SET_SMOB_DATA_3
(
x
, 
d©a
Ë(
	`SCM_SET_CELL_WORD_3
 ((x), (d©a)))

	)

91 
	#SCM_SET_SMOB_FLAGS
(
x
, 
d©a
Ë(
	`scm_i_£t_smob_Êags
((x),(d©a)<<16))

	)

93 
	#SCM_SMOB_OBJECT
(
x
Ë(
	`SCM_CELL_OBJECT_1
 (x))

	)

94 
	#SCM_SMOB_OBJECT_2
(
x
Ë(
	`SCM_CELL_OBJECT_2
 (x))

	)

95 
	#SCM_SMOB_OBJECT_3
(
x
Ë(
	`SCM_CELL_OBJECT_3
 (x))

	)

96 
	#SCM_SET_SMOB_OBJECT
(
x
,
obj
Ë(
	`SCM_SET_CELL_OBJECT_1
 ((x), (obj)))

	)

97 
	#SCM_SET_SMOB_OBJECT_2
(
x
,
obj
Ë(
	`SCM_SET_CELL_OBJECT_2
 ((x), (obj)))

	)

98 
	#SCM_SET_SMOB_OBJECT_3
(
x
,
obj
Ë(
	`SCM_SET_CELL_OBJECT_3
 ((x), (obj)))

	)

99 
	#SCM_SMOB_OBJECT_LOC
(
x
Ë(
	`SCM_CELL_OBJECT_LOC
 ((x), 1))

	)

100 
	#SCM_SMOB_OBJECT_2_LOC
(
x
Ë(
	`SCM_CELL_OBJECT_LOC
 ((x), 2))

	)

101 
	#SCM_SMOB_OBJECT_3_LOC
(
x
Ë(
	`SCM_CELL_OBJECT_LOC
 ((x), 3))

	)

103 
	#SCM_TC2SMOBNUM
(
x
Ë(0x0f‡& ((xË>> 8))

	)

104 
	#SCM_SMOBNUM
(
x
Ë(
	`SCM_TC2SMOBNUM
 (
	`SCM_CELL_TYPE
 (x)))

	)

106 
	#SCM_SMOBNAME
(
smobnum
Ë(
scm_smobs
[smobnum].
«me
)

	)

107 
	#SCM_SMOB_PREDICATE
(
èg
, 
obj
Ë
	`SCM_TYP16_PREDICATE
 (èg, obj)

	)

108 
	#SCM_SMOB_DESCRIPTOR
(
x
Ë(
scm_smobs
[
	`SCM_SMOBNUM
 (x)])

	)

109 
	#SCM_SMOB_APPLICABLE_P
(
x
Ë(
	`SCM_SMOB_DESCRIPTOR
 (x).
≠∂y
)

	)

110 
	#SCM_SMOB_APPLY_0
(
x
Ë(
	`SCM_SMOB_DESCRIPTOR
 (x).
	`≠∂y_0
 (x))

	)

111 
	#SCM_SMOB_APPLY_1
(
x
, 
a1
Ë(
	`SCM_SMOB_DESCRIPTOR
 (x).
	`≠∂y_1
 (x, (a1)))

	)

112 
	#SCM_SMOB_APPLY_2
(
x
, 
a1
, 
a2
Ë(
	`SCM_SMOB_DESCRIPTOR
 (x).
	`≠∂y_2
 (x, (a1), (a2)))

	)

113 
	#SCM_SMOB_APPLY_3
(
x
, 
a1
, 
a2
, 
r°
Ë(
	`SCM_SMOB_DESCRIPTOR
 (x).
	`≠∂y_3
 (x, (a1), (a2), (r°)))

	)

115 
SCM_API
 
	gscm_numsmob
;

116 
SCM_API
 
scm_smob_des¸ùt‹
 
	gscm_smobs
[];

118 
SCM_API
 
scm_i_£t_smob_Êags
 (
SCM
 
x
, 
scm_t_bôs
 
d©a
);

122 
SCM_API
 
SCM
 
scm_m¨k0
 (SCM 
±r
);

123 
SCM_API
 
SCM
 
scm_m¨kcdr
 (SCM 
±r
);

124 
SCM_API
 
size_t
 
scm_‰ì0
 (
SCM
 
±r
);

125 
SCM_API
 
size_t
 
scm_smob_‰ì
 (
SCM
 
obj
);

126 
SCM_API
 
scm_smob_¥öt
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

136 
SCM_API
 
scm_t_bôs
 
scm_make_smob_ty≥
 (c⁄° *
«me
, 
size_t
 
size
);

138 
SCM_API
 
scm_£t_smob_m¨k
 (
scm_t_bôs
 
tc
, 
	$SCM
 (*
m¨k
Ë(
SCM
));

139 
SCM_API
 
	`scm_£t_smob_‰ì
 (
scm_t_bôs
 
tc
, 
	$size_t
 (*
‰ì
Ë(
SCM
));

140 
SCM_API
 
	`scm_£t_smob_¥öt
 (
scm_t_bôs
 
tc
,

141 (*
¥öt
Ë(
SCM
, SCM, 
scm_¥öt_°©e
*));

142 
SCM_API
 
	`scm_£t_smob_equÆp
 (
scm_t_bôs
 
tc
, 
	$SCM
 (*
equÆp
Ë(
SCM
, SCM));

143 
SCM_API
 
	`scm_£t_smob_≠∂y
 (
scm_t_bôs
 
tc
,

144 
	`SCM
 (*
≠∂y
) (),

145 
ªq
,

146 
›t
,

147 
r°
);

149 
SCM_API
 
	`scm_as£π_smob_ty≥
 (
scm_t_bôs
 
èg
, 
SCM
 
vÆ
);

153 
SCM_API
 
SCM
 
	`scm_make_smob
 (
scm_t_bôs
 
tc
);

155 
SCM_API
 
	`scm_smob_¥ehi°‹y
 ();

	@/usr/include/libguile/snarf.h

3 #i‚de‡
SCM_SNARF_H


4 
	#SCM_SNARF_H


	)

27 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
GUILE_CPLUSPLUS_SNARF
)

32 
	#SCM_FUNC_CAST_ARBITRARY_ARGS
 
	`SCM
 (*)()

	)

35 
	#SCM_FUNC_CAST_ARBITRARY_ARGS
 
	`SCM
 (*)()

	)

52 #ifde‡
SCM_MAGIC_SNARF_INITS


53 
	#SCM_SNARF_HERE
(
X
)

	)

54 
	#SCM_SNARF_INIT
(
X
Ë^^ X ^:^

	)

55 
	#SCM_SNARF_DOCS
(
TYPE
, 
CNAME
, 
FNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
)

	)

57 #ifde‡
SCM_MAGIC_SNARF_DOCS


58 
	#SCM_SNARF_HERE
(
X
)

	)

59 
	#SCM_SNARF_INIT
(
X
)

	)

60 
	#SCM_SNARF_DOCS
(
TYPE
, 
CNAME
, 
FNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
) \

62 
˙ame
 
CNAME
 ^^ \

63 
‚ame
 
FNAME
 ^^ \

64 
ty≥
 
TYPE
 ^^ \

65 
loˇti⁄
 
__FILE__
 
__LINE__
 ^^ \

66 
¨gli°
 
ARGLIST
 ^^ \

67 
¨gsig
 
REQ
 
OPT
 
VAR
 ^^ \

68 
DOCSTRING
 ^^ }

	)

70 
	#SCM_SNARF_HERE
(
X
Ë
	)
X

71 
	#SCM_SNARF_INIT
(
X
)

	)

72 
	#SCM_SNARF_DOCS
(
TYPE
, 
CNAME
, 
FNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
)

	)

76 
	#SCM_DEFINE
(
FNAME
, 
PRIMNAME
, 
REQ
, 
OPT
, 
VAR
, 
ARGLIST
, 
DOCSTRING
) \

77 
	`SCM_SNARF_HERE
(\

78 c⁄° 
s_
 ## 
FNAME
 [] = 
PRIMNAME
; \

79 
SCM
 
FNAME
 
ARGLIST
\

81 
	`SCM_SNARF_INIT
(\

82 
	`scm_c_deföe_gsubr
 (
s_
 ## 
FNAME
, 
REQ
, 
OPT
, 
VAR
, \

83 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
FNAME
); \

85 
	`SCM_SNARF_DOCS
(
¥imôive
, 
FNAME
, 
PRIMNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
)

	)

87 
	#SCM_PRIMITIVE_GENERIC
(
FNAME
, 
PRIMNAME
, 
REQ
, 
OPT
, 
VAR
, 
ARGLIST
, 
DOCSTRING
) \

88 
	`SCM_SNARF_HERE
(\

89 c⁄° 
s_
 ## 
FNAME
 [] = 
PRIMNAME
; \

90 
SCM
 
g_
 ## 
FNAME
; \

91 
SCM
 
FNAME
 
ARGLIST
\

93 
	`SCM_SNARF_INIT
(\

94 
g_
 ## 
FNAME
 = 
	`SCM_PACK
 (0); \

95 
	`scm_c_deföe_gsubr_wôh_gíîic
 (
s_
 ## 
FNAME
, 
REQ
, 
OPT
, 
VAR
, \

96 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
FNAME
, \

97 &
g_
 ## 
FNAME
); \

99 
	`SCM_SNARF_DOCS
(
¥imôive
, 
FNAME
, 
PRIMNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
)

	)

101 
	#SCM_DEFINE_PUBLIC
(
FNAME
, 
PRIMNAME
, 
REQ
, 
OPT
, 
VAR
, 
ARGLIST
, 
DOCSTRING
) \

102 
	`SCM_SNARF_HERE
(\

103 c⁄° 
s_
 ## 
FNAME
 [] = 
PRIMNAME
; \

104 
SCM
 
FNAME
 
ARGLIST
\

106 
	`SCM_SNARF_INIT
(\

107 
	`scm_c_deföe_gsubr
 (
s_
 ## 
FNAME
, 
REQ
, 
OPT
, 
VAR
, \

108 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
FNAME
); \

109 
	`scm_c_exp‹t
 (
s_
 ## 
FNAME
, 
NULL
); \

111 
	`SCM_SNARF_DOCS
(
¥imôive
, 
FNAME
, 
PRIMNAME
, 
ARGLIST
, 
REQ
, 
OPT
, 
VAR
, 
DOCSTRING
)

	)

113 
	#SCM_DEFINE1
(
FNAME
, 
PRIMNAME
, 
TYPE
, 
ARGLIST
, 
DOCSTRING
) \

114 
	`SCM_SNARF_HERE
(\

115 c⁄° 
s_
 ## 
FNAME
 [] = 
PRIMNAME
; \

116 
SCM
 
FNAME
 
ARGLIST
\

118 
	`SCM_SNARF_INIT
(
	`scm_c_deföe_subr
 (
s_
 ## 
FNAME
, 
TYPE
, FNAME); ) \

119 
	`SCM_SNARF_DOCS
(1, 
FNAME
, 
PRIMNAME
, 
ARGLIST
, 2, 0, 0, 
DOCSTRING
)

	)

121 
	#SCM_PRIMITIVE_GENERIC_1
(
FNAME
, 
PRIMNAME
, 
TYPE
, 
ARGLIST
, 
DOCSTRING
) \

122 
	`SCM_SNARF_HERE
(\

123 c⁄° 
s_
 ## 
FNAME
 [] = 
PRIMNAME
; \

124 
SCM
 
g_
 ## 
FNAME
; \

125 
SCM
 
FNAME
 
ARGLIST
\

127 
	`SCM_SNARF_INIT
(\

128 
g_
 ## 
FNAME
 = 
	`SCM_PACK
 (0); \

129 
	`scm_c_deföe_subr_wôh_gíîic
 (
s_
 ## 
FNAME
, 
TYPE
, FNAME, &
g_
 ## FNAME); \

131 
	`SCM_SNARF_DOCS
(1, 
FNAME
, 
PRIMNAME
, 
ARGLIST
, 2, 0, 0, 
DOCSTRING
)

	)

133 
	#SCM_PROC
(
RANAME
, 
STR
, 
REQ
, 
OPT
, 
VAR
, 
CFN
) \

134 
	`SCM_SNARF_HERE
(c⁄° 
RANAME
[]=
STR
) \

135 
	`SCM_SNARF_INIT
(
	`scm_c_deföe_gsubr
 (
RANAME
, 
REQ
, 
OPT
, 
VAR
, \

136 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
CFN
))

	)

138 
	#SCM_REGISTER_PROC
(
RANAME
, 
STR
, 
REQ
, 
OPT
, 
VAR
, 
CFN
) \

139 
	`SCM_SNARF_HERE
(c⁄° 
RANAME
[]=
STR
) \

140 
	`SCM_SNARF_INIT
(
	`scm_c_deföe_gsubr
 (
RANAME
, 
REQ
, 
OPT
, 
VAR
, \

141 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
CFN
);) \

142 
	`SCM_SNARF_DOCS
(, 
CFN
, 
STR
, (), 
REQ
, 
OPT
, 
VAR
, \

143 "im∂emíãd byÅhêC fun˘i⁄ \"" #CFN "\"")

	)

145 
	#SCM_GPROC
(
RANAME
, 
STR
, 
REQ
, 
OPT
, 
VAR
, 
CFN
, 
GF
) \

146 
	`SCM_SNARF_HERE
(\

147 c⁄° 
RANAME
[]=
STR
;\

148 
SCM
 
GF
 \

149 )
	`SCM_SNARF_INIT
(\

150 
GF
 = 
	`SCM_PACK
 (0); \

151 
	`scm_c_deföe_gsubr_wôh_gíîic
 (
RANAME
, 
REQ
, 
OPT
, 
VAR
, \

152 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
CFN
, &
GF
) \

153 )

	)

155 
	#SCM_PROC1
(
RANAME
, 
STR
, 
TYPE
, 
CFN
) \

156 
	`SCM_SNARF_HERE
(c⁄° 
RANAME
[]=
STR
) \

157 
	`SCM_SNARF_INIT
(\

158 
	`scm_c_deföe_subr
 (
RANAME
, 
TYPE
, (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
CFN
) \

159 )

	)

162 
	#SCM_GPROC1
(
RANAME
, 
STR
, 
TYPE
, 
CFN
, 
GF
) \

163 
	`SCM_SNARF_HERE
(\

164 c⁄° 
RANAME
[]=
STR
; \

165 
SCM
 
GF
 \

166 )
	`SCM_SNARF_INIT
(\

167 
GF
 = 
	`SCM_PACK
 (0); \

168 
	`scm_c_deföe_subr_wôh_gíîic
 (
RANAME
, 
TYPE
, \

169 (
SCM_FUNC_CAST_ARBITRARY_ARGS
Ë
CFN
, &
GF
) \

170 )

	)

172 
	#SCM_SYNTAX
(
RANAME
, 
STR
, 
TYPE
, 
CFN
) \

173 
	`SCM_SNARF_HERE
(c⁄° 
RANAME
[]=
STR
)\

174 
	`SCM_SNARF_INIT
(
	`scm_make_sy¡
 (
RANAME
, 
TYPE
, 
CFN
))

	)

176 
	#SCM_SYMBOL
(
c_«me
, 
scheme_«me
) \

177 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

178 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_‰om_loˇÀ_symbﬁ
 (
scheme_«me
)))

	)

180 
	#SCM_GLOBAL_SYMBOL
(
c_«me
, 
scheme_«me
) \

181 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

182 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_‰om_loˇÀ_symbﬁ
 (
scheme_«me
)))

	)

184 
	#SCM_KEYWORD
(
c_«me
, 
scheme_«me
) \

185 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

186 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_‰om_loˇÀ_keyw‹d
 (
scheme_«me
)))

	)

188 
	#SCM_GLOBAL_KEYWORD
(
c_«me
, 
scheme_«me
) \

189 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

190 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_‰om_loˇÀ_keyw‹d
 (
scheme_«me
)))

	)

192 
	#SCM_VARIABLE
(
c_«me
, 
scheme_«me
) \

193 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

194 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_c_deföe
 (
scheme_«me
, 
SCM_BOOL_F
));)

	)

196 
	#SCM_GLOBAL_VARIABLE
(
c_«me
, 
scheme_«me
) \

197 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

198 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_c_deföe
 (
scheme_«me
, 
SCM_BOOL_F
));)

	)

200 
	#SCM_VARIABLE_INIT
(
c_«me
, 
scheme_«me
, 
öô_vÆ
) \

201 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

202 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_c_deföe
 (
scheme_«me
, 
öô_vÆ
));)

	)

204 
	#SCM_GLOBAL_VARIABLE_INIT
(
c_«me
, 
scheme_«me
, 
öô_vÆ
) \

205 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
) \

206 
	`SCM_SNARF_INIT
(
c_«me
 = 
	`scm_≥rm™ít_obje˘
 (
	`scm_c_deföe
 (
scheme_«me
, 
öô_vÆ
));)

	)

208 
	#SCM_MUTEX
(
c_«me
) \

209 
	`SCM_SNARF_HERE
(
scm_t_muãx
 
c_«me
) \

210 
	`SCM_SNARF_INIT
(
	`scm_i_∂ugö_muãx_öô
 (&
c_«me
, &
scm_i_∂ugö_muãx
))

	)

212 
	#SCM_GLOBAL_MUTEX
(
c_«me
) \

213 
	`SCM_SNARF_HERE
(
scm_t_muãx
 
c_«me
) \

214 
	`SCM_SNARF_INIT
(
	`scm_i_∂ugö_muãx_öô
 (&
c_«me
, &
scm_i_∂ugö_muãx
))

	)

216 
	#SCM_REC_MUTEX
(
c_«me
) \

217 
	`SCM_SNARF_HERE
(
scm_t_ªc_muãx
 
c_«me
) \

218 
	`SCM_SNARF_INIT
(
	`scm_i_∂ugö_ªc_muãx_öô
 (&
c_«me
, &
scm_i_∂ugö_ªc_muãx
))

	)

220 
	#SCM_GLOBAL_REC_MUTEX
(
c_«me
) \

221 
	`SCM_SNARF_HERE
(
scm_t_ªc_muãx
 
c_«me
) \

222 
	`SCM_SNARF_INIT
(
	`scm_i_∂ugö_ªc_muãx_öô
 (&
c_«me
, &
scm_i_∂ugö_ªc_muãx
))

	)

224 
	#SCM_SMOB
(
èg
, 
scheme_«me
, 
size
) \

225 
	`SCM_SNARF_HERE
(
scm_t_bôs
 
èg
) \

226 
	`SCM_SNARF_INIT
((
èg
)=
	`scm_make_smob_ty≥
((
scheme_«me
), (
size
));)

	)

228 
	#SCM_GLOBAL_SMOB
(
èg
, 
scheme_«me
, 
size
) \

229 
	`SCM_SNARF_HERE
(
scm_t_bôs
 
èg
) \

230 
	`SCM_SNARF_INIT
((
èg
)=
	`scm_make_smob_ty≥
((
scheme_«me
), (
size
));)

	)

232 
	#SCM_SMOB_MARK
(
èg
, 
c_«me
, 
¨g
) \

233 
	`SCM_SNARF_HERE
(
SCM
 
	`c_«me
(SCM 
¨g
)) \

234 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_m¨k
((
èg
), (
c_«me
));)

	)

236 
	#SCM_GLOBAL_SMOB_MARK
(
èg
, 
c_«me
, 
¨g
) \

237 
	`SCM_SNARF_HERE
(
SCM
 
	`c_«me
(SCM 
¨g
)) \

238 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_m¨k
((
èg
), (
c_«me
));)

	)

240 
	#SCM_SMOB_FREE
(
èg
, 
c_«me
, 
¨g
) \

241 
	`SCM_SNARF_HERE
(
size_t
 
	`c_«me
(
SCM
 
¨g
)) \

242 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_‰ì
((
èg
), (
c_«me
));)

	)

244 
	#SCM_GLOBAL_SMOB_FREE
(
èg
, 
c_«me
, 
¨g
) \

245 
	`SCM_SNARF_HERE
(
size_t
 
	`c_«me
(
SCM
 
¨g
)) \

246 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_‰ì
((
èg
), (
c_«me
));)

	)

248 
	#SCM_SMOB_PRINT
(
èg
, 
c_«me
, 
obj
, 
p‹t
, 
p°©e
) \

249 
	`SCM_SNARF_HERE
(
	`c_«me
(
SCM
 
obj
, SCM 
p‹t
, 
scm_¥öt_°©e
* 
p°©e
)) \

250 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_¥öt
((
èg
), (
c_«me
));)

	)

252 
	#SCM_GLOBAL_SMOB_PRINT
(
èg
, 
c_«me
, 
obj
, 
p‹t
, 
p°©e
) \

253 
	`SCM_SNARF_HERE
(
	`c_«me
(
SCM
 
obj
, SCM 
p‹t
, 
scm_¥öt_°©e
* 
p°©e
)) \

254 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_¥öt
((
èg
), (
c_«me
));)

	)

256 
	#SCM_SMOB_EQUALP
(
èg
, 
c_«me
, 
obj1
, 
obj2
) \

257 
	`SCM_SNARF_HERE
(
SCM
 
	`c_«me
(SCM 
obj1
, SCM 
obj2
)) \

258 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_equÆp
((
èg
), (
c_«me
));)

	)

260 
	#SCM_GLOBAL_SMOB_EQUALP
(
èg
, 
c_«me
, 
obj1
, 
obj2
) \

261 
	`SCM_SNARF_HERE
(
SCM
 
	`c_«me
(SCM 
obj1
, SCM 
obj2
)) \

262 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_equÆp
((
èg
), (
c_«me
));)

	)

264 
	#SCM_SMOB_APPLY
(
èg
, 
c_«me
, 
ªq
, 
›t
, 
ª°
, 
¨gli°
) \

265 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
 
¨gli°
) \

266 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_≠∂y
((
èg
), (
c_«me
), (
ªq
), (
›t
), (
ª°
));)

	)

268 
	#SCM_GLOBAL_SMOB_APPLY
(
èg
, 
c_«me
, 
ªq
, 
›t
, 
ª°
, 
¨gli°
) \

269 
	`SCM_SNARF_HERE
(
SCM
 
c_«me
 
¨gli°
) \

270 
	`SCM_SNARF_INIT
(
	`scm_£t_smob_≠∂y
((
èg
), (
c_«me
), (
ªq
), (
›t
), (
ª°
));)

	)

273 #ifde‡
SCM_MAGIC_SNARF_DOCS


274 #unde‡
SCM_ASSERT


275 
	#SCM_ASSERT
(
_c⁄d
, 
_¨g
, 
_pos
, 
_subr
Ë^^ 
¨gpos
 _¨g _po†
__LINE__
 ^^

	)

	@/usr/include/libguile/socket.h

3 #i‚de‡
SCM_SOCKET_H


4 
	#SCM_SOCKET_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_ht⁄s
 (SCM 
ö
);

30 
SCM_API
 
SCM
 
scm_¡ohs
 (SCM 
ö
);

31 
SCM_API
 
SCM
 
scm_ht⁄l
 (SCM 
ö
);

32 
SCM_API
 
SCM
 
scm_¡ohl
 (SCM 
ö
);

33 
SCM_API
 
SCM
 
scm_öë_©⁄
 (SCM 
addªss
);

34 
SCM_API
 
SCM
 
scm_öë_¡ﬂ
 (SCM 
öëid
);

35 
SCM_API
 
SCM
 
scm_öë_√tof
 (SCM 
addªss
);

36 
SCM_API
 
SCM
 
scm_ aof
 (SCM 
addªss
);

37 
SCM_API
 
SCM
 
scm_öë_makóddr
 (SCM 
√t
, SCM 
 a
);

38 
SCM_API
 
SCM
 
scm_öë_±⁄
 (SCM 
Ámûy
, SCM 
addªss
);

39 
SCM_API
 
SCM
 
scm_öë_¡›
 (SCM 
Ámûy
, SCM 
addªss
);

40 
SCM_API
 
SCM
 
scm_sockë
 (SCM 
Ámûy
, SCM 
°yÀ
, SCM 
¥Ÿo
);

41 
SCM_API
 
SCM
 
scm_sockë∑ú
 (SCM 
Ámûy
, SCM 
°yÀ
, SCM 
¥Ÿo
);

42 
SCM_API
 
SCM
 
scm_gësock›t
 (SCM 
sfd
, SCM 
Àvñ
, SCM 
›äame
);

43 
SCM_API
 
SCM
 
scm_£tsock›t
 (SCM 
sfd
, SCM 
Àvñ
, SCM 
›äame
, SCM 
vÆue
);

44 
SCM_API
 
SCM
 
scm_shutdown
 (SCM 
sfd
, SCM 
how
);

45 
SCM_API
 
SCM
 
scm_c⁄√˘
 (SCM 
sockfd
, SCM 
Ám
, SCM 
addªss
, SCM 
¨gs
);

46 
SCM_API
 
SCM
 
scm_böd
 (SCM 
sockfd
, SCM 
Ám
, SCM 
addªss
, SCM 
¨gs
);

47 
SCM_API
 
SCM
 
scm_li°í
 (SCM 
sfd
, SCM 
backlog
);

48 
SCM_API
 
SCM
 
scm_ac˚±
 (SCM 
sockfd
);

49 
SCM_API
 
SCM
 
scm_gësock«me
 (SCM 
sockfd
);

50 
SCM_API
 
SCM
 
scm_gë≥î«me
 (SCM 
sockfd
);

51 
SCM_API
 
SCM
 
scm_ªcv
 (SCM 
sockfd
, SCM 
buff_‹_size
, SCM 
Êags
);

52 
SCM_API
 
SCM
 
scm_£nd
 (SCM 
sockfd
, SCM 
mesßge
, SCM 
Êags
);

53 
SCM_API
 
SCM
 
scm_ªcv‰om
 (SCM 
sockfd
, SCM 
buff_‹_size
, SCM 
Êags
, SCM 
off£t
, SCM 
Àngth
);

54 
SCM_API
 
SCM
 
scm_£ndto
 (SCM 
sockfd
, SCM 
mesßge
, SCM 
Ám
, SCM 
addªss
, SCM 
¨gs_™d_Êags
);

55 
SCM_API
 
scm_öô_sockë
 ();

58 
	gsockaddr
;

59 
SCM_API
 
SCM
 
scm_‰om_sockaddr
 (c⁄° 
sockaddr
 *
addªss
,

60 
addr_size
);

61 
SCM_API
 
sockaddr
 *
scm_to_sockaddr
 (
SCM
 
addªss
, 
size_t
 *
adªss_size
);

62 
SCM_API
 
sockaddr
 *
scm_c_make_sockë_addªss
 (
SCM
 
Ámûy
, SCM 
addªss
,

63 
SCM
 
¨gs
,

64 
size_t
 *
addªss_size
);

65 
SCM_API
 
SCM
 
scm_make_sockë_addªss
 (SCM 
Ámûy
, SCM 
addªss
, SCM 
¨gs
);

	@/usr/include/libguile/sort.h

3 #i‚de‡
SCM_SORT_H


4 
	#SCM_SORT_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_ª°ri˘ed_ve˘‹_s‹t_x
 (SCM 
vec
,

30 
SCM
 
Àss
,

31 
SCM
 
°¨ços
,

32 
SCM
 
ídpos
);

33 
SCM_API
 
SCM
 
scm_s‹ãd_p
 (SCM 
ls
, SCM 
Àss
);

34 
SCM_API
 
SCM
 
scm_mîge
 (SCM 
ls1
, SCM 
ls2
, SCM 
Àss
);

35 
SCM_API
 
SCM
 
scm_mîge_x
 (SCM 
ls1
, SCM 
ls2
, SCM 
Àss
);

36 
SCM_API
 
SCM
 
scm_s‹t
 (SCM 
ls
, SCM 
Àss
);

37 
SCM_API
 
SCM
 
scm_s‹t_x
 (SCM 
ls
, SCM 
Àss
);

38 
SCM_API
 
SCM
 
scm_°abÀ_s‹t
 (SCM 
ls
, SCM 
Àss
);

39 
SCM_API
 
SCM
 
scm_°abÀ_s‹t_x
 (SCM 
ls
, SCM 
Àss
);

40 
SCM_API
 
SCM
 
scm_s‹t_li°
 (SCM 
ls
, SCM 
Àss
);

41 
SCM_API
 
SCM
 
scm_s‹t_li°_x
 (SCM 
ls
, SCM 
Àss
);

42 
SCM_API
 
scm_öô_s‹t
 ();

	@/usr/include/libguile/srcprop.h

3 #i‚de‡
SCM_SRCPROP_H


4 
	#SCM_SRCPROP_H


	)

25 
	~"libguûe/__scm.h
"

35 
	#scm_whash_h™dÀ
 
SCM


	)

37 
	#scm_whash_gë_h™dÀ
(
whash
, 
key
Ë
	`scm_hash_‚_gë_h™dÀ
 (whash, key, 
scm_ihashq
, 
scm_¶›py_assq
, 0)

	)

38 
	#SCM_WHASHFOUNDP
(
h
Ë(
	`scm_is_åue
 (h))

	)

39 
	#SCM_WHASHREF
(
whash
, 
h™dÀ
Ë
	`SCM_CDR
 (h™dÀ)

	)

40 
	#SCM_WHASHSET
(
whash
, 
h™dÀ
, 
obj
Ë
	`SCM_SETCDR
 (h™dÀ, obj)

	)

41 
	#scm_whash_¸óã_h™dÀ
(
whash
, 
key
Ë
	`scm_hash_‚_¸óã_h™dÀ_x
 (whash, key, 
SCM_UNSPECIFIED
, 
scm_ihashq
, 
scm_¶›py_assq
, 0)

	)

42 
	#scm_whash_lookup
(
whash
, 
obj
Ë
	`scm_hash_‚_ªf
 (whash, obj, 
SCM_BOOL_F
, 
scm_ihashq
, 
scm_¶›py_assq
, 0)

	)

43 
	#scm_whash_ö£π
(
whash
, 
key
, 
obj
) \

45 
SCM
 
w
 = (
whash
); \

46 
	`SCM_WHASHSET
 (
w
, 
	`scm_whash_¸óã_h™dÀ
 (w, 
key
), 
obj
); \

47 } 0)

	)

52 
	#SCM_PROCTRACEP
(
x
Ë(
	`scm_is_åue
 (
	`scm_¥o˚duª_¥›îty
 (x, 
scm_sym_åa˚
)))

	)

53 
	#SCM_SOURCE_PROPERTY_FLAG_BREAK
 1

	)

55 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_§˝r›s
;

57 
SCM_API
 
SCM
 
	gscm_sym_fûíame
;

58 
SCM_API
 
SCM
 
	gscm_sym_c›y
;

59 
SCM_API
 
SCM
 
	gscm_sym_löe
;

60 
SCM_API
 
SCM
 
	gscm_sym_cﬁumn
;

61 
SCM_API
 
SCM
 
	gscm_sym_bªakpoöt
;

65 
SCM_API
 
scm_c_sour˚_¥›îty_bªakpoöt_p
 (
SCM
 
f‹m
);

66 
SCM_API
 
SCM
 
scm_§˝r›s_to_∂i°
 (SCM 
obj
);

67 
SCM_API
 
SCM
 
scm_make_§˝r›s
 (
löe
, 
cﬁ
, SCM 
‚ame
, SCM 
c›y
, SCM 
∂i°
);

68 
SCM_API
 
SCM
 
scm_sour˚_¥›îty
 (SCM 
obj
, SCM 
key
);

69 
SCM_API
 
SCM
 
scm_£t_sour˚_¥›îty_x
 (SCM 
obj
, SCM 
key
, SCM 
d©um
);

70 
SCM_API
 
SCM
 
scm_sour˚_¥›îtõs
 (SCM 
obj
);

71 
SCM_API
 
SCM
 
scm_£t_sour˚_¥›îtõs_x
 (SCM 
obj
, SCM 
¥›s
);

72 
SCM_API
 
scm_föish_§˝r›
 ();

73 
SCM_API
 
scm_öô_§˝r›
 ();

75 #i‡
SCM_ENABLE_DEPRECATED
 == 1

76 
	#SRCBRKP
(
x
Ë(
	`scm_sour˚_¥›îty_bªakpoöt_p
 (x))

	)

	@/usr/include/libguile/srfi-13.h

1 #i‚de‡
SCM_SRFI_13_H


2 
	#SCM_SRFI_13_H


	)

24 
	~"libguûe/__scm.h
"

26 
SCM_API
 
SCM
 
scm_°rög_nuŒ_p
 (SCM 
s
);

27 
SCM_API
 
SCM
 
scm_°rög_™y
 (SCM 
¥ed
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

28 
SCM_API
 
SCM
 
scm_°rög_evîy
 (SCM 
¥ed
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

29 
SCM_API
 
SCM
 
scm_°rög_èbuœã
 (SCM 
¥oc
, SCM 
Àn
);

30 
SCM_API
 
SCM
 
scm_°rög_to_li°
 (SCM 
°r
);

31 
SCM_API
 
SCM
 
scm_sub°rög_to_li°
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

32 
SCM_API
 
SCM
 
scm_ªvî£_li°_to_°rög
 (SCM 
chrs
);

33 
SCM_API
 
SCM
 
scm_°rög_joö
 (SCM 
ls
, SCM 
dñimôî
, SCM 
gømm¨
);

34 
SCM_API
 
SCM
 
scm_°rög_c›y
 (SCM 
°r
);

35 
SCM_API
 
SCM
 
scm_°rög_c›y_x
 (SCM 
èrgë
, SCM 
t°¨t
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

36 
SCM_API
 
SCM
 
scm_sub°rög_move_x
 (SCM 
°r1
, SCM 
°¨t1
, SCM 
íd1
,

37 
SCM
 
°r2
, SCM 
°¨t2
);

38 
SCM_API
 
SCM
 
scm_°rög_èke
 (SCM 
s
, SCM 
n
);

39 
SCM_API
 
SCM
 
scm_°rög_dr›
 (SCM 
s
, SCM 
n
);

40 
SCM_API
 
SCM
 
scm_°rög_èke_right
 (SCM 
s
, SCM 
n
);

41 
SCM_API
 
SCM
 
scm_°rög_dr›_right
 (SCM 
s
, SCM 
n
);

42 
SCM_API
 
SCM
 
scm_°rög_∑d
 (SCM 
s
, SCM 
Àn
, SCM 
chr
, SCM 
°¨t
, SCM 
íd
);

43 
SCM_API
 
SCM
 
scm_°rög_∑d_right
 (SCM 
s
, SCM 
Àn
, SCM 
chr
, SCM 
°¨t
, SCM 
íd
);

44 
SCM_API
 
SCM
 
scm_°rög_åim
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

45 
SCM_API
 
SCM
 
scm_°rög_åim_right
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

46 
SCM_API
 
SCM
 
scm_°rög_åim_bŸh
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

47 
SCM_API
 
SCM
 
scm_sub°rög_fûl_x
 (SCM 
°r
, SCM 
chr
, SCM 
°¨t
, SCM 
íd
);

48 
SCM_API
 
SCM
 
scm_°rög_fûl_x
 (SCM 
°r
, SCM 
chr
);

49 
SCM_API
 
SCM
 
scm_°rög_com∑ª
 (SCM 
s1
, SCM 
s2
, SCM 
¥oc_…
, SCM 
¥oc_eq
, SCM 
¥oc_gt
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

50 
SCM_API
 
SCM
 
scm_°rög_com∑ª_ci
 (SCM 
s1
, SCM 
s2
, SCM 
¥oc_…
, SCM 
¥oc_eq
, SCM 
¥oc_gt
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

51 
SCM_API
 
SCM
 
scm_°rög_eq
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

52 
SCM_API
 
SCM
 
scm_°rög_√q
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

53 
SCM_API
 
SCM
 
scm_°rög_…
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

54 
SCM_API
 
SCM
 
scm_°rög_gt
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

55 
SCM_API
 
SCM
 
scm_°rög_À
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

56 
SCM_API
 
SCM
 
scm_°rög_ge
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

57 
SCM_API
 
SCM
 
scm_°rög_ci_eq
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

58 
SCM_API
 
SCM
 
scm_°rög_ci_√q
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

59 
SCM_API
 
SCM
 
scm_°rög_ci_…
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

60 
SCM_API
 
SCM
 
scm_°rög_ci_gt
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

61 
SCM_API
 
SCM
 
scm_°rög_ci_À
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

62 
SCM_API
 
SCM
 
scm_°rög_ci_ge
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

63 
SCM_API
 
SCM
 
scm_sub°rög_hash
 (SCM 
s
, SCM 
bound
, SCM 
°¨t
, SCM 
íd
);

64 
SCM_API
 
SCM
 
scm_sub°rög_hash_ci
 (SCM 
s
, SCM 
bound
, SCM 
°¨t
, SCM 
íd
);

65 
SCM_API
 
SCM
 
scm_°rög_¥efix_Àngth
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

66 
SCM_API
 
SCM
 
scm_°rög_¥efix_Àngth_ci
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

67 
SCM_API
 
SCM
 
scm_°rög_suffix_Àngth
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

68 
SCM_API
 
SCM
 
scm_°rög_suffix_Àngth_ci
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

69 
SCM_API
 
SCM
 
scm_°rög_¥efix_p
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

70 
SCM_API
 
SCM
 
scm_°rög_¥efix_ci_p
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

71 
SCM_API
 
SCM
 
scm_°rög_suffix_p
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

72 
SCM_API
 
SCM
 
scm_°rög_suffix_ci_p
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

73 
SCM_API
 
SCM
 
scm_°rög_ödex
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

74 
SCM_API
 
SCM
 
scm_°rög_ödex_right
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

75 
SCM_API
 
SCM
 
scm_°rög_rödex
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

76 
SCM_API
 
SCM
 
scm_°rög_skù
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

77 
SCM_API
 
SCM
 
scm_°rög_skù_right
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

78 
SCM_API
 
SCM
 
scm_°rög_cou¡
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

79 
SCM_API
 
SCM
 
scm_°rög_c⁄èös
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

80 
SCM_API
 
SCM
 
scm_°rög_c⁄èös_ci
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

81 
SCM_API
 
SCM
 
scm_sub°rög_upˇ£_x
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

82 
SCM_API
 
SCM
 
scm_sub°rög_upˇ£
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

83 
SCM_API
 
SCM
 
scm_°rög_upˇ£_x
 (SCM 
°r
);

84 
SCM_API
 
SCM
 
scm_°rög_upˇ£
 (SCM 
°r
);

85 
SCM_API
 
SCM
 
scm_sub°rög_downˇ£_x
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

86 
SCM_API
 
SCM
 
scm_sub°rög_downˇ£
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

87 
SCM_API
 
SCM
 
scm_°rög_downˇ£_x
 (SCM 
°r
);

88 
SCM_API
 
SCM
 
scm_°rög_downˇ£
 (SCM 
°r
);

89 
SCM_API
 
SCM
 
scm_°rög_tôÀˇ£_x
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

90 
SCM_API
 
SCM
 
scm_°rög_tôÀˇ£
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

91 
SCM_API
 
SCM
 
scm_°rög_ˇpôÆize_x
 (SCM 
°r
);

92 
SCM_API
 
SCM
 
scm_°rög_ˇpôÆize
 (SCM 
°r
);

93 
SCM_API
 
SCM
 
scm_°rög_ªvî£
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

94 
SCM_API
 
SCM
 
scm_°rög_ªvî£_x
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

95 
SCM_API
 
SCM
 
scm_°rög_≠≥nd_sh¨ed
 (SCM 
ls
);

96 
SCM_API
 
SCM
 
scm_°rög_c⁄ˇã«ã
 (SCM 
ls
);

97 
SCM_API
 
SCM
 
scm_°rög_c⁄ˇã«ã_sh¨ed
 (SCM 
ls
);

98 
SCM_API
 
SCM
 
scm_°rög_c⁄ˇã«ã_ªvî£
 (SCM 
ls
, SCM 
föÆ_°rög
, SCM 
íd
);

99 
SCM_API
 
SCM
 
scm_°rög_c⁄ˇã«ã_ªvî£_sh¨ed
 (SCM 
ls
, SCM 
föÆ_°rög
, SCM 
íd
);

100 
SCM_API
 
SCM
 
scm_°rög_m≠
 (SCM 
¥oc
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

101 
SCM_API
 
SCM
 
scm_°rög_m≠_x
 (SCM 
¥oc
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

102 
SCM_API
 
SCM
 
scm_°rög_fﬁd
 (SCM 
k⁄s
, SCM 
knû
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

103 
SCM_API
 
SCM
 
scm_°rög_fﬁd_right
 (SCM 
k⁄s
, SCM 
knû
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

104 
SCM_API
 
SCM
 
scm_°rög_unfﬁd
 (SCM 
p
, SCM 
f
, SCM 
g
, SCM 
£ed
, SCM 
ba£
, SCM 
make_föÆ
);

105 
SCM_API
 
SCM
 
scm_°rög_unfﬁd_right
 (SCM 
p
, SCM 
f
, SCM 
g
, SCM 
£ed
, SCM 
ba£
, SCM 
make_föÆ
);

106 
SCM_API
 
SCM
 
scm_°rög_f‹_óch
 (SCM 
¥oc
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

107 
SCM_API
 
SCM
 
scm_°rög_f‹_óch_ödex
 (SCM 
¥oc
, SCM 
s
, SCM 
°¨t
, SCM 
íd
);

108 
SCM_API
 
SCM
 
scm_xsub°rög
 (SCM 
s
, SCM 
‰om
, SCM 
to
, SCM 
°¨t
, SCM 
íd
);

109 
SCM_API
 
SCM
 
scm_°rög_xc›y_x
 (SCM 
èrgë
, SCM 
t°¨t
, SCM 
s
, SCM 
s‰om
, SCM 
°o
, SCM 
°¨t
, SCM 
íd
);

110 
SCM_API
 
SCM
 
scm_°rög_ª∂a˚
 (SCM 
s1
, SCM 
s2
, SCM 
°¨t1
, SCM 
íd1
, SCM 
°¨t2
, SCM 
íd2
);

111 
SCM_API
 
SCM
 
scm_°rög_tokíize
 (SCM 
s
, SCM 
tokí_ch¨
, SCM 
°¨t
, SCM 
íd
);

112 
SCM_API
 
SCM
 
scm_°rög_•lô
 (SCM 
s
, SCM 
chr
);

113 
SCM_API
 
SCM
 
scm_°rög_fûãr
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

114 
SCM_API
 
SCM
 
scm_°rög_dñëe
 (SCM 
s
, SCM 
ch¨_¥ed
, SCM 
°¨t
, SCM 
íd
);

116 
SCM_API
 
scm_öô_§fi_13
 ();

117 
SCM_API
 
scm_öô_§fi_13_14
 ();

	@/usr/include/libguile/srfi-14.h

1 #i‚de‡
SCM_SRFI_14_H


2 
	#SCM_SRFI_14_H


	)

24 
	~"libguûe/__scm.h
"

26 
	#SCM_CHARSET_SIZE
 256

	)

30 #i‚de‡
SCM_BITS_PER_LONG


31 
	#SCM_BITS_PER_LONG
 ( (Ë* 8)

	)

34 
	#SCM_CHARSET_GET
(
cs
, 
idx
Ë(((*Ë
	`SCM_SMOB_DATA
 (cs))\

35 [((Ë(
idx
)Ë/ 
SCM_BITS_PER_LONG
] &\

36 (1L << (((Ë(
idx
)Ë% 
SCM_BITS_PER_LONG
)))

	)

38 
	#SCM_CHARSETP
(
x
Ë(!
	`SCM_IMP
 (xË&& (
	`SCM_TYP16
 (xË=
scm_tc16_ch¨£t
))

	)

41 
SCM_API
 
	gscm_tc16_ch¨£t
;

43 
SCM_API
 
SCM
 
scm_ch¨_£t_p
 (SCM 
obj
);

44 
SCM_API
 
SCM
 
scm_ch¨_£t_eq
 (SCM 
ch¨_£ts
);

45 
SCM_API
 
SCM
 
scm_ch¨_£t_Àq
 (SCM 
ch¨_£ts
);

46 
SCM_API
 
SCM
 
scm_ch¨_£t_hash
 (SCM 
cs
, SCM 
bound
);

47 
SCM_API
 
SCM
 
scm_ch¨_£t_curs‹
 (SCM 
cs
);

48 
SCM_API
 
SCM
 
scm_ch¨_£t_ªf
 (SCM 
cs
, SCM 
curs‹
);

49 
SCM_API
 
SCM
 
scm_ch¨_£t_curs‹_√xt
 (SCM 
cs
, SCM 
curs‹
);

50 
SCM_API
 
SCM
 
scm_íd_of_ch¨_£t_p
 (SCM 
curs‹
);

51 
SCM_API
 
SCM
 
scm_ch¨_£t_fﬁd
 (SCM 
k⁄s
, SCM 
knû
, SCM 
cs
);

52 
SCM_API
 
SCM
 
scm_ch¨_£t_unfﬁd
 (SCM 
p
, SCM 
f
, SCM 
g
, SCM 
£ed
, SCM 
ba£_cs
);

53 
SCM_API
 
SCM
 
scm_ch¨_£t_unfﬁd_x
 (SCM 
p
, SCM 
f
, SCM 
g
, SCM 
£ed
, SCM 
ba£_cs
);

54 
SCM_API
 
SCM
 
scm_ch¨_£t_f‹_óch
 (SCM 
¥oc
, SCM 
cs
);

55 
SCM_API
 
SCM
 
scm_ch¨_£t_m≠
 (SCM 
¥oc
, SCM 
cs
);

56 
SCM_API
 
SCM
 
scm_ch¨_£t_c›y
 (SCM 
cs
);

57 
SCM_API
 
SCM
 
scm_ch¨_£t
 (SCM 
ª°
);

58 
SCM_API
 
SCM
 
scm_li°_to_ch¨_£t
 (SCM 
li°
, SCM 
ba£_cs
);

59 
SCM_API
 
SCM
 
scm_li°_to_ch¨_£t_x
 (SCM 
li°
, SCM 
ba£_cs
);

60 
SCM_API
 
SCM
 
scm_°rög_to_ch¨_£t
 (SCM 
°r
, SCM 
ba£_cs
);

61 
SCM_API
 
SCM
 
scm_°rög_to_ch¨_£t_x
 (SCM 
°r
, SCM 
ba£_cs
);

62 
SCM_API
 
SCM
 
scm_ch¨_£t_fûãr
 (SCM 
¥ed
, SCM 
cs
, SCM 
ba£_cs
);

63 
SCM_API
 
SCM
 
scm_ch¨_£t_fûãr_x
 (SCM 
¥ed
, SCM 
cs
, SCM 
ba£_cs
);

64 
SCM_API
 
SCM
 
scm_ucs_ønge_to_ch¨_£t
 (SCM 
lowî
, SCM 
uµî
, SCM 
îr‹
, SCM 
ba£_cs
);

65 
SCM_API
 
SCM
 
scm_ucs_ønge_to_ch¨_£t_x
 (SCM 
lowî
, SCM 
uµî
, SCM 
îr‹
, SCM 
ba£_cs
);

66 
SCM_API
 
SCM
 
scm_to_ch¨_£t
 (SCM 
x
);

67 
SCM_API
 
SCM
 
scm_ch¨_£t_size
 (SCM 
cs
);

68 
SCM_API
 
SCM
 
scm_ch¨_£t_cou¡
 (SCM 
¥ed
, SCM 
cs
);

69 
SCM_API
 
SCM
 
scm_ch¨_£t_to_li°
 (SCM 
cs
);

70 
SCM_API
 
SCM
 
scm_ch¨_£t_to_°rög
 (SCM 
cs
);

71 
SCM_API
 
SCM
 
scm_ch¨_£t_c⁄èös_p
 (SCM 
cs
, SCM 
ch
);

72 
SCM_API
 
SCM
 
scm_ch¨_£t_evîy
 (SCM 
¥ed
, SCM 
cs
);

73 
SCM_API
 
SCM
 
scm_ch¨_£t_™y
 (SCM 
¥ed
, SCM 
cs
);

74 
SCM_API
 
SCM
 
scm_ch¨_£t_adjoö
 (SCM 
cs
, SCM 
ª°
);

75 
SCM_API
 
SCM
 
scm_ch¨_£t_dñëe
 (SCM 
cs
, SCM 
ª°
);

76 
SCM_API
 
SCM
 
scm_ch¨_£t_adjoö_x
 (SCM 
cs
, SCM 
ª°
);

77 
SCM_API
 
SCM
 
scm_ch¨_£t_dñëe_x
 (SCM 
cs
, SCM 
ª°
);

78 
SCM_API
 
SCM
 
scm_ch¨_£t_com∂emít
 (SCM 
cs
);

79 
SCM_API
 
SCM
 
scm_ch¨_£t_uni⁄
 (SCM 
ª°
);

80 
SCM_API
 
SCM
 
scm_ch¨_£t_öãr£˘i⁄
 (SCM 
ª°
);

81 
SCM_API
 
SCM
 
scm_ch¨_£t_dif„ªn˚
 (SCM 
cs1
, SCM 
ª°
);

82 
SCM_API
 
SCM
 
scm_ch¨_£t_x‹
 (SCM 
ª°
);

83 
SCM_API
 
SCM
 
scm_ch¨_£t_diff_∂us_öãr£˘i⁄
 (SCM 
cs1
, SCM 
ª°
);

84 
SCM_API
 
SCM
 
scm_ch¨_£t_com∂emít_x
 (SCM 
cs
);

85 
SCM_API
 
SCM
 
scm_ch¨_£t_uni⁄_x
 (SCM 
cs1
, SCM 
ª°
);

86 
SCM_API
 
SCM
 
scm_ch¨_£t_öãr£˘i⁄_x
 (SCM 
cs1
, SCM 
ª°
);

87 
SCM_API
 
SCM
 
scm_ch¨_£t_dif„ªn˚_x
 (SCM 
cs1
, SCM 
ª°
);

88 
SCM_API
 
SCM
 
scm_ch¨_£t_x‹_x
 (SCM 
cs1
, SCM 
ª°
);

89 
SCM_API
 
SCM
 
scm_ch¨_£t_diff_∂us_öãr£˘i⁄_x
 (SCM 
cs1
, SCM 
cs2
, SCM 
ª°
);

91 
SCM_API
 
SCM
 
	gscm_ch¨_£t_lowî_ˇ£
;

92 
SCM_API
 
SCM
 
	gscm_ch¨_£t_uµî_ˇ£
;

93 
SCM_API
 
SCM
 
	gscm_ch¨_£t_tôÀ_ˇ£
;

94 
SCM_API
 
SCM
 
	gscm_ch¨_£t_Àâî
;

95 
SCM_API
 
SCM
 
	gscm_ch¨_£t_digô
;

96 
SCM_API
 
SCM
 
	gscm_ch¨_£t_Àâî_™d_digô
;

97 
SCM_API
 
SCM
 
	gscm_ch¨_£t_gøphic
;

98 
SCM_API
 
SCM
 
	gscm_ch¨_£t_¥ötög
;

99 
SCM_API
 
SCM
 
	gscm_ch¨_£t_whôe•a˚
;

100 
SCM_API
 
SCM
 
	gscm_ch¨_£t_iso_c⁄åﬁ
;

101 
SCM_API
 
SCM
 
	gscm_ch¨_£t_pun˘u©i⁄
;

102 
SCM_API
 
SCM
 
	gscm_ch¨_£t_symbﬁ
;

103 
SCM_API
 
SCM
 
	gscm_ch¨_£t_hex_digô
;

104 
SCM_API
 
SCM
 
	gscm_ch¨_£t_bœnk
;

105 
SCM_API
 
SCM
 
	gscm_ch¨_£t_ascii
;

106 
SCM_API
 
SCM
 
	gscm_ch¨_£t_em±y
;

107 
SCM_API
 
SCM
 
	gscm_ch¨_£t_fuŒ
;

109 
SCM_API
 
scm_§fi_14_compuã_ch¨_£ts
 ();

110 
SCM_API
 
scm_öô_§fi_14
 ();

	@/usr/include/libguile/srfi-4.h

1 #i‚de‡
SCM_SRFI_4_H


2 
	#SCM_SRFI_4_H


	)

23 
	~"libguûe/__scm.h
"

24 
	~"libguûe/unif.h
"

29 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_p
 (SCM 
v
);

30 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_Àngth
 (SCM 
v
);

31 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_ªf
 (SCM 
v
, SCM 
idx
);

32 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_£t_x
 (SCM 
v
, SCM 
idx
, SCM 
vÆ
);

33 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_to_li°
 (SCM 
v
);

34 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_ªad_x
 (SCM 
v
, SCM 
p‹t_‹_fd
,

35 
SCM
 
°¨t
, SCM 
íd
);

36 
SCM_API
 
SCM
 
scm_unif‹m_ve˘‹_wrôe
 (SCM 
v
, SCM 
p‹t_‹_fd
,

37 
SCM
 
°¨t
, SCM 
íd
);

39 
SCM_API
 
scm_is_unif‹m_ve˘‹
 (
SCM
 
obj
);

40 
SCM_API
 
size_t
 
scm_c_unif‹m_ve˘‹_Àngth
 (
SCM
 
v
);

41 
SCM_API
 
SCM
 
scm_c_unif‹m_ve˘‹_ªf
 (SCM 
v
, 
size_t
 
idx
);

42 
SCM_API
 
scm_c_unif‹m_ve˘‹_£t_x
 (
SCM
 
v
, 
size_t
 
idx
, SCM 
vÆ
);

43 
SCM_API
 
size_t
 
scm_¨øy_h™dÀ_unif‹m_ñemít_size
 (
scm_t_¨øy_h™dÀ
 *
h
);

44 
SCM_API
 c⁄° *
scm_¨øy_h™dÀ_unif‹m_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

45 
SCM_API
 *
scm_¨øy_h™dÀ_unif‹m_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

46 
SCM_API
 c⁄° *
scm_unif‹m_ve˘‹_ñemíts
 (
SCM
 
uvec
,

47 
scm_t_¨øy_h™dÀ
 *
h
,

48 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

49 
SCM_API
 *
scm_unif‹m_ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

50 
scm_t_¨øy_h™dÀ
 *
h
,

51 
size_t
 *
À≈
,

52 
ssize_t
 *
ö˝
);

57 
SCM_API
 
SCM
 
scm_u8ve˘‹_p
 (SCM 
obj
);

58 
SCM_API
 
SCM
 
scm_make_u8ve˘‹
 (SCM 
n
, SCM 
fûl
);

59 
SCM_API
 
SCM
 
scm_èke_u8ve˘‹
 (
scm_t_uöt8
 *
d©a
, 
size_t
 
n
);

60 
SCM_API
 
SCM
 
scm_u8ve˘‹
 (SCM 
l
);

61 
SCM_API
 
SCM
 
scm_u8ve˘‹_Àngth
 (SCM 
uvec
);

62 
SCM_API
 
SCM
 
scm_u8ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

63 
SCM_API
 
SCM
 
scm_u8ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

64 
SCM_API
 
SCM
 
scm_u8ve˘‹_to_li°
 (SCM 
uvec
);

65 
SCM_API
 
SCM
 
scm_li°_to_u8ve˘‹
 (SCM 
l
);

66 
SCM_API
 
SCM
 
scm_™y_to_u8ve˘‹
 (SCM 
obj
);

67 
SCM_API
 c⁄° 
scm_t_uöt8
 *
scm_¨øy_h™dÀ_u8_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

68 
SCM_API
 
scm_t_uöt8
 *
scm_¨øy_h™dÀ_u8_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

69 
SCM_API
 c⁄° 
scm_t_uöt8
 *
scm_u8ve˘‹_ñemíts
 (
SCM
 
uvec
,

70 
scm_t_¨øy_h™dÀ
 *
h
,

71 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

72 
SCM_API
 
scm_t_uöt8
 *
scm_u8ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

73 
scm_t_¨øy_h™dÀ
 *
h
,

74 
size_t
 *
À≈
,

75 
ssize_t
 *
ö˝
);

77 
SCM_API
 
SCM
 
scm_s8ve˘‹_p
 (SCM 
obj
);

78 
SCM_API
 
SCM
 
scm_make_s8ve˘‹
 (SCM 
n
, SCM 
fûl
);

79 
SCM_API
 
SCM
 
scm_èke_s8ve˘‹
 (
scm_t_öt8
 *
d©a
, 
size_t
 
n
);

80 
SCM_API
 
SCM
 
scm_s8ve˘‹
 (SCM 
l
);

81 
SCM_API
 
SCM
 
scm_s8ve˘‹_Àngth
 (SCM 
uvec
);

82 
SCM_API
 
SCM
 
scm_s8ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

83 
SCM_API
 
SCM
 
scm_s8ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

84 
SCM_API
 
SCM
 
scm_s8ve˘‹_to_li°
 (SCM 
uvec
);

85 
SCM_API
 
SCM
 
scm_li°_to_s8ve˘‹
 (SCM 
l
);

86 
SCM_API
 
SCM
 
scm_™y_to_s8ve˘‹
 (SCM 
obj
);

87 
SCM_API
 c⁄° 
scm_t_öt8
 *
scm_¨øy_h™dÀ_s8_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

88 
SCM_API
 
scm_t_öt8
 *
scm_¨øy_h™dÀ_s8_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

89 
SCM_API
 c⁄° 
scm_t_öt8
 *
scm_s8ve˘‹_ñemíts
 (
SCM
 
uvec
,

90 
scm_t_¨øy_h™dÀ
 *
h
,

91 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

92 
SCM_API
 
scm_t_öt8
 *
scm_s8ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

93 
scm_t_¨øy_h™dÀ
 *
h
,

94 
size_t
 *
À≈
,

95 
ssize_t
 *
ö˝
);

97 
SCM_API
 
SCM
 
scm_u16ve˘‹_p
 (SCM 
obj
);

98 
SCM_API
 
SCM
 
scm_make_u16ve˘‹
 (SCM 
n
, SCM 
fûl
);

99 
SCM_API
 
SCM
 
scm_èke_u16ve˘‹
 (
scm_t_uöt16
 *
d©a
, 
size_t
 
n
);

100 
SCM_API
 
SCM
 
scm_u16ve˘‹
 (SCM 
l
);

101 
SCM_API
 
SCM
 
scm_u16ve˘‹_Àngth
 (SCM 
uvec
);

102 
SCM_API
 
SCM
 
scm_u16ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

103 
SCM_API
 
SCM
 
scm_u16ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

104 
SCM_API
 
SCM
 
scm_u16ve˘‹_to_li°
 (SCM 
uvec
);

105 
SCM_API
 
SCM
 
scm_li°_to_u16ve˘‹
 (SCM 
l
);

106 
SCM_API
 
SCM
 
scm_™y_to_u16ve˘‹
 (SCM 
obj
);

107 
SCM_API
 c⁄° 
scm_t_uöt16
 *
scm_¨øy_h™dÀ_u16_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

108 
SCM_API
 
scm_t_uöt16
 *
scm_¨øy_h™dÀ_u16_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

109 
SCM_API
 c⁄° 
scm_t_uöt16
 *
scm_u16ve˘‹_ñemíts
 (
SCM
 
uvec
,

110 
scm_t_¨øy_h™dÀ
 *
h
,

111 
size_t
 *
À≈
,

112 
ssize_t
 *
ö˝
);

113 
SCM_API
 
scm_t_uöt16
 *
scm_u16ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

114 
scm_t_¨øy_h™dÀ
 *
h
,

115 
size_t
 *
À≈
,

116 
ssize_t
 *
ö˝
);

118 
SCM_API
 
SCM
 
scm_s16ve˘‹_p
 (SCM 
obj
);

119 
SCM_API
 
SCM
 
scm_make_s16ve˘‹
 (SCM 
n
, SCM 
fûl
);

120 
SCM_API
 
SCM
 
scm_èke_s16ve˘‹
 (
scm_t_öt16
 *
d©a
, 
size_t
 
n
);

121 
SCM_API
 
SCM
 
scm_s16ve˘‹
 (SCM 
l
);

122 
SCM_API
 
SCM
 
scm_s16ve˘‹_Àngth
 (SCM 
uvec
);

123 
SCM_API
 
SCM
 
scm_s16ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

124 
SCM_API
 
SCM
 
scm_s16ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

125 
SCM_API
 
SCM
 
scm_s16ve˘‹_to_li°
 (SCM 
uvec
);

126 
SCM_API
 
SCM
 
scm_li°_to_s16ve˘‹
 (SCM 
l
);

127 
SCM_API
 
SCM
 
scm_™y_to_s16ve˘‹
 (SCM 
obj
);

128 
SCM_API
 c⁄° 
scm_t_öt16
 *
scm_¨øy_h™dÀ_s16_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

129 
SCM_API
 
scm_t_öt16
 *
scm_¨øy_h™dÀ_s16_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

130 
SCM_API
 c⁄° 
scm_t_öt16
 *
scm_s16ve˘‹_ñemíts
 (
SCM
 
uvec
,

131 
scm_t_¨øy_h™dÀ
 *
h
,

132 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

133 
SCM_API
 
scm_t_öt16
 *
scm_s16ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

134 
scm_t_¨øy_h™dÀ
 *
h
,

135 
size_t
 *
À≈
,

136 
ssize_t
 *
ö˝
);

138 
SCM_API
 
SCM
 
scm_u32ve˘‹_p
 (SCM 
obj
);

139 
SCM_API
 
SCM
 
scm_make_u32ve˘‹
 (SCM 
n
, SCM 
fûl
);

140 
SCM_API
 
SCM
 
scm_èke_u32ve˘‹
 (
scm_t_uöt32
 *
d©a
, 
size_t
 
n
);

141 
SCM_API
 
SCM
 
scm_u32ve˘‹
 (SCM 
l
);

142 
SCM_API
 
SCM
 
scm_u32ve˘‹_Àngth
 (SCM 
uvec
);

143 
SCM_API
 
SCM
 
scm_u32ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

144 
SCM_API
 
SCM
 
scm_u32ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

145 
SCM_API
 
SCM
 
scm_u32ve˘‹_to_li°
 (SCM 
uvec
);

146 
SCM_API
 
SCM
 
scm_li°_to_u32ve˘‹
 (SCM 
l
);

147 
SCM_API
 
SCM
 
scm_™y_to_u32ve˘‹
 (SCM 
obj
);

148 
SCM_API
 c⁄° 
scm_t_uöt32
 *
scm_¨øy_h™dÀ_u32_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

149 
SCM_API
 
scm_t_uöt32
 *
scm_¨øy_h™dÀ_u32_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

150 
SCM_API
 c⁄° 
scm_t_uöt32
 *
scm_u32ve˘‹_ñemíts
 (
SCM
 
uvec
,

151 
scm_t_¨øy_h™dÀ
 *
h
,

152 
size_t
 *
À≈
,

153 
ssize_t
 *
ö˝
);

154 
SCM_API
 
scm_t_uöt32
 *
scm_u32ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

155 
scm_t_¨øy_h™dÀ
 *
h
,

156 
size_t
 *
À≈
,

157 
ssize_t
 *
ö˝
);

159 
SCM_API
 
SCM
 
scm_s32ve˘‹_p
 (SCM 
obj
);

160 
SCM_API
 
SCM
 
scm_make_s32ve˘‹
 (SCM 
n
, SCM 
fûl
);

161 
SCM_API
 
SCM
 
scm_èke_s32ve˘‹
 (
scm_t_öt32
 *
d©a
, 
size_t
 
n
);

162 
SCM_API
 
SCM
 
scm_s32ve˘‹
 (SCM 
l
);

163 
SCM_API
 
SCM
 
scm_s32ve˘‹_Àngth
 (SCM 
uvec
);

164 
SCM_API
 
SCM
 
scm_s32ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

165 
SCM_API
 
SCM
 
scm_s32ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

166 
SCM_API
 
SCM
 
scm_s32ve˘‹_to_li°
 (SCM 
uvec
);

167 
SCM_API
 
SCM
 
scm_li°_to_s32ve˘‹
 (SCM 
l
);

168 
SCM_API
 
SCM
 
scm_™y_to_s32ve˘‹
 (SCM 
obj
);

169 
SCM_API
 c⁄° 
scm_t_öt32
 *
scm_¨øy_h™dÀ_s32_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

170 
SCM_API
 
scm_t_öt32
 *
scm_¨øy_h™dÀ_s32_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

171 
SCM_API
 c⁄° 
scm_t_öt32
 *
scm_s32ve˘‹_ñemíts
 (
SCM
 
uvec
,

172 
scm_t_¨øy_h™dÀ
 *
h
,

173 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

174 
SCM_API
 
scm_t_öt32
 *
scm_s32ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

175 
scm_t_¨øy_h™dÀ
 *
h
,

176 
size_t
 *
À≈
,

177 
ssize_t
 *
ö˝
);

179 
SCM_API
 
SCM
 
scm_u64ve˘‹_p
 (SCM 
obj
);

180 
SCM_API
 
SCM
 
scm_make_u64ve˘‹
 (SCM 
n
, SCM 
fûl
);

181 
SCM_API
 
SCM
 
scm_u64ve˘‹
 (SCM 
l
);

182 
SCM_API
 
SCM
 
scm_u64ve˘‹_Àngth
 (SCM 
uvec
);

183 
SCM_API
 
SCM
 
scm_u64ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

184 
SCM_API
 
SCM
 
scm_u64ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

185 
SCM_API
 
SCM
 
scm_u64ve˘‹_to_li°
 (SCM 
uvec
);

186 
SCM_API
 
SCM
 
scm_li°_to_u64ve˘‹
 (SCM 
l
);

187 
SCM_API
 
SCM
 
scm_™y_to_u64ve˘‹
 (SCM 
obj
);

189 #i‡
SCM_HAVE_T_UINT64


190 
SCM_API
 
SCM
 
scm_èke_u64ve˘‹
 (
scm_t_uöt64
 *
d©a
, 
size_t
 
n
);

191 
SCM_API
 c⁄° 
scm_t_uöt64
 *
scm_¨øy_h™dÀ_u64_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

192 
SCM_API
 
scm_t_uöt64
 *
scm_¨øy_h™dÀ_u64_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

193 
SCM_API
 c⁄° 
scm_t_uöt64
 *
scm_u64ve˘‹_ñemíts
 (
SCM
 
uvec
,

194 
scm_t_¨øy_h™dÀ
 *
h
,

195 
size_t
 *
À≈
,

196 
ssize_t
 *
ö˝
);

197 
SCM_API
 
scm_t_uöt64
 *
scm_u64ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

198 
scm_t_¨øy_h™dÀ
 *
h
,

199 
size_t
 *
À≈
,

200 
ssize_t
 *
ö˝
);

203 
SCM_API
 
SCM
 
scm_s64ve˘‹_p
 (SCM 
obj
);

204 
SCM_API
 
SCM
 
scm_make_s64ve˘‹
 (SCM 
n
, SCM 
fûl
);

205 
SCM_API
 
SCM
 
scm_s64ve˘‹
 (SCM 
l
);

206 
SCM_API
 
SCM
 
scm_s64ve˘‹_Àngth
 (SCM 
uvec
);

207 
SCM_API
 
SCM
 
scm_s64ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

208 
SCM_API
 
SCM
 
scm_s64ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

209 
SCM_API
 
SCM
 
scm_s64ve˘‹_to_li°
 (SCM 
uvec
);

210 
SCM_API
 
SCM
 
scm_li°_to_s64ve˘‹
 (SCM 
l
);

211 
SCM_API
 
SCM
 
scm_™y_to_s64ve˘‹
 (SCM 
obj
);

213 #i‡
SCM_HAVE_T_INT64


214 
SCM_API
 
SCM
 
scm_èke_s64ve˘‹
 (
scm_t_öt64
 *
d©a
, 
size_t
 
n
);

215 
SCM_API
 c⁄° 
scm_t_öt64
 *
scm_¨øy_h™dÀ_s64_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

216 
SCM_API
 
scm_t_öt64
 *
scm_¨øy_h™dÀ_s64_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

217 
SCM_API
 c⁄° 
scm_t_öt64
 *
scm_s64ve˘‹_ñemíts
 (
SCM
 
uvec
,

218 
scm_t_¨øy_h™dÀ
 *
h
,

219 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

220 
SCM_API
 
scm_t_öt64
 *
scm_s64ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

221 
scm_t_¨øy_h™dÀ
 *
h
,

222 
size_t
 *
À≈
,

223 
ssize_t
 *
ö˝
);

226 
SCM_API
 
SCM
 
scm_f32ve˘‹_p
 (SCM 
obj
);

227 
SCM_API
 
SCM
 
scm_make_f32ve˘‹
 (SCM 
n
, SCM 
fûl
);

228 
SCM_API
 
SCM
 
scm_èke_f32ve˘‹
 (*
d©a
, 
size_t
 
n
);

229 
SCM_API
 
SCM
 
scm_f32ve˘‹
 (SCM 
l
);

230 
SCM_API
 
SCM
 
scm_f32ve˘‹_Àngth
 (SCM 
uvec
);

231 
SCM_API
 
SCM
 
scm_f32ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

232 
SCM_API
 
SCM
 
scm_f32ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

233 
SCM_API
 
SCM
 
scm_f32ve˘‹_to_li°
 (SCM 
uvec
);

234 
SCM_API
 
SCM
 
scm_li°_to_f32ve˘‹
 (SCM 
l
);

235 
SCM_API
 
SCM
 
scm_™y_to_f32ve˘‹
 (SCM 
obj
);

236 
SCM_API
 c⁄° *
scm_¨øy_h™dÀ_f32_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

237 
SCM_API
 *
scm_¨øy_h™dÀ_f32_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

238 
SCM_API
 c⁄° *
scm_f32ve˘‹_ñemíts
 (
SCM
 
uvec
,

239 
scm_t_¨øy_h™dÀ
 *
h
,

240 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

241 
SCM_API
 *
scm_f32ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

242 
scm_t_¨øy_h™dÀ
 *
h
,

243 
size_t
 *
À≈
,

244 
ssize_t
 *
ö˝
);

246 
SCM_API
 
SCM
 
scm_f64ve˘‹_p
 (SCM 
obj
);

247 
SCM_API
 
SCM
 
scm_make_f64ve˘‹
 (SCM 
n
, SCM 
fûl
);

248 
SCM_API
 
SCM
 
scm_èke_f64ve˘‹
 (*
d©a
, 
size_t
 
n
);

249 
SCM_API
 
SCM
 
scm_f64ve˘‹
 (SCM 
l
);

250 
SCM_API
 
SCM
 
scm_f64ve˘‹_Àngth
 (SCM 
uvec
);

251 
SCM_API
 
SCM
 
scm_f64ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

252 
SCM_API
 
SCM
 
scm_f64ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

253 
SCM_API
 
SCM
 
scm_f64ve˘‹_to_li°
 (SCM 
uvec
);

254 
SCM_API
 
SCM
 
scm_li°_to_f64ve˘‹
 (SCM 
l
);

255 
SCM_API
 
SCM
 
scm_™y_to_f64ve˘‹
 (SCM 
obj
);

256 
SCM_API
 c⁄° *
scm_¨øy_h™dÀ_f64_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

257 
SCM_API
 *
scm_¨øy_h™dÀ_f64_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

258 
SCM_API
 c⁄° *
scm_f64ve˘‹_ñemíts
 (
SCM
 
uvec
,

259 
scm_t_¨øy_h™dÀ
 *
h
,

260 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

261 
SCM_API
 *
scm_f64ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

262 
scm_t_¨øy_h™dÀ
 *
h
,

263 
size_t
 *
À≈
,

264 
ssize_t
 *
ö˝
);

266 
SCM_API
 
SCM
 
scm_c32ve˘‹_p
 (SCM 
obj
);

267 
SCM_API
 
SCM
 
scm_make_c32ve˘‹
 (SCM 
n
, SCM 
fûl
);

268 
SCM_API
 
SCM
 
scm_èke_c32ve˘‹
 (*
d©a
, 
size_t
 
n
);

269 
SCM_API
 
SCM
 
scm_c32ve˘‹
 (SCM 
l
);

270 
SCM_API
 
SCM
 
scm_c32ve˘‹_Àngth
 (SCM 
uvec
);

271 
SCM_API
 
SCM
 
scm_c32ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

272 
SCM_API
 
SCM
 
scm_c32ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

273 
SCM_API
 
SCM
 
scm_c32ve˘‹_to_li°
 (SCM 
uvec
);

274 
SCM_API
 
SCM
 
scm_li°_to_c32ve˘‹
 (SCM 
l
);

275 
SCM_API
 
SCM
 
scm_™y_to_c32ve˘‹
 (SCM 
obj
);

276 
SCM_API
 c⁄° *
scm_¨øy_h™dÀ_c32_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

277 
SCM_API
 *
scm_¨øy_h™dÀ_c32_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

278 
SCM_API
 c⁄° *
scm_c32ve˘‹_ñemíts
 (
SCM
 
uvec
,

279 
scm_t_¨øy_h™dÀ
 *
h
,

280 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

281 
SCM_API
 *
scm_c32ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

282 
scm_t_¨øy_h™dÀ
 *
h
,

283 
size_t
 *
À≈
,

284 
ssize_t
 *
ö˝
);

286 
SCM_API
 
SCM
 
scm_c64ve˘‹_p
 (SCM 
obj
);

287 
SCM_API
 
SCM
 
scm_make_c64ve˘‹
 (SCM 
n
, SCM 
fûl
);

288 
SCM_API
 
SCM
 
scm_èke_c64ve˘‹
 (*
d©a
, 
size_t
 
n
);

289 
SCM_API
 
SCM
 
scm_c64ve˘‹
 (SCM 
l
);

290 
SCM_API
 
SCM
 
scm_c64ve˘‹_Àngth
 (SCM 
uvec
);

291 
SCM_API
 
SCM
 
scm_c64ve˘‹_ªf
 (SCM 
uvec
, SCM 
ödex
);

292 
SCM_API
 
SCM
 
scm_c64ve˘‹_£t_x
 (SCM 
uvec
, SCM 
ödex
, SCM 
vÆue
);

293 
SCM_API
 
SCM
 
scm_c64ve˘‹_to_li°
 (SCM 
uvec
);

294 
SCM_API
 
SCM
 
scm_li°_to_c64ve˘‹
 (SCM 
l
);

295 
SCM_API
 
SCM
 
scm_™y_to_c64ve˘‹
 (SCM 
obj
);

296 
SCM_API
 c⁄° *
scm_¨øy_h™dÀ_c64_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

297 
SCM_API
 *
scm_¨øy_h™dÀ_c64_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

298 
SCM_API
 c⁄° *
scm_c64ve˘‹_ñemíts
 (
SCM
 
uvec
,

299 
scm_t_¨øy_h™dÀ
 *
h
,

300 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

301 
SCM_API
 *
scm_c64ve˘‹_wrôabÀ_ñemíts
 (
SCM
 
uvec
,

302 
scm_t_¨øy_h™dÀ
 *
h
,

303 
size_t
 *
À≈
,

304 
ssize_t
 *
ö˝
);

306 
SCM_API
 
SCM
 
scm_i_gíîÆized_ve˘‹_ty≥
 (SCM 
vec
);

307 
SCM_API
 c⁄° *
scm_i_unif‹m_ve˘‹_èg
 (
SCM
 
uvec
);

308 
SCM_API
 
scm_i_t_¨øy_ªf
 
scm_i_unif‹m_ve˘‹_ªf_¥oc
 (
SCM
 
uvec
);

309 
SCM_API
 
scm_i_t_¨øy_£t
 
scm_i_unif‹m_ve˘‹_£t_¥oc
 (
SCM
 
uvec
);

311 #i‡
SCM_ENABLE_DEPRECATED


317 
SCM_API
 
size_t
 
scm_unif‹m_ñemít_size
 (
SCM
 
obj
);

321 
SCM_API
 
scm_öô_§fi_4
 ();

	@/usr/include/libguile/stackchk.h

3 #i‚de‡
SCM_STACKCHK_H


4 
	#SCM_STACKCHK_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~"libguûe/c⁄töu©i⁄s.h
"

28 
	~"libguûe/debug.h
"

34 
	#SCM_STACK_CHECKING_P
 
SCM_STACK_LIMIT


	)

36 #ifde‡
STACK_CHECKING


37 #i‡
SCM_STACK_GROWS_UP


38 
	#SCM_STACK_OVERFLOW_P
(
s
)\

39 (
	`SCM_STACK_PTR
 (
s
) \

40 > (
SCM_I_CURRENT_THREAD
->
ba£
 + 
SCM_STACK_LIMIT
))

	)

42 
	#SCM_STACK_OVERFLOW_P
(
s
)\

43 (
	`SCM_STACK_PTR
 (
s
) \

44 < (
SCM_I_CURRENT_THREAD
->
ba£
 - 
SCM_STACK_LIMIT
))

	)

46 
	#SCM_CHECK_STACK
\

48 
SCM_STACKITEM
 
°ack
;\

49 i‡(
	`SCM_STACK_OVERFLOW_P
 (&
°ack
Ë&& 
scm_°ack_checkög_íabÀd_p
)\

50 
	`scm_ªp‹t_°ack_ovîÊow
 ();\

51 }

	)

53 
	#SCM_CHECK_STACK


	)

56 
SCM_API
 
	gscm_°ack_checkög_íabÀd_p
;

60 
SCM_API
 
scm_ªp‹t_°ack_ovîÊow
 ();

61 
SCM_API
 
scm_°ack_size
 (
SCM_STACKITEM
 *
°¨t
);

62 
SCM_API
 
scm_°ack_ªp‹t
 ();

63 
SCM_API
 
SCM
 
scm_sys_gë_°ack_size
 ();

64 
SCM_API
 
scm_öô_°ackchk
 ();

	@/usr/include/libguile/stacks.h

3 #i‚de‡
SCM_STACKS_H


4 
	#SCM_STACKS_H


	)

25 
	~"libguûe/__scm.h
"

30 
	sscm_t_öfo_‰ame
 {

32 
scm_t_bôs
 
	mÊags
;

33 
SCM
 
	msour˚
;

34 
SCM
 
	m¥oc
;

35 
SCM
 
	m¨gs
;

36 } 
	tscm_t_öfo_‰ame
;

37 
	#SCM_FRAME_N_SLOTS
 ( (
scm_t_öfo_‰ame
Ë/  (
SCM
))

	)

39 
	#SCM_STACK
(
obj
Ë((
scm_t_°ack
 *Ë
	`SCM_STRUCT_DATA
 (obj))

	)

40 
	#SCM_STACK_LAYOUT
 "pwuouΩW"

	)

41 
	sscm_t_°ack
 {

42 
SCM
 
	mid
;

43 
scm_t_öfo_‰ame
 *
	m‰ames
;

44 
	mÀngth
;

45 
	mèû_Àngth
;

46 
scm_t_öfo_‰ame
 
	mèû
[1];

47 } 
	tscm_t_°ack
;

49 
SCM_API
 
SCM
 
	gscm_°ack_ty≥
;

51 
	#SCM_STACKP
(
obj
Ë(
	`SCM_STRUCTP
 (objË&& 
	`scm_is_eq
 (
	`SCM_STRUCT_VTABLE
 (obj), 
scm_°ack_ty≥
))

	)

52 
	#SCM_STACK_LENGTH
(
°ack
Ë(
	`SCM_STACK
 (°ackË-> 
Àngth
)

	)

54 
	#SCM_FRAMEP
(
obj
) \

55 (
	`scm_is_∑ú
 (
obj
Ë&& 
	`SCM_STACKP
 (
	`SCM_CAR
 (obj)) \

56 && 
	`scm_is_unsig√d_öãgî
 (
	`SCM_CDR
 (
obj
), \

57 0, 
	`SCM_STACK_LENGTH
 (
	`SCM_CAR
 (
obj
))-1))

	)

59 
	#SCM_FRAME_REF
(
‰ame
, 
¶Ÿ
) \

60 (
	`SCM_STACK
 (
	`SCM_CAR
 (
‰ame
)Ë-> 
‰ames
[
	`scm_to_size_t
 (
	`SCM_CDR
 (‰ame))].
¶Ÿ
)

	)

62 
	#SCM_FRAME_NUMBER
(
‰ame
) \

63 (
SCM_BACKWARDS_P
 \

64 ? 
	`scm_to_size_t
 (
	`SCM_CDR
 (
‰ame
)) \

65 : (
	`SCM_STACK_LENGTH
 (
	`SCM_CAR
 (
‰ame
)) \

66 - 
	`scm_to_size_t
 (
	`SCM_CDR
 (
‰ame
)) \

68 

	)

69 
	#SCM_FRAME_FLAGS
(
‰ame
Ë
	`SCM_FRAME_REF
 (‰ame, 
Êags
)

	)

70 
	#SCM_FRAME_SOURCE
(
‰ame
Ë
	`SCM_FRAME_REF
 (‰ame, 
sour˚
)

	)

71 
	#SCM_FRAME_PROC
(
‰ame
Ë
	`SCM_FRAME_REF
 (‰ame, 
¥oc
)

	)

72 
	#SCM_FRAME_ARGS
(
‰ame
Ë
	`SCM_FRAME_REF
 (‰ame, 
¨gs
)

	)

73 
	#SCM_FRAME_PREV
(
‰ame
Ë
	`scm_‰ame_¥evious
 (‰ame)

	)

74 
	#SCM_FRAME_NEXT
(
‰ame
Ë
	`scm_‰ame_√xt
 (‰ame)

	)

76 
	#SCM_FRAMEF_VOID
 (1L << 2)

	)

77 
	#SCM_FRAMEF_REAL
 (1L << 3)

	)

78 
	#SCM_FRAMEF_PROC
 (1L << 4)

	)

79 
	#SCM_FRAMEF_EVAL_ARGS
 (1L << 5)

	)

80 
	#SCM_FRAMEF_OVERFLOW
 (1L << 6)

	)

82 
	#SCM_FRAME_VOID_P
(
f
Ë(
	`SCM_FRAME_FLAGS
 (fË& 
SCM_FRAMEF_VOID
)

	)

83 
	#SCM_FRAME_REAL_P
(
f
Ë(
	`SCM_FRAME_FLAGS
 (fË& 
SCM_FRAMEF_REAL
)

	)

84 
	#SCM_FRAME_PROC_P
(
f
Ë(
	`SCM_FRAME_FLAGS
 (fË& 
SCM_FRAMEF_PROC
)

	)

85 
	#SCM_FRAME_EVAL_ARGS_P
(
f
Ë(
	`SCM_FRAME_FLAGS
 (fË& 
SCM_FRAMEF_EVAL_ARGS
)

	)

86 
	#SCM_FRAME_OVERFLOW_P
(
f
Ë(
	`SCM_FRAME_FLAGS
 (fË& 
SCM_FRAMEF_OVERFLOW
)

	)

90 
SCM_API
 
SCM
 
scm_°ack_p
 (SCM 
obj
);

91 
SCM_API
 
SCM
 
scm_make_°ack
 (SCM 
obj
, SCM 
¨gs
);

92 
SCM_API
 
SCM
 
scm_°ack_id
 (SCM 
°ack
);

93 
SCM_API
 
SCM
 
scm_°ack_ªf
 (SCM 
°ack
, SCM 
i
);

94 
SCM_API
 
SCM
 
scm_°ack_Àngth
 (SCM 
°ack
);

96 
SCM_API
 
SCM
 
scm_‰ame_p
 (SCM 
obj
);

97 
SCM_API
 
SCM
 
scm_œ°_°ack_‰ame
 (SCM 
obj
);

98 
SCM_API
 
SCM
 
scm_‰ame_numbî
 (SCM 
‰ame
);

99 
SCM_API
 
SCM
 
scm_‰ame_sour˚
 (SCM 
‰ame
);

100 
SCM_API
 
SCM
 
scm_‰ame_¥o˚duª
 (SCM 
‰ame
);

101 
SCM_API
 
SCM
 
scm_‰ame_¨gumíts
 (SCM 
‰ame
);

102 
SCM_API
 
SCM
 
scm_‰ame_¥evious
 (SCM 
‰ame
);

103 
SCM_API
 
SCM
 
scm_‰ame_√xt
 (SCM 
‰ame
);

104 
SCM_API
 
SCM
 
scm_‰ame_ªÆ_p
 (SCM 
‰ame
);

105 
SCM_API
 
SCM
 
scm_‰ame_¥o˚duª_p
 (SCM 
‰ame
);

106 
SCM_API
 
SCM
 
scm_‰ame_evÆu©ög_¨gs_p
 (SCM 
‰ame
);

107 
SCM_API
 
SCM
 
scm_‰ame_ovîÊow_p
 (SCM 
‰ame
);

109 
SCM_API
 
scm_öô_°acks
 ();

	@/usr/include/libguile/stime.h

3 #i‚de‡
SCM_STIME_H


4 
	#SCM_STIME_H


	)

25 
	~"libguûe/__scm.h
"

27 
	~<uni°d.h
>

41 #i‡! 
deföed
(
SCM_TIME_UNITS_PER_SECOND
Ë&& deföed(
_SC_CLK_TCK
)

42 
	#SCM_TIME_UNITS_PER_SECOND
 ((Ë
	`sysc⁄f
 (
_SC_CLK_TCK
))

	)

44 #i‡! 
deföed
(
SCM_TIME_UNITS_PER_SECOND
Ë&& deföed(
CLK_TCK
)

45 
	#SCM_TIME_UNITS_PER_SECOND
 ((Ë
CLK_TCK
)

	)

47 #i‡! 
deföed
(
SCM_TIME_UNITS_PER_SECOND
Ë&& deföed(
CLOCKS_PER_SEC
)

48 
	#SCM_TIME_UNITS_PER_SECOND
 ((Ë
CLOCKS_PER_SEC
)

	)

50 #i‡! 
deföed
(
SCM_TIME_UNITS_PER_SECOND
)

51 
	#SCM_TIME_UNITS_PER_SECOND
 60

	)

55 
SCM_API
 
scm_c_gë_öã∫Æ_run_time
 ();

56 
SCM_API
 
SCM
 
scm_gë_öã∫Æ_ªÆ_time
 ();

57 
SCM_API
 
SCM
 
scm_gë_öã∫Æ_run_time
 ();

58 
SCM_API
 
SCM
 
scm_cuºít_time
 ();

59 
SCM_API
 
SCM
 
scm_gëtimeofday
 ();

60 
SCM_API
 
SCM
 
scm_loˇ…ime
 (SCM 
time
, SCM 
z⁄e
);

61 
SCM_API
 
SCM
 
scm_gmtime
 (SCM 
time
);

62 
SCM_API
 
SCM
 
scm_mktime
 (SCM 
sbd_time
, SCM 
z⁄e
);

63 
SCM_API
 
SCM
 
scm_tz£t
 ();

64 
SCM_API
 
SCM
 
scm_times
 ();

65 
SCM_API
 
SCM
 
scm_°r·ime
 (SCM 
f‹m©
, SCM 
°ime
);

66 
SCM_API
 
SCM
 
scm_°Ωtime
 (SCM 
f‹m©
, SCM 
°rög
);

67 
SCM_API
 
scm_öô_°ime
 ();

	@/usr/include/libguile/strings.h

3 #i‚de‡
SCM_STRINGS_H


4 
	#SCM_STRINGS_H


	)

25 
	~"libguûe/__scm.h
"

79 
SCM_API
 
SCM
 
scm_°rög_p
 (SCM 
x
);

80 
SCM_API
 
SCM
 
scm_°rög
 (SCM 
chrs
);

81 
SCM_API
 
SCM
 
scm_make_°rög
 (SCM 
k
, SCM 
chr
);

82 
SCM_API
 
SCM
 
scm_°rög_Àngth
 (SCM 
°r
);

83 
SCM_API
 
SCM
 
scm_°rög_ªf
 (SCM 
°r
, SCM 
k
);

84 
SCM_API
 
SCM
 
scm_°rög_£t_x
 (SCM 
°r
, SCM 
k
, SCM 
chr
);

85 
SCM_API
 
SCM
 
scm_sub°rög
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

86 
SCM_API
 
SCM
 
scm_sub°rög_ªad_⁄ly
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

87 
SCM_API
 
SCM
 
scm_sub°rög_sh¨ed
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

88 
SCM_API
 
SCM
 
scm_sub°rög_c›y
 (SCM 
°r
, SCM 
°¨t
, SCM 
íd
);

89 
SCM_API
 
SCM
 
scm_°rög_≠≥nd
 (SCM 
¨gs
);

91 
SCM_API
 
SCM
 
scm_c_make_°rög
 (
size_t
 
Àn
, SCM 
chr
);

92 
SCM_API
 
size_t
 
scm_c_°rög_Àngth
 (
SCM
 
°r
);

93 
SCM_API
 
size_t
 
scm_c_symbﬁ_Àngth
 (
SCM
 
sym
);

94 
SCM_API
 
SCM
 
scm_c_°rög_ªf
 (SCM 
°r
, 
size_t
 
pos
);

95 
SCM_API
 
scm_c_°rög_£t_x
 (
SCM
 
°r
, 
size_t
 
pos
, SCM 
chr
);

96 
SCM_API
 
SCM
 
scm_c_sub°rög
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

97 
SCM_API
 
SCM
 
scm_c_sub°rög_ªad_⁄ly
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

98 
SCM_API
 
SCM
 
scm_c_sub°rög_sh¨ed
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

99 
SCM_API
 
SCM
 
scm_c_sub°rög_c›y
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

101 
SCM_API
 
scm_is_°rög
 (
SCM
 
x
);

102 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_°rög
 (c⁄° *
°r
);

103 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_°rögn
 (c⁄° *
°r
, 
size_t
 
Àn
);

104 
SCM_API
 
SCM
 
scm_èke_loˇÀ_°rög
 (*
°r
);

105 
SCM_API
 
SCM
 
scm_èke_loˇÀ_°rögn
 (*
°r
, 
size_t
 
Àn
);

106 
SCM_API
 *
scm_to_loˇÀ_°rög
 (
SCM
 
°r
);

107 
SCM_API
 *
scm_to_loˇÀ_°rögn
 (
SCM
 
°r
, 
size_t
 *
À≈
);

108 
SCM_API
 
size_t
 
scm_to_loˇÀ_°rögbuf
 (
SCM
 
°r
, *
buf
, size_à
max_Àn
);

110 
SCM_API
 
SCM
 
scm_mak‰om°rs
 (
¨gc
, **
¨gv
);

114 
SCM_API
 
SCM
 
scm_i_make_°rög
 (
size_t
 
Àn
, **
d©≠
);

115 
SCM_API
 
SCM
 
scm_i_sub°rög
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

116 
SCM_API
 
SCM
 
scm_i_sub°rög_ªad_⁄ly
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

117 
SCM_API
 
SCM
 
scm_i_sub°rög_sh¨ed
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

118 
SCM_API
 
SCM
 
scm_i_sub°rög_c›y
 (SCM 
°r
, 
size_t
 
°¨t
, size_à
íd
);

119 
SCM_API
 
size_t
 
scm_i_°rög_Àngth
 (
SCM
 
°r
);

120 
SCM_API
 c⁄° *
scm_i_°rög_ch¨s
 (
SCM
 
°r
);

121 
SCM_API
 *
scm_i_°rög_wrôabÀ_ch¨s
 (
SCM
 
°r
);

122 
SCM_API
 
scm_i_°rög_°›_wrôög
 ();

126 
SCM_API
 
SCM
 
scm_i_make_symbﬁ
 (SCM 
«me
, 
scm_t_bôs
 
Êags
,

127 
hash
, 
SCM
 
¥›s
);

128 
SCM_API
 
SCM


129 
scm_i_c_make_symbﬁ
 (c⁄° *
«me
, 
size_t
 
Àn
,

130 
scm_t_bôs
 
Êags
, 
hash
, 
SCM
 
¥›s
);

131 
SCM_API
 
SCM


132 
scm_i_c_èke_symbﬁ
 (*
«me
, 
size_t
 
Àn
,

133 
scm_t_bôs
 
Êags
, 
hash
, 
SCM
 
¥›s
);

134 
SCM_API
 c⁄° *
scm_i_symbﬁ_ch¨s
 (
SCM
 
sym
);

135 
SCM_API
 
size_t
 
scm_i_symbﬁ_Àngth
 (
SCM
 
sym
);

136 
SCM_API
 
SCM
 
scm_i_symbﬁ_sub°rög
 (SCM 
sym
, 
size_t
 
°¨t
, size_à
íd
);

140 
SCM_API
 
SCM
 
scm_i_°rög_m¨k
 (SCM 
°r
);

141 
SCM_API
 
SCM
 
scm_i_°rögbuf_m¨k
 (SCM 
buf
);

142 
SCM_API
 
SCM
 
scm_i_symbﬁ_m¨k
 (SCM 
buf
);

143 
SCM_API
 
scm_i_°rög_‰ì
 (
SCM
 
°r
);

144 
SCM_API
 
scm_i_°rögbuf_‰ì
 (
SCM
 
buf
);

145 
SCM_API
 
scm_i_symbﬁ_‰ì
 (
SCM
 
sym
);

149 
SCM_API
 **
scm_i_Æloˇã_°rög_poöãrs
 (
SCM
 
li°
);

150 
SCM_API
 
scm_i_‰ì_°rög_poöãrs
 (**
poöãrs
);

151 
SCM_API
 
scm_i_gë_sub°rög_•ec
 (
size_t
 
Àn
,

152 
SCM
 
°¨t
, 
size_t
 *
c°¨t
,

153 
SCM
 
íd
, 
size_t
 *
˚nd
);

154 
SCM_API
 
SCM
 
scm_i_èke_°rögbu‚
 (*
°r
, 
size_t
 
Àn
);

158 #i‡
SCM_ENABLE_DEPRECATED


160 
SCM_API
 
scm_i_dïªˇãd_°rögp
 (
SCM
 
obj
);

161 
SCM_API
 *
scm_i_dïªˇãd_°rög_ch¨s
 (
SCM
 
°r
);

162 
SCM_API
 
size_t
 
scm_i_dïªˇãd_°rög_Àngth
 (
SCM
 
°r
);

164 
	#SCM_STRINGP
(
x
Ë
	`scm_i_dïªˇãd_°rögp
(x)

	)

165 
	#SCM_STRING_CHARS
(
x
Ë
	`scm_i_dïªˇãd_°rög_ch¨s
(x)

	)

166 
	#SCM_STRING_LENGTH
(
x
Ë
	`scm_i_dïªˇãd_°rög_Àngth
(x)

	)

167 
	#SCM_STRING_UCHARS
(
°r
Ë((*)
	`SCM_STRING_CHARS
 (°r))

	)

171 
SCM_API
 
scm_öô_°rögs
 ();

	@/usr/include/libguile/strorder.h

3 #i‚de‡
SCM_STRORDER_H


4 
	#SCM_STRORDER_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_°rög_equÆ_p
 (SCM 
s1
, SCM 
s2
);

30 
SCM_API
 
SCM
 
scm_°rög_ci_equÆ_p
 (SCM 
s1
, SCM 
s2
);

31 
SCM_API
 
SCM
 
scm_°rög_Àss_p
 (SCM 
s1
, SCM 
s2
);

32 
SCM_API
 
SCM
 
scm_°rög_Àq_p
 (SCM 
s1
, SCM 
s2
);

33 
SCM_API
 
SCM
 
scm_°rög_gr_p
 (SCM 
s1
, SCM 
s2
);

34 
SCM_API
 
SCM
 
scm_°rög_geq_p
 (SCM 
s1
, SCM 
s2
);

35 
SCM_API
 
SCM
 
scm_°rög_ci_Àss_p
 (SCM 
s1
, SCM 
s2
);

36 
SCM_API
 
SCM
 
scm_°rög_ci_Àq_p
 (SCM 
s1
, SCM 
s2
);

37 
SCM_API
 
SCM
 
scm_°rög_ci_gr_p
 (SCM 
s1
, SCM 
s2
);

38 
SCM_API
 
SCM
 
scm_°rög_ci_geq_p
 (SCM 
s1
, SCM 
s2
);

39 
SCM_API
 
scm_öô_°r‹dî
 ();

	@/usr/include/libguile/strports.h

3 #i‚de‡
SCM_STRPORTS_H


4 
	#SCM_STRPORTS_H


	)

25 
	~"libguûe/__scm.h
"

30 
	#SCM_STRPORTP
(
x
Ë(!
	`SCM_IMP
 (x) && \

31 (
	`SCM_TYP16
 (
x
Ë=
scm_tc16_°Ω‹t
))

	)

32 
	#SCM_OPSTRPORTP
(
x
Ë(
	`SCM_STRPORTP
 (x) && \

33 (
	`SCM_CELL_WORD_0
 (
x
Ë& 
SCM_OPN
))

	)

34 
	#SCM_OPINSTRPORTP
(
x
Ë(
	`SCM_OPSTRPORTP
 (x) && \

35 (
	`SCM_CELL_WORD_0
 (
x
Ë& 
SCM_RDNG
))

	)

36 
	#SCM_OPOUTSTRPORTP
(
x
Ë(
	`SCM_OPSTRPORTP
 (x) && \

37 (
	`SCM_CELL_WORD_0
 (
x
Ë& 
SCM_WRTNG
))

	)

41 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_°Ω‹t
;

45 
SCM_API
 
SCM
 
scm_mk°Ω‹t
 (SCM 
pos
, SCM 
°r
, 
modes
, c⁄° * 
ˇŒî
);

46 
SCM_API
 
SCM
 
scm_°Ω‹t_to_°rög
 (SCM 
p‹t
);

47 
SCM_API
 
SCM
 
scm_obje˘_to_°rög
 (SCM 
obj
, SCM 
¥öãr
);

48 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_ouçut_°rög
 (SCM 
¥oc
);

49 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_öput_°rög
 (SCM 
°r
, SCM 
¥oc
);

50 
SCM_API
 
SCM
 
scm_›í_öput_°rög
 (SCM 
°r
);

51 
SCM_API
 
SCM
 
scm_›í_ouçut_°rög
 ();

52 
SCM_API
 
SCM
 
scm_gë_ouçut_°rög
 (SCM 
p‹t
);

53 
SCM_API
 
SCM
 
scm_c_ªad_°rög
 (c⁄° *
ex¥
);

54 
SCM_API
 
SCM
 
scm_c_evÆ_°rög
 (c⁄° *
ex¥
);

55 
SCM_API
 
SCM
 
scm_c_evÆ_°rög_ö_moduÀ
 (c⁄° *
ex¥
, SCM 
moduÀ
);

56 
SCM_API
 
SCM
 
scm_evÆ_°rög
 (SCM 
°rög
);

57 
SCM_API
 
SCM
 
scm_evÆ_°rög_ö_moduÀ
 (SCM 
°rög
, SCM 
moduÀ
);

58 
SCM_API
 
scm_öô_°Ω‹ts
 ();

	@/usr/include/libguile/struct.h

3 #i‚de‡
SCM_STRUCT_H


4 
	#SCM_STRUCT_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/¥öt.h
"

31 
	#scm_°ru˘_n_exåa_w‹ds
 4

	)

32 
	#scm_°ru˘_ítôy_n_exåa_w‹ds
 6

	)

35 
	#scm_°ru˘_i_£âî
 -6

	)

36 
	#scm_°ru˘_i_¥o˚duª
 -5

	)

37 
	#scm_°ru˘_i_‰ì
 -4

	)

38 
	#scm_°ru˘_i_±r
 -3

	)

39 
	#scm_°ru˘_i_n_w‹ds
 -2

	)

40 
	#scm_°ru˘_i_size
 -1

	)

41 
	#scm_°ru˘_i_Êags
 -1

	)

45 
	#scm_vèbÀ_ödex_œyout
 0

	)

46 
	#scm_vèbÀ_ödex_vèbÀ
 1

	)

47 
	#scm_vèbÀ_ödex_¥öãr
 2

	)

48 
	#scm_vèbÀ_off£t_u£r
 3

	)

50 (*
	tscm_t_°ru˘_‰ì
Ë(
	tscm_t_bôs
 * 
	tvèbÀ
, scm_t_bô†* 
	td©a
);

52 
	#SCM_STRUCTF_MASK
 (0xFFF << 20)

	)

53 
	#SCM_STRUCTF_ENTITY
 (1L << 30Ë

	)

54 
	#SCM_STRUCTF_LIGHT
 (1L << 31Ë

	)

57 
	#SCM_STRUCTP
(
X
Ë(!
	`SCM_IMP
(XË&& (
	`SCM_TYP3
(XË=
scm_tc3_°ru˘
))

	)

58 
	#SCM_STRUCT_DATA
(
X
Ë((
scm_t_bôs
 *Ë
	`SCM_CELL_WORD_1
 (X))

	)

59 
	#SCM_STRUCT_VTABLE_DATA
(
X
Ë((
scm_t_bôs
 *Ë(
	`SCM_CELL_WORD_0
 (XË- 
scm_tc3_°ru˘
))

	)

61 
	#SCM_STRUCT_LAYOUT
(
X
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_VTABLE_DATA
 (XË[
scm_vèbÀ_ödex_œyout
]))

	)

62 
	#SCM_SET_STRUCT_LAYOUT
(
X
, 
v
Ë(
	`SCM_STRUCT_VTABLE_DATA
 (XË[
scm_vèbÀ_ödex_œyout
] = 
	`SCM_UNPACK
 (v))

	)

64 
	#SCM_STRUCT_VTABLE
(
X
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_VTABLE_DATA
 (XË[
scm_vèbÀ_ödex_vèbÀ
]))

	)

65 
	#SCM_STRUCT_VTABLE_FLAGS
(
X
) \

66 (
	`SCM_STRUCT_VTABLE_DATA
 (
X
Ë[
scm_°ru˘_i_Êags
])

	)

67 
	#SCM_STRUCT_PRINTER
(
X
Ë(
	`SCM_PACK
 (
	`SCM_STRUCT_VTABLE_DATA
 (XË[
scm_vèbÀ_ödex_¥öãr
]))

	)

68 
	#SCM_SET_STRUCT_PRINTER
(
x
, 
v
)\

69 (
	`SCM_STRUCT_VTABLE_DATA
 (
x
Ë[
scm_vèbÀ_ödex_¥öãr
] = 
	`SCM_UNPACK
 (
v
))

	)

70 
	#SCM_SET_VTABLE_DESTRUCTOR
(
X
, 
D
Ë(
	`SCM_STRUCT_DATA
 (XË[
scm_°ru˘_i_‰ì
] = (
scm_t_bôs
Ë(D))

	)

72 
	#SCM_LAYOUT_TAILP
(
X
Ë(((XË& 32Ë=0Ë

	)

74 
	#SCM_STRUCT_TABLE_NAME
(
X
Ë
	`SCM_CAR
 (X)

	)

75 
	#SCM_SET_STRUCT_TABLE_NAME
(
X
, 
NAME
Ë
	`SCM_SETCAR
 (X, NAME)

	)

76 
	#SCM_STRUCT_TABLE_CLASS
(
X
Ë
	`SCM_CDR
 (X)

	)

77 
	#SCM_SET_STRUCT_TABLE_CLASS
(
X
, 
CLASS
Ë
	`SCM_SETCDR
 (X, CLASS)

	)

78 
SCM_API
 
SCM
 
scm_°ru˘_èbÀ
;

80 
	#SCM_STRUCT_GC_CHAIN
(
X
Ë
	`SCM_CELL_OBJECT_3
 (X)

	)

81 
	#SCM_SET_STRUCT_GC_CHAIN
(
X
, 
Y
Ë
	`SCM_SET_CELL_OBJECT_3
 (X, Y)

	)

82 
SCM_API
 
SCM
 
scm_i_°ru˘s_to_‰ì
;

86 
SCM_API
 
scm_t_bôs
 * 
	`scm_Æloc_°ru˘
 (
n_w‹ds
, 
n_exåa
,

87 c⁄° *
wh©
);

88 
SCM_API
 
	`scm_°ru˘_‰ì_0
 (
scm_t_bôs
 * 
vèbÀ
, scm_t_bô†* 
d©a
);

89 
SCM_API
 
	`scm_°ru˘_‰ì_light
 (
scm_t_bôs
 * 
vèbÀ
, scm_t_bô†* 
d©a
);

90 
SCM_API
 
	`scm_°ru˘_‰ì_°™d¨d
 (
scm_t_bôs
 * 
vèbÀ
, scm_t_bô†* 
d©a
);

91 
SCM_API
 
	`scm_°ru˘_‰ì_ítôy
 (
scm_t_bôs
 * 
vèbÀ
, scm_t_bô†* 
d©a
);

92 
SCM_API
 
SCM
 
	`scm_make_°ru˘_œyout
 (SCM 
fõlds
);

93 
SCM_API
 
SCM
 
	`scm_°ru˘_p
 (SCM 
x
);

94 
SCM_API
 
SCM
 
	`scm_°ru˘_vèbÀ_p
 (SCM 
x
);

95 
SCM_API
 
SCM
 
	`scm_make_°ru˘
 (SCM 
vèbÀ
, SCM 
èû_¨øy_size
, SCM 
öô
);

96 
SCM_API
 
SCM
 
	`scm_make_vèbÀ
 (SCM 
fõlds
, SCM 
¥öãr
);

97 
SCM_API
 
SCM
 
	`scm_make_vèbÀ_vèbÀ
 (SCM 
exåa_fõlds
, SCM 
èû_¨øy_size
, SCM 
öô
);

98 
SCM_API
 
SCM
 
	`scm_i_°ru˘_equÆp
 (SCM 
s1
, SCM 
s2
);

99 
SCM_API
 
SCM
 
	`scm_°ru˘_ªf
 (SCM 
h™dÀ
, SCM 
pos
);

100 
SCM_API
 
SCM
 
	`scm_°ru˘_£t_x
 (SCM 
h™dÀ
, SCM 
pos
, SCM 
vÆ
);

101 
SCM_API
 
SCM
 
	`scm_°ru˘_vèbÀ
 (SCM 
h™dÀ
);

102 
SCM_API
 
SCM
 
	`scm_°ru˘_vèbÀ_èg
 (SCM 
h™dÀ
);

103 
SCM_API
 
	`scm_°ru˘_ihashq
 (
SCM
 
obj
, 
n
);

104 
SCM_API
 
SCM
 
	`scm_°ru˘_¸óã_h™dÀ
 (SCM 
obj
);

105 
SCM_API
 
SCM
 
	`scm_°ru˘_vèbÀ_«me
 (SCM 
vèbÀ
);

106 
SCM_API
 
SCM
 
	`scm_£t_°ru˘_vèbÀ_«me_x
 (SCM 
vèbÀ
, SCM 
«me
);

107 
SCM_API
 
	`scm_¥öt_°ru˘
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *);

108 
SCM_API
 
	`scm_°ru˘_¥ehi°‹y
 ();

109 
SCM_API
 
	`scm_öô_°ru˘
 ();

	@/usr/include/libguile/symbols.h

3 #i‚de‡
SCM_SYMBOLS_H


4 
	#SCM_SYMBOLS_H


	)

25 
	~"libguûe/__scm.h
"

28 
	#scm_is_symbﬁ
(
x
Ë(!
	`SCM_IMP
 (x) \

29 && (
	`SCM_TYP7
 (
x
Ë=
scm_tc7_symbﬁ
))

	)

30 
	#scm_i_symbﬁ_hash
(
x
Ë((Ë
	`SCM_CELL_WORD_2
 (x))

	)

31 
	#scm_i_symbﬁ_is_öã∫ed
(
x
) \

32 (!(
	`SCM_CELL_WORD_0
 (
x
Ë& 
SCM_I_F_SYMBOL_UNINTERNED
))

	)

34 
	#SCM_I_F_SYMBOL_UNINTERNED
 0x100

	)

38 #ifde‡
GUILE_DEBUG


39 
SCM_API
 
SCM
 
scm_sys_symbﬁs
 ();

42 
SCM_API
 
SCM
 
scm_symbﬁ_p
 (SCM 
x
);

43 
SCM_API
 
SCM
 
scm_symbﬁ_öã∫ed_p
 (SCM 
sym
);

44 
SCM_API
 
SCM
 
scm_make_symbﬁ
 (SCM 
«me
);

45 
SCM_API
 
SCM
 
scm_symbﬁ_to_°rög
 (SCM 
s
);

46 
SCM_API
 
SCM
 
scm_°rög_to_symbﬁ
 (SCM 
s
);

47 
SCM_API
 
SCM
 
scm_°rög_ci_to_symbﬁ
 (SCM 
s
);

49 
SCM_API
 
SCM
 
scm_symbﬁ_‰ef
 (SCM 
s
);

50 
SCM_API
 
SCM
 
scm_symbﬁ_¥ef
 (SCM 
s
);

51 
SCM_API
 
SCM
 
scm_symbﬁ_f£t_x
 (SCM 
s
, SCM 
vÆ
);

52 
SCM_API
 
SCM
 
scm_symbﬁ_p£t_x
 (SCM 
s
, SCM 
vÆ
);

54 
SCM_API
 
SCM
 
scm_symbﬁ_hash
 (SCM 
s
);

55 
SCM_API
 
SCM
 
scm_gísym
 (SCM 
¥efix
);

57 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_symbﬁ
 (c⁄° *
°r
);

58 
SCM_API
 
SCM
 
scm_‰om_loˇÀ_symbﬁn
 (c⁄° *
°r
, 
size_t
 
Àn
);

59 
SCM_API
 
SCM
 
scm_èke_loˇÀ_symbﬁ
 (*
sym
);

60 
SCM_API
 
SCM
 
scm_èke_loˇÀ_symbﬁn
 (*
sym
, 
size_t
 
Àn
);

64 
SCM_API
 
scm_i_hash_symbﬁ
 (
SCM
 
obj
, 
n
,

65 *
˛osuª
);

67 
SCM_API
 
scm_symbﬁs_¥ehi°‹y
 ();

68 
SCM_API
 
scm_öô_symbﬁs
 ();

	@/usr/include/libguile/tags.h

3 #i‚de‡
SCM_TAGS_H


4 
	#SCM_TAGS_H


	)

31 
	~"libguûe/__scm.h
"

33 #i‡
HAVE_INTTYPES_H


34 
	~<öây≥s.h
>

36 #i‡
HAVE_STDINT_H


37 
	~<°döt.h
>

75 #i‡
SCM_SIZEOF_INTPTR_T
 !0 && 
deföed
(
INTPTR_MAX
Ë&& deföed(
INTPTR_MIN
) \

76 && 
	gINTPTR_MAX
-0 !0 && 
INTPTR_MIN
-0 != 0 \

77 && 
SCM_SIZEOF_UINTPTR_T
 !0 && 
deföed
(
UINTPTR_MAX
) && UINTPTR_MAX-0 != 0

79 
öçå_t
 
	tscm_t_sig√d_bôs
;

80 
	#SCM_T_SIGNED_BITS_MAX
 
INTPTR_MAX


	)

81 
	#SCM_T_SIGNED_BITS_MIN
 
INTPTR_MIN


	)

82 
uöçå_t
 
	tscm_t_bôs
;

83 
	#SIZEOF_SCM_T_BITS
 
SCM_SIZEOF_UINTPTR_T


	)

84 
	#SCM_T_BITS_MAX
 
UINTPTR_MAX


	)

88 sig√d 
	tscm_t_sig√d_bôs
;

89 
	#SCM_T_SIGNED_BITS_MAX
 
LONG_MAX


	)

90 
	#SCM_T_SIGNED_BITS_MIN
 
LONG_MIN


	)

91 
	tscm_t_bôs
;

92 
	#SIZEOF_SCM_T_BITS
 
SCM_SIZEOF_UNSIGNED_LONG


	)

93 
	#SCM_T_BITS_MAX
 
ULONG_MAX


	)

100 #i‡(
SCM_DEBUG_TYPING_STRICTNESS
 == 2)

101 uni⁄ { såu˘ { 
scm_t_bôs
 
	mn
; }Ç; } 
	tSCM
;

102 
SCM
 
	$scm_∑ck
(
scm_t_bôs
 
b
Ë{ 
SCM
 
s
; s.
n
.¿b;  s; 
	}
}

103 
	#SCM_UNPACK
(
x
Ë((x).
n
.n)

	)

104 
	#SCM_PACK
(
x
Ë(
	`scm_∑ck
 ((
scm_t_bôs
Ë(x)))

	)

105 #ñi‡(
SCM_DEBUG_TYPING_STRICTNESS
 == 1)

109 
scm_unu£d_°ru˘
 * 
	tSCM
;

119 #i‡
deföed
 
__DECC
 || deföed 
__HP_cc


120 
	#SCM_UNPACK
(
x
Ë((
scm_t_bôs
Ë(x))

	)

122 
	#SCM_UNPACK
(
x
Ë((
scm_t_bôs
Ë(0? (*(
SCM
*)0=(x)): x))

	)

129 
	#SCM_PACK
(
x
Ë((
SCM
Ë(x))

	)

136 
scm_t_bôs
 
	tSCM
;

137 
	#SCM_UNPACK
(
x
Ë(x)

	)

138 
	#SCM_PACK
(
x
Ë((
SCM
Ë(x))

	)

145 
	#scm_is_eq
(
x
, 
y
Ë(
	`SCM_UNPACK
 (xË=SCM_UNPACK (y))

	)

387 
	#SCM_IMP
(
x
Ë(6 & 
	`SCM_UNPACK
 (x))

	)

388 
	#SCM_NIMP
(
x
Ë(!
	`SCM_IMP
 (x))

	)

400 
	#SCM_I_CONSP
(
x
Ë(!
	`SCM_IMP
 (xË&& ((1 & 
	`SCM_CELL_TYPE
 (x)Ë=0))

	)

406 
	#scm_tc2_öt
 2

	)

411 
	#SCM_ITAG3
(
x
Ë(7 & 
	`SCM_UNPACK
 (x))

	)

412 
	#SCM_TYP3
(
x
Ë(7 & 
	`SCM_CELL_TYPE
 (x))

	)

414 
	#scm_tc3_c⁄s
 0

	)

415 
	#scm_tc3_°ru˘
 1

	)

416 
	#scm_tc3_öt_1
 (
scm_tc2_öt
 + 0)

	)

417 
	#scm_tc3_˛osuª
 3

	)

418 
	#scm_tc3_imm24
 4

	)

419 
	#scm_tc3_tc7_1
 5

	)

420 
	#scm_tc3_öt_2
 (
scm_tc2_öt
 + 4)

	)

421 
	#scm_tc3_tc7_2
 7

	)

426 
	#SCM_ITAG7
(
x
Ë(127 & 
	`SCM_UNPACK
 (x))

	)

427 
	#SCM_TYP7
(
x
Ë(0x7‡& 
	`SCM_CELL_TYPE
 (x))

	)

428 
	#SCM_TYP7S
(
x
Ë((0x7‡& ~2Ë& 
	`SCM_CELL_TYPE
 (x))

	)

430 
	#scm_tc7_symbﬁ
 5

	)

431 
	#scm_tc7_v¨übÀ
 7

	)

434 
	#scm_tc7_ve˘‹
 13

	)

435 
	#scm_tc7_wve˘
 15

	)

437 
	#scm_tc7_°rög
 21

	)

438 
	#scm_tc7_numbî
 23

	)

439 
	#scm_tc7_°rögbuf
 39

	)

445 
	#scm_tc7_pws
 31

	)

447 
	#scm_tc7_unu£d_1
 29

	)

448 
	#scm_tc7_unu£d_2
 37

	)

449 
	#scm_tc7_unu£d_3
 45

	)

450 
	#scm_tc7_unu£d_4
 47

	)

451 
	#scm_tc7_unu£d_5
 53

	)

452 
	#scm_tc7_unu£d_6
 55

	)

453 
	#scm_tc7_unu£d_7
 71

	)

454 
	#scm_tc7_unu£d_8
 77

	)

455 
	#scm_tc7_unu£d_9
 79

	)

457 
	#scm_tc7_dsubr
 61

	)

458 
	#scm_tc7_c˛o
 63

	)

459 
	#scm_tc7_Ωsubr
 69

	)

460 
	#scm_tc7_subr_0
 85

	)

461 
	#scm_tc7_subr_1
 87

	)

462 
	#scm_tc7_cxr
 93

	)

463 
	#scm_tc7_subr_3
 95

	)

464 
	#scm_tc7_subr_2
 101

	)

465 
	#scm_tc7_asubr
 103

	)

466 
	#scm_tc7_subr_1o
 109

	)

467 
	#scm_tc7_subr_2o
 111

	)

468 
	#scm_tc7_lsubr_2
 117

	)

469 
	#scm_tc7_lsubr
 119

	)

472 
	#scm_tc7_p‹t
 125

	)

478 
	#scm_tc7_smob
 127

	)

482 
	#SCM_TYP16
(
x
Ë(0xfff‡& 
	`SCM_CELL_TYPE
 (x))

	)

483 
	#SCM_TYP16_PREDICATE
(
èg
, 
x
Ë(!
	`SCM_IMP
 (xË&& 
	`SCM_TYP16
 (xË=—ag))

	)

490 
	#scm_tc_‰ì_˚Œ
 (
scm_tc7_smob
 + 0 * 256L)

	)

497 
	escm_tc8_ègs


499 
	mscm_tc8_Êag
 = 
scm_tc3_imm24
 + 0x00,

500 
	mscm_tc8_ch¨
 = 
scm_tc3_imm24
 + 0x08,

501 
	mscm_tc8_isym
 = 
scm_tc3_imm24
 + 0x10,

502 
	mscm_tc8_ûoc
 = 
scm_tc3_imm24
 + 0x18

505 
	#SCM_ITAG8
(
X
Ë(
	`SCM_UNPACK
 (XË& 0xff)

	)

506 
	#SCM_MAKE_ITAG8
(
X
, 
TAG
Ë
	`SCM_PACK
 (((XË<< 8Ë+ TAG)

	)

507 
	#SCM_ITAG8_DATA
(
X
Ë(
	`SCM_UNPACK
 (XË>> 8)

	)

514 
	#SCM_IFLAGP
(
n
Ë(
	`SCM_ITAG8
 (nË=
scm_tc8_Êag
)

	)

515 
	#SCM_MAKIFLAG
(
n
Ë
	`SCM_MAKE_ITAG8
 (“), 
scm_tc8_Êag
)

	)

516 
	#SCM_IFLAGNUM
(
n
Ë(
	`SCM_ITAG8_DATA
 (n))

	)

518 
	#SCM_BOOL_F
 
	`SCM_MAKIFLAG
 (0)

	)

519 
	#SCM_BOOL_T
 
	`SCM_MAKIFLAG
 (1)

	)

520 
	#SCM_UNDEFINED
 
	`SCM_MAKIFLAG
 (2)

	)

521 
	#SCM_EOF_VAL
 
	`SCM_MAKIFLAG
 (3)

	)

522 
	#SCM_EOL
 
	`SCM_MAKIFLAG
 (4)

	)

523 
	#SCM_UNSPECIFIED
 
	`SCM_MAKIFLAG
 (5)

	)

533 
	#SCM_UNBOUND
 
	`SCM_MAKIFLAG
 (6)

	)

536 
	#SCM_ELISP_NIL
 
	`SCM_MAKIFLAG
 (7)

	)

539 
	#SCM_UNBNDP
(
x
Ë(
	`scm_is_eq
 ((x), 
SCM_UNDEFINED
))

	)

548 
	#SCM_ISYMP
(
n
Ë(
	`SCM_ITAG8
 (nË=
scm_tc8_isym
)

	)

549 
	#SCM_MAKISYM
(
n
Ë
	`SCM_MAKE_ITAG8
 (“), 
scm_tc8_isym
)

	)

551 
	#SCM_IM_AND
 
	`SCM_MAKISYM
 (0)

	)

552 
	#SCM_IM_BEGIN
 
	`SCM_MAKISYM
 (1)

	)

553 
	#SCM_IM_CASE
 
	`SCM_MAKISYM
 (2)

	)

554 
	#SCM_IM_COND
 
	`SCM_MAKISYM
 (3)

	)

555 
	#SCM_IM_DO
 
	`SCM_MAKISYM
 (4)

	)

556 
	#SCM_IM_IF
 
	`SCM_MAKISYM
 (5)

	)

557 
	#SCM_IM_LAMBDA
 
	`SCM_MAKISYM
 (6)

	)

558 
	#SCM_IM_LET
 
	`SCM_MAKISYM
 (7)

	)

559 
	#SCM_IM_LETSTAR
 
	`SCM_MAKISYM
 (8)

	)

560 
	#SCM_IM_LETREC
 
	`SCM_MAKISYM
 (9)

	)

561 
	#SCM_IM_OR
 
	`SCM_MAKISYM
 (10)

	)

562 
	#SCM_IM_QUOTE
 
	`SCM_MAKISYM
 (11)

	)

563 
	#SCM_IM_SET_X
 
	`SCM_MAKISYM
 (12)

	)

564 
	#SCM_IM_DEFINE
 
	`SCM_MAKISYM
 (13)

	)

565 
	#SCM_IM_APPLY
 
	`SCM_MAKISYM
 (14)

	)

566 
	#SCM_IM_CONT
 
	`SCM_MAKISYM
 (15)

	)

567 
	#SCM_IM_DISPATCH
 
	`SCM_MAKISYM
 (16)

	)

568 
	#SCM_IM_SLOT_REF
 
	`SCM_MAKISYM
 (17)

	)

569 
	#SCM_IM_SLOT_SET_X
 
	`SCM_MAKISYM
 (18)

	)

570 
	#SCM_IM_DELAY
 
	`SCM_MAKISYM
 (19)

	)

571 
	#SCM_IM_FUTURE
 
	`SCM_MAKISYM
 (20)

	)

572 
	#SCM_IM_CALL_WITH_VALUES
 
	`SCM_MAKISYM
 (21)

	)

573 
	#SCM_IM_ELSE
 
	`SCM_MAKISYM
 (22)

	)

574 
	#SCM_IM_ARROW
 
	`SCM_MAKISYM
 (23)

	)

575 
	#SCM_IM_NIL_COND
 
	`SCM_MAKISYM
 (24Ë

	)

576 
	#SCM_IM_BIND
 
	`SCM_MAKISYM
 (25Ë

	)

588 
	#scm_tcs_c⁄s_imˇr
 \

589 
scm_tc2_öt
 + 0: scm_tc2_öà+ 4: 
scm_tc3_imm24
 + 0:\

590 
scm_tc2_öt
 + 8: scm_tc2_öà+ 12: 
scm_tc3_imm24
 + 8:\

591 
scm_tc2_öt
 + 16: scm_tc2_öà+ 20: 
scm_tc3_imm24
 + 16:\

592 
scm_tc2_öt
 + 24: scm_tc2_öà+ 28: 
scm_tc3_imm24
 + 24:\

593 
scm_tc2_öt
 + 32: scm_tc2_öà+ 36: 
scm_tc3_imm24
 + 32:\

594 
scm_tc2_öt
 + 40: scm_tc2_öà+ 44: 
scm_tc3_imm24
 + 40:\

595 
scm_tc2_öt
 + 48: scm_tc2_öà+ 52: 
scm_tc3_imm24
 + 48:\

596 
scm_tc2_öt
 + 56: scm_tc2_öà+ 60: 
scm_tc3_imm24
 + 56:\

597 
scm_tc2_öt
 + 64: scm_tc2_öà+ 68: 
scm_tc3_imm24
 + 64:\

598 
scm_tc2_öt
 + 72: scm_tc2_öà+ 76: 
scm_tc3_imm24
 + 72:\

599 
scm_tc2_öt
 + 80: scm_tc2_öà+ 84: 
scm_tc3_imm24
 + 80:\

600 
scm_tc2_öt
 + 88: scm_tc2_öà+ 92: 
scm_tc3_imm24
 + 88:\

601 
scm_tc2_öt
 + 96: scm_tc2_öà+ 100: 
scm_tc3_imm24
 + 96:\

602 
scm_tc2_öt
 + 104: scm_tc2_öà+ 108: 
scm_tc3_imm24
 + 104:\

603 
scm_tc2_öt
 + 112: scm_tc2_öà+ 116: 
scm_tc3_imm24
 + 112:\

604 
scm_tc2_öt
 + 120: scm_tc2_öà+ 124: 
scm_tc3_imm24
 + 120

	)

608 
	#scm_tcs_c⁄s_nimˇr
 \

609 
scm_tc3_c⁄s
 + 0:\

610 
scm_tc3_c⁄s
 + 8:\

611 
scm_tc3_c⁄s
 + 16:\

612 
scm_tc3_c⁄s
 + 24:\

613 
scm_tc3_c⁄s
 + 32:\

614 
scm_tc3_c⁄s
 + 40:\

615 
scm_tc3_c⁄s
 + 48:\

616 
scm_tc3_c⁄s
 + 56:\

617 
scm_tc3_c⁄s
 + 64:\

618 
scm_tc3_c⁄s
 + 72:\

619 
scm_tc3_c⁄s
 + 80:\

620 
scm_tc3_c⁄s
 + 88:\

621 
scm_tc3_c⁄s
 + 96:\

622 
scm_tc3_c⁄s
 + 104:\

623 
scm_tc3_c⁄s
 + 112:\

624 
scm_tc3_c⁄s
 + 120

	)

628 
	#scm_tcs_°ru˘
 \

629 
scm_tc3_°ru˘
 + 0:\

630 
scm_tc3_°ru˘
 + 8:\

631 
scm_tc3_°ru˘
 + 16:\

632 
scm_tc3_°ru˘
 + 24:\

633 
scm_tc3_°ru˘
 + 32:\

634 
scm_tc3_°ru˘
 + 40:\

635 
scm_tc3_°ru˘
 + 48:\

636 
scm_tc3_°ru˘
 + 56:\

637 
scm_tc3_°ru˘
 + 64:\

638 
scm_tc3_°ru˘
 + 72:\

639 
scm_tc3_°ru˘
 + 80:\

640 
scm_tc3_°ru˘
 + 88:\

641 
scm_tc3_°ru˘
 + 96:\

642 
scm_tc3_°ru˘
 + 104:\

643 
scm_tc3_°ru˘
 + 112:\

644 
scm_tc3_°ru˘
 + 120

	)

648 
	#scm_tcs_˛osuªs
 \

649 
scm_tc3_˛osuª
 + 0:\

650 
scm_tc3_˛osuª
 + 8:\

651 
scm_tc3_˛osuª
 + 16:\

652 
scm_tc3_˛osuª
 + 24:\

653 
scm_tc3_˛osuª
 + 32:\

654 
scm_tc3_˛osuª
 + 40:\

655 
scm_tc3_˛osuª
 + 48:\

656 
scm_tc3_˛osuª
 + 56:\

657 
scm_tc3_˛osuª
 + 64:\

658 
scm_tc3_˛osuª
 + 72:\

659 
scm_tc3_˛osuª
 + 80:\

660 
scm_tc3_˛osuª
 + 88:\

661 
scm_tc3_˛osuª
 + 96:\

662 
scm_tc3_˛osuª
 + 104:\

663 
scm_tc3_˛osuª
 + 112:\

664 
scm_tc3_˛osuª
 + 120

	)

668 
	#scm_tcs_subrs
 \

669 
scm_tc7_asubr
:\

670 
scm_tc7_subr_0
:\

671 
scm_tc7_subr_1
:\

672 
scm_tc7_dsubr
:\

673 
scm_tc7_cxr
:\

674 
scm_tc7_subr_3
:\

675 
scm_tc7_subr_2
:\

676 
scm_tc7_Ωsubr
:\

677 
scm_tc7_subr_1o
:\

678 
scm_tc7_subr_2o
:\

679 
scm_tc7_lsubr_2
:\

680 
scm_tc7_lsubr


	)

684 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

686 
	#SCM_CELLP
(
x
Ë((( (
scm_t_˚Œ
Ë- 1Ë& 
	`SCM_UNPACK
 (x)Ë=0)

	)

687 
	#SCM_NCELLP
(
x
Ë(!
	`SCM_CELLP
 (x))

	)

	@/usr/include/libguile/threads.h

3 #i‚de‡
SCM_THREADS_H


4 
	#SCM_THREADS_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/¥ocs.h
"

27 
	~"libguûe/throw.h
"

28 
	~"libguûe/roŸ.h
"

29 
	~"libguûe/i£À˘.h
"

30 
	~"libguûe/dynwöd.h
"

31 
	~"libguûe/c⁄töu©i⁄s.h
"

33 #i‡
SCM_USE_PTHREAD_THREADS


34 
	~"libguûe/±hªad-thªads.h
"

37 #i‡
SCM_USE_NULL_THREADS


38 
	~"libguûe/nuŒ-thªads.h
"

44 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_thªad
;

45 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_muãx
;

46 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_c⁄dv¨
;

48 
	sscm_i_thªad
 {

49 
scm_i_thªad
 *
	m√xt_thªad
;

51 
SCM
 
	mh™dÀ
;

52 
scm_i_±hªad_t
 
	m±hªad
;

54 
SCM
 
	mjoö_queue
;

55 
SCM
 
	mªsu…
;

56 
	mexôed
;

58 
SCM
 
	m¶ìp_obje˘
;

59 
scm_i_±hªad_muãx_t
 *
	m¶ìp_muãx
;

60 
scm_i_±hªad_c⁄d_t
 
	m¶ìp_c⁄d
;

61 
	m¶ìp_fd
, 
	m¶ìp_pùe
[2];

66 
scm_i_±hªad_muãx_t
 
	mhóp_muãx
;

71 
SCM
 
	m‰ìli°
, 
	m‰ìli°2
;

72 
	m˛ór_‰ìli°s_p
;

73 
	mgc_ru¬ög_p
;

78 
SCM
 
	mdy«mic_°©e
;

79 
scm_t_debug_‰ame
 *
	mœ°_debug_‰ame
;

80 
SCM
 
	mdynwöds
;

84 
SCM
 
	ma˘ive_asyncs
;

86 
	mblock_asyncs
;

88 
	m≥ndög_asyncs
;

104 
SCM
 
	mc⁄töu©i⁄_roŸ
;

105 
SCM_STACKITEM
 *
	mc⁄töu©i⁄_ba£
;

108 
SCM_STACKITEM
 *
	mba£
;

109 
SCM_STACKITEM
 *
	mt›
;

110 
scm_jmp_buf
 
	mªgs
;

111 #ifde‡
__ü64__


112 *
	mªgi°î_backög_°‹e_ba£
;

113 
scm_t_c⁄åegs
 *
	m≥ndög_rbs_c⁄töu©i⁄
;

117 
	m¸ôiˇl_£˘i⁄_Àvñ
;

119 } 
	tscm_i_thªad
;

121 
	#SCM_I_IS_THREAD
(
x
Ë
	`SCM_SMOB_PREDICATE
 (
scm_tc16_thªad
, x)

	)

122 
	#SCM_I_THREAD_DATA
(
x
Ë((
scm_i_thªad
 *Ë
	`SCM_SMOB_DATA
 (x))

	)

124 
	#SCM_VALIDATE_THREAD
(
pos
, 
a
) \

125 
	`scm_as£π_smob_ty≥
 (
scm_tc16_thªad
, (
a
))

	)

126 
	#SCM_VALIDATE_MUTEX
(
pos
, 
a
) \

127 
	`scm_as£π_smob_ty≥
 (
scm_tc16_muãx
, (
a
))

	)

128 
	#SCM_VALIDATE_CONDVAR
(
pos
, 
a
) \

129 
	`scm_as£π_smob_ty≥
 (
scm_tc16_c⁄dv¨
, (
a
))

	)

131 
SCM_API
 
SCM
 
scm_•awn_thªad
 (
scm_t_ˇtch_body
 
body
, *
body_d©a
,

132 
scm_t_ˇtch_h™dÀr
 
h™dÀr
, *
h™dÀr_d©a
);

134 
SCM_API
 *
scm_wôhout_guûe
 (*(*
func
)(*), *
d©a
);

135 
SCM_API
 *
scm_wôh_guûe
 (*(*
func
)(*), *
d©a
);

137 
SCM_API
 *
scm_i_wôh_guûe_™d_∑ª¡
 (*(*
func
)(*), *
d©a
,

138 
SCM
 
∑ª¡
);

141 
scm_i_thªad_go_to_¶ìp
;

143 
scm_i_thªad_put_to_¶ìp
 ();

144 
scm_i_thªad_wake_up
 ();

145 
scm_i_thªad_övÆid©e_‰ìli°s
 ();

146 
scm_i_thªad_¶ìp_f‹_gc
 ();

148 
scm_thªads_¥ehi°‹y
 (
SCM_STACKITEM
 *);

149 
scm_thªads_öô_fú°_thªad
 ();

150 
SCM_API
 
scm_thªads_m¨k_°acks
 ();

151 
SCM_API
 
scm_öô_thªads
 ();

152 
SCM_API
 
scm_öô_thªad_¥ocs
 ();

153 
SCM_API
 
scm_öô_thªads_deÁu…_dy«mic_°©e
 ();

156 
	#SCM_THREAD_SWITCHING_CODE
 \

158 i‡(
scm_i_thªad_go_to_¶ìp
) \

159 
	`scm_i_thªad_¶ìp_f‹_gc
 (); \

160 } 0)

	)

162 
SCM_API
 
SCM
 
scm_ˇŒ_wôh_√w_thªad
 (SCM 
thunk
, SCM 
h™dÀr
);

163 
SCM_API
 
SCM
 
scm_yõld
 ();

164 
SCM_API
 
SCM
 
scm_joö_thªad
 (SCM 
t
);

166 
SCM_API
 
SCM
 
scm_make_muãx
 ();

167 
SCM_API
 
SCM
 
scm_make_ªcursive_muãx
 ();

168 
SCM_API
 
SCM
 
scm_lock_muãx
 (SCM 
m
);

169 
SCM_API
 
scm_dynwöd_lock_muãx
 (
SCM
 
muãx
);

170 
SCM_API
 
SCM
 
scm_åy_muãx
 (SCM 
m
);

171 
SCM_API
 
SCM
 
scm_u∆ock_muãx
 (SCM 
m
);

173 
SCM_API
 
SCM
 
scm_make_c⁄dôi⁄_v¨übÀ
 ();

174 
SCM_API
 
SCM
 
scm_waô_c⁄dôi⁄_v¨übÀ
 (SCM 
c⁄d
, SCM 
muãx
);

175 
SCM_API
 
SCM
 
scm_timed_waô_c⁄dôi⁄_v¨übÀ
 (SCM 
c⁄d
, SCM 
muãx
,

176 
SCM
 
ab°ime
);

177 
SCM_API
 
SCM
 
scm_sig«l_c⁄dôi⁄_v¨übÀ
 (SCM 
c⁄d
);

178 
SCM_API
 
SCM
 
scm_brﬂdˇ°_c⁄dôi⁄_v¨übÀ
 (SCM 
c⁄d
);

180 
SCM_API
 
SCM
 
scm_cuºít_thªad
 ();

181 
SCM_API
 
SCM
 
scm_Æl_thªads
 ();

183 
SCM_API
 
scm_c_thªad_exôed_p
 (
SCM
 
thªad
);

184 
SCM_API
 
SCM
 
scm_thªad_exôed_p
 (SCM 
thªad
);

186 
SCM_API
 
scm_dynwöd_¸ôiˇl_£˘i⁄
 (
SCM
 
muãx
);

188 
	#SCM_I_CURRENT_THREAD
 \

189 ((
scm_i_thªad
 *Ë
	`scm_i_±hªad_gë•ecific
 (
scm_i_thªad_key
))

	)

190 
SCM_API
 
scm_i_±hªad_key_t
 
	gscm_i_thªad_key
;

192 
	#scm_i_dynwöds
(Ë(
SCM_I_CURRENT_THREAD
->
dynwöds
)

	)

193 
	#scm_i_£t_dynwöds
(
w
Ë(
SCM_I_CURRENT_THREAD
->
dynwöds
 = (w))

	)

194 
	#scm_i_œ°_debug_‰ame
(Ë(
SCM_I_CURRENT_THREAD
->
œ°_debug_‰ame
)

	)

195 
	#scm_i_£t_œ°_debug_‰ame
(
f
) \

196 (
SCM_I_CURRENT_THREAD
->
œ°_debug_‰ame
 = (
f
))

	)

198 
SCM_API
 
scm_i_±hªad_muãx_t
 
	gscm_i_misc_muãx
;

204 #i‡
SCM_USE_PTHREAD_THREADS


205 
SCM_API
 
scm_±hªad_muãx_lock
 (
±hªad_muãx_t
 *
muãx
);

206 
SCM_API
 
scm_dynwöd_±hªad_muãx_lock
 (
±hªad_muãx_t
 *
muãx
);

207 
SCM_API
 
scm_±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
c⁄d
,

208 
±hªad_muãx_t
 *
muãx
);

209 
SCM_API
 
scm_±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
c⁄d
,

210 
±hªad_muãx_t
 *
muãx
,

211 c⁄° 
scm_t_time•ec
 *
ab°ime
);

217 
SCM_API
 
scm_°d_¶ìp
 ();

218 
SCM_API
 
scm_°d_u¶ìp
 ();

	@/usr/include/libguile/throw.h

3 #i‚de‡
SCM_THROW_H


4 
	#SCM_THROW_H


	)

25 
	~"libguûe/__scm.h
"

29 
	$SCM
 (*
	tscm_t_ˇtch_body
Ë(*
	td©a
);

30 
	$SCM
 (*
	tscm_t_ˇtch_h™dÀr
Ë(*
	td©a
,

31 
	tSCM
 
	tèg
, SCM 
	tthrow_¨gs
);

33 
SCM_API
 
SCM
 
	`scm_c_ˇtch
 (SCM 
èg
,

34 
scm_t_ˇtch_body
 
body
,

35 *
body_d©a
,

36 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

37 *
h™dÀr_d©a
,

38 
scm_t_ˇtch_h™dÀr
 
¥e_unwöd_h™dÀr
,

39 *
¥e_unwöd_h™dÀr_d©a
);

41 
SCM_API
 
SCM
 
	`scm_c_wôh_throw_h™dÀr
 (SCM 
èg
,

42 
scm_t_ˇtch_body
 
body
,

43 *
body_d©a
,

44 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

45 *
h™dÀr_d©a
,

46 
œzy_ˇtch_p
);

48 
SCM_API
 
SCM
 
	`scm_öã∫Æ_ˇtch
 (SCM 
èg
,

49 
scm_t_ˇtch_body
 
body
,

50 *
body_d©a
,

51 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

52 *
h™dÀr_d©a
);

54 
SCM_API
 
SCM
 
	`scm_öã∫Æ_œzy_ˇtch
 (SCM 
èg
,

55 
scm_t_ˇtch_body
 
body
,

56 *
body_d©a
,

57 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

58 *
h™dÀr_d©a
);

60 
SCM_API
 
SCM
 
	`scm_öã∫Æ_°ack_ˇtch
 (SCM 
èg
,

61 
scm_t_ˇtch_body
 
body
,

62 *
body_d©a
,

63 
scm_t_ˇtch_h™dÀr
 
h™dÀr
,

64 *
h™dÀr_d©a
);

68 
	sscm_body_thunk_d©a


73 
SCM
 
èg
;

77 
SCM
 
body_¥oc
;

80 
SCM_API
 
SCM
 
	`scm_body_thunk
 (*);

83 
SCM_API
 
SCM
 
	`scm_h™dÀ_by_¥oc
 (*, SCM, SCM);

84 
SCM_API
 
SCM
 
	`scm_h™dÀ_by_¥oc_ˇtchög_Æl
 (*, SCM, SCM);

85 
SCM_API
 
SCM
 
	`scm_h™dÀ_by_mesßge
 (*, SCM, SCM);

86 
SCM_API
 
SCM
 
	`scm_h™dÀ_by_mesßge_n€xô
 (*, SCM, SCM);

87 
SCM_API
 
SCM
 
	`scm_h™dÀ_by_throw
 (*, SCM, SCM);

88 
SCM_API
 
	`scm_exô_°©us
 (
SCM
 
¨gs
);

90 
SCM_API
 
SCM
 
	`scm_ˇtch_wôh_¥e_unwöd_h™dÀr
 (SCM 
èg
, SCM 
thunk
, SCM 
h™dÀr
, SCM 
œzy_h™dÀr
);

91 
SCM_API
 
SCM
 
	`scm_ˇtch
 (SCM 
èg
, SCM 
thunk
, SCM 
h™dÀr
);

92 
SCM_API
 
SCM
 
	`scm_wôh_throw_h™dÀr
 (SCM 
èg
, SCM 
thunk
, SCM 
h™dÀr
);

93 
SCM_API
 
SCM
 
	`scm_œzy_ˇtch
 (SCM 
èg
, SCM 
thunk
, SCM 
h™dÀr
);

94 
SCM_API
 
SCM
 
	`scm_ôhrow
 (SCM 
key
, SCM 
¨gs
, 
n‹ëu∫
);

96 
SCM_API
 
SCM
 
	`scm_throw
 (SCM 
key
, SCM 
¨gs
);

97 
SCM_API
 
	`scm_öô_throw
 ();

	@/usr/include/libguile/unif.h

3 #i‚de‡
SCM_UNIF_H


4 
	#SCM_UNIF_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/¥öt.h
"

37 
	sscm_t_¨øy_dim


39 
ssize_t
 
	mlbnd
;

40 
ssize_t
 
	mubnd
;

41 
ssize_t
 
	möc
;

42 } 
	tscm_t_¨øy_dim
;

44 
SCM_API
 
SCM
 
scm_¨øy_p
 (SCM 
v
, SCM 
¥Ÿ
);

45 
SCM_API
 
SCM
 
scm_ty≥d_¨øy_p
 (SCM 
v
, SCM 
ty≥
);

46 
SCM_API
 
SCM
 
scm_make_¨øy
 (SCM 
fûl
, SCM 
bounds
);

47 
SCM_API
 
SCM
 
scm_make_ty≥d_¨øy
 (SCM 
ty≥
, SCM 
fûl
, SCM 
bounds
);

48 
SCM_API
 
SCM
 
scm_¨øy_ønk
 (SCM 
ø
);

49 
SCM_API
 
size_t
 
scm_c_¨øy_ønk
 (
SCM
 
ø
);

50 
SCM_API
 
SCM
 
scm_¨øy_dimísi⁄s
 (SCM 
ø
);

51 
SCM_API
 
SCM
 
scm_sh¨ed_¨øy_roŸ
 (SCM 
ø
);

52 
SCM_API
 
SCM
 
scm_sh¨ed_¨øy_off£t
 (SCM 
ø
);

53 
SCM_API
 
SCM
 
scm_sh¨ed_¨øy_ö¸emíts
 (SCM 
ø
);

54 
SCM_API
 
SCM
 
scm_make_sh¨ed_¨øy
 (SCM 
ﬁdø
, SCM 
m≠func
, SCM 
dims
);

55 
SCM_API
 
SCM
 
scm_å™•o£_¨øy
 (SCM 
ø
, SCM 
¨gs
);

56 
SCM_API
 
SCM
 
scm_í˛o£_¨øy
 (SCM 
ø
, SCM 
axes
);

57 
SCM_API
 
SCM
 
scm_¨øy_ö_bounds_p
 (SCM 
v
, SCM 
¨gs
);

58 
SCM_API
 
SCM
 
scm_¨øy_ªf
 (SCM 
v
, SCM 
¨gs
);

59 
SCM_API
 
SCM
 
scm_¨øy_£t_x
 (SCM 
v
, SCM 
obj
, SCM 
¨gs
);

60 
SCM_API
 
SCM
 
scm_¨øy_c⁄ã¡s
 (SCM 
ø
, SCM 
°ri˘
);

61 
SCM_API
 
SCM
 
scm_unif‹m_¨øy_ªad_x
 (SCM 
ø
, SCM 
p‹t_‹_fd
,

62 
SCM
 
°¨t
, SCM 
íd
);

63 
SCM_API
 
SCM
 
scm_unif‹m_¨øy_wrôe
 (SCM 
v
, SCM 
p‹t_‹_fd
,

64 
SCM
 
°¨t
, SCM 
íd
);

65 
SCM_API
 
SCM
 
scm_¨øy_to_li°
 (SCM 
v
);

66 
SCM_API
 
SCM
 
scm_li°_to_¨øy
 (SCM 
ndim
, SCM 
l°
);

67 
SCM_API
 
SCM
 
scm_li°_to_ty≥d_¨øy
 (SCM 
ty≥
, SCM 
ndim
, SCM 
l°
);

68 
SCM_API
 
SCM
 
scm_¨øy_ty≥
 (SCM 
ø
);

70 
SCM_API
 
scm_is_¨øy
 (
SCM
 
obj
);

71 
SCM_API
 
scm_is_ty≥d_¨øy
 (
SCM
 
obj
, SCM 
ty≥
);

73 
SCM_API
 
SCM
 
scm_ø2c⁄tig
 (SCM 
ø
, 
c›y
);

75 
	gscm_t_¨øy_h™dÀ
;

77 
	$SCM
 (*
	tscm_i_t_¨øy_ªf
Ë(
	tscm_t_¨øy_h™dÀ
 *, 
	tssize_t
);

78 (*
	tscm_i_t_¨øy_£t
Ë(
	tscm_t_¨øy_h™dÀ
 *, 
	tssize_t
, 
	tSCM
);

80 
	sscm_t_¨øy_h™dÀ
 {

81 
SCM
 
¨øy
;

82 
size_t
 
ba£
;

83 
scm_t_¨øy_dim
 *
dims
;

84 
scm_t_¨øy_dim
 
dim0
;

85 
scm_i_t_¨øy_ªf
 
ªf
;

86 
scm_i_t_¨øy_£t
 
£t
;

87 c⁄° *
ñemíts
;

88 *
wrôabÀ_ñemíts
;

89 } 
	tscm_t_¨øy_h™dÀ
;

91 
SCM_API
 
	`scm_¨øy_gë_h™dÀ
 (
SCM
 
¨øy
, 
scm_t_¨øy_h™dÀ
 *
h
);

92 
SCM_API
 
size_t
 
	`scm_¨øy_h™dÀ_ønk
 (
scm_t_¨øy_h™dÀ
 *
h
);

93 
SCM_API
 
scm_t_¨øy_dim
 *
	`scm_¨øy_h™dÀ_dims
 (
scm_t_¨øy_h™dÀ
 *
h
);

94 
SCM_API
 
ssize_t
 
	`scm_¨øy_h™dÀ_pos
 (
scm_t_¨øy_h™dÀ
 *
h
, 
SCM
 
ödi˚s
);

95 
SCM_API
 c⁄° 
SCM
 *
	`scm_¨øy_h™dÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

96 
SCM_API
 
SCM
 *
	`scm_¨øy_h™dÀ_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

97 
SCM_API
 
	`scm_¨øy_h™dÀ_ªÀa£
 (
scm_t_¨øy_h™dÀ
 *
h
);

104 
SCM_API
 
SCM
 
	`scm_bôve˘‹_p
 (SCM 
vec
);

105 
SCM_API
 
SCM
 
	`scm_bôve˘‹
 (SCM 
bôs
);

106 
SCM_API
 
SCM
 
	`scm_make_bôve˘‹
 (SCM 
Àn
, SCM 
fûl
);

107 
SCM_API
 
SCM
 
	`scm_bôve˘‹_Àngth
 (SCM 
vec
);

108 
SCM_API
 
SCM
 
	`scm_bôve˘‹_ªf
 (SCM 
vec
, SCM 
idx
);

109 
SCM_API
 
SCM
 
	`scm_bôve˘‹_£t_x
 (SCM 
vec
, SCM 
idx
, SCM 
vÆ
);

110 
SCM_API
 
SCM
 
	`scm_li°_to_bôve˘‹
 (SCM 
li°
);

111 
SCM_API
 
SCM
 
	`scm_bôve˘‹_to_li°
 (SCM 
vec
);

112 
SCM_API
 
SCM
 
	`scm_bôve˘‹_fûl_x
 (SCM 
vec
, SCM 
vÆ
);

114 
SCM_API
 
SCM
 
	`scm_bô_cou¡
 (SCM 
ôem
, SCM 
£q
);

115 
SCM_API
 
SCM
 
	`scm_bô_posôi⁄
 (SCM 
ôem
, SCM 
v
, SCM 
k
);

116 
SCM_API
 
SCM
 
	`scm_bô_£t_°¨_x
 (SCM 
v
, SCM 
kv
, SCM 
obj
);

117 
SCM_API
 
SCM
 
	`scm_bô_cou¡_°¨
 (SCM 
v
, SCM 
kv
, SCM 
obj
);

118 
SCM_API
 
SCM
 
	`scm_bô_övît_x
 (SCM 
v
);

119 
SCM_API
 
SCM
 
	`scm_i°r2bve
 (SCM 
°r
);

121 
SCM_API
 
	`scm_is_bôve˘‹
 (
SCM
 
obj
);

122 
SCM_API
 
SCM
 
	`scm_c_make_bôve˘‹
 (
size_t
 
Àn
, SCM 
fûl
);

123 
SCM_API
 
size_t
 
	`scm_c_bôve˘‹_Àngth
 (
SCM
 
vec
);

124 
SCM_API
 
SCM
 
	`scm_c_bôve˘‹_ªf
 (SCM 
vec
, 
size_t
 
idx
);

125 
SCM_API
 
	`scm_c_bôve˘‹_£t_x
 (
SCM
 
vec
, 
size_t
 
idx
, SCM 
vÆ
);

126 
SCM_API
 c⁄° 
scm_t_uöt32
 *
	`scm_¨øy_h™dÀ_bô_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

127 
SCM_API
 
scm_t_uöt32
 *
	`scm_¨øy_h™dÀ_bô_wrôabÀ_ñemíts
 (
scm_t_¨øy_h™dÀ
 *
h
);

128 
SCM_API
 
size_t
 
	`scm_¨øy_h™dÀ_bô_ñemíts_off£t
 (
scm_t_¨øy_h™dÀ
 *
h
);

129 
SCM_API
 c⁄° 
scm_t_uöt32
 *
	`scm_bôve˘‹_ñemíts
 (
SCM
 
vec
,

130 
scm_t_¨øy_h™dÀ
 *
h
,

131 
size_t
 *
ofÂ
,

132 
size_t
 *
À≈
,

133 
ssize_t
 *
ö˝
);

134 
SCM_API
 
scm_t_uöt32
 *
	`scm_bôve˘‹_wrôabÀ_ñemíts
 (
SCM
 
vec
,

135 
scm_t_¨øy_h™dÀ
 *
h
,

136 
size_t
 *
ofÂ
,

137 
size_t
 *
À≈
,

138 
ssize_t
 *
ö˝
);

142 
	sscm_i_t_¨øy


144 
SCM
 
v
;

145 
ba£
;

146 } 
	tscm_i_t_¨øy
;

148 
SCM_API
 
scm_t_bôs
 
scm_i_tc16_¨øy
;

149 
SCM_API
 
scm_t_bôs
 
scm_i_tc16_í˛o£d_¨øy
;

151 
	#SCM_I_ARRAY_FLAG_CONTIGUOUS
 (1 << 16)

	)

153 
	#SCM_I_ARRAYP
(
a
Ë
	`SCM_TYP16_PREDICATE
 (
scm_i_tc16_¨øy
,á)

	)

154 
	#SCM_I_ENCLOSED_ARRAYP
(
a
) \

155 
	`SCM_TYP16_PREDICATE
 (
scm_i_tc16_í˛o£d_¨øy
, 
a
)

	)

156 
	#SCM_I_ARRAY_NDIM
(
x
Ë((
size_t
Ë(
	`SCM_CELL_WORD_0
 (xË>> 17))

	)

157 
	#SCM_I_ARRAY_CONTP
(
x
Ë(
	`SCM_CELL_WORD_0
(xË& 
SCM_I_ARRAY_FLAG_CONTIGUOUS
)

	)

159 
	#SCM_I_ARRAY_MEM
(
a
Ë((
scm_i_t_¨øy
 *Ë
	`SCM_CELL_WORD_1
 (a))

	)

160 
	#SCM_I_ARRAY_V
(
a
Ë(
	`SCM_I_ARRAY_MEM
 (a)->
v
)

	)

161 
	#SCM_I_ARRAY_BASE
(
a
Ë(
	`SCM_I_ARRAY_MEM
 (a)->
ba£
)

	)

162 
	#SCM_I_ARRAY_DIMS
(
a
) \

163 ((
scm_t_¨øy_dim
 *)((*Ë
	`SCM_I_ARRAY_MEM
 (
a
Ë+  (
scm_i_t_¨øy
)))

	)

165 
SCM_API
 
SCM
 
	`scm_i_make_ø
 (
ndim
, 
í˛o£d
);

166 
SCM_API
 
SCM
 
	`scm_i_cvªf
 (SCM 
v
, 
size_t
 
p
, 
í˛o£d
);

167 
SCM_API
 
SCM
 
	`scm_i_ªad_¨øy
 (SCM 
p‹t
, 
c
);

171 #i‡
SCM_ENABLE_DEPRECATED


173 
SCM_API
 
SCM
 
	`scm_make_uve
 (
k
, SCM 
¥Ÿ
);

174 
SCM_API
 
SCM
 
	`scm_¨øy_¥ŸŸy≥
 (SCM 
ø
);

175 
SCM_API
 
SCM
 
	`scm_li°_to_unif‹m_¨øy
 (SCM 
ndim
, SCM 
¥Ÿ
, SCM 
l°
);

176 
SCM_API
 
SCM
 
	`scm_dimísi⁄s_to_unif‹m_¨øy
 (SCM 
dims
, SCM 
¥Ÿ
, SCM 
fûl
);

177 
SCM_API
 
SCM
 
	`scm_make_ø
 (
ndim
);

178 
SCM_API
 
SCM
 
	`scm_sh≠2ø
 (SCM 
¨gs
, c⁄° *
wh©
);

179 
SCM_API
 
SCM
 
	`scm_cvªf
 (SCM 
v
, 
pos
, SCM 
œ°
);

180 
SCM_API
 
	`scm_ø_£t_c⁄ç
 (
SCM
 
ø
);

181 
SCM_API
 
	`scm_aöd
 (
SCM
 
ø
, SCM 
¨gs
, c⁄° *
wh©
);

182 
SCM_API
 
	`scm_ø¥ö1
 (
SCM
 
exp
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

186 
SCM_API
 
	`scm_öô_unif
 ();

	@/usr/include/libguile/validate.h

3 #i‚de‡
SCM_VALIDATE_H


4 
	#SCM_VALIDATE_H


	)

27 
	#SCM_SYSERROR
 dÿ{ 
	`scm_sy£º‹
 (
FUNC_NAME
); } 0)

	)

29 
	#SCM_MEMORY_ERROR
 dÿ{ 
	`scm_mem‹y_îr‹
 (
FUNC_NAME
); } 0)

	)

31 
	#SCM_SYSERROR_MSG
(
°r
, 
¨gs
, 
vÆ
) \

32 dÿ{ 
	`scm_sy£º‹_msg
 (
FUNC_NAME
, (
°r
), (
¨gs
), (
vÆ
)); } 0)

	)

34 
	#SCM_MISC_ERROR
(
°r
, 
¨gs
) \

35 dÿ{ 
	`scm_misc_îr‹
 (
FUNC_NAME
, 
°r
, 
¨gs
); } 0)

	)

37 
	#SCM_WRONG_NUM_ARGS
() \

38 dÿ{ 
	`scm_îr‹_num_¨gs_subr
 (
FUNC_NAME
); } 0)

	)

40 
	#SCM_WRONG_TYPE_ARG
(
pos
, 
obj
) \

41 dÿ{ 
	`scm_wr⁄g_ty≥_¨g
 (
FUNC_NAME
, 
pos
, 
obj
); } 0)

	)

43 
	#SCM_NUM2SIZE
(
pos
, 
¨g
Ë(
	`scm_to_size_t
 (¨g))

	)

45 
	#SCM_NUM2SIZE_DEF
(
pos
, 
¨g
, 
def
) \

46 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_size_t
 (¨g))

	)

48 
	#SCM_NUM2PTRDIFF
(
pos
, 
¨g
Ë(
	`scm_to_ssize_t
 (¨g))

	)

50 
	#SCM_NUM2PTRDIFF_DEF
(
pos
, 
¨g
, 
def
) \

51 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_ssize_t
 (¨g))

	)

53 
	#SCM_NUM2SHORT
(
pos
, 
¨g
Ë(
	`scm_to_sh‹t
 (¨g))

	)

55 
	#SCM_NUM2SHORT_DEF
(
pos
, 
¨g
, 
def
) \

56 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_sh‹t
 (¨g))

	)

58 
	#SCM_NUM2USHORT
(
pos
, 
¨g
Ë(
	`scm_to_ush‹t
 (¨g))

	)

60 
	#SCM_NUM2USHORT_DEF
(
pos
, 
¨g
, 
def
) \

61 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_ush‹t
 (¨g))

	)

63 
	#SCM_NUM2INT
(
pos
, 
¨g
Ë(
	`scm_to_öt
 (¨g))

	)

65 
	#SCM_NUM2INT_DEF
(
pos
, 
¨g
, 
def
) \

66 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_öt
 (¨g))

	)

68 
	#SCM_NUM2UINT
(
pos
, 
¨g
Ë(
	`scm_to_uöt
 (¨g))

	)

70 
	#SCM_NUM2UINT_DEF
(
pos
, 
¨g
, 
def
) \

71 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_uöt
 (¨g))

	)

73 
	#SCM_NUM2ULONG
(
pos
, 
¨g
Ë(
	`scm_to_ul⁄g
 (¨g))

	)

75 
	#SCM_NUM2ULONG_DEF
(
pos
, 
¨g
, 
def
) \

76 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_ul⁄g
 (¨g))

	)

78 
	#SCM_NUM2LONG
(
pos
, 
¨g
Ë(
	`scm_to_l⁄g
 (¨g))

	)

80 
	#SCM_NUM2LONG_DEF
(
pos
, 
¨g
, 
def
) \

81 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_l⁄g
 (¨g))

	)

83 
	#SCM_NUM2LONG_LONG
(
pos
, 
¨g
Ë(
	`scm_to_l⁄g_l⁄g
 (¨g))

	)

85 
	#SCM_NUM2LONG_LONG_DEF
(
pos
, 
¨g
, 
def
) \

86 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_l⁄g_l⁄g
 (¨g))

	)

88 
	#SCM_NUM2ULONG_LONG
(
pos
, 
¨g
Ë(
	`scm_to_ul⁄g_l⁄g
 (¨g))

	)

90 
	#SCM_NUM2ULONG_LONG_DEF
(
pos
, 
¨g
, 
def
) \

91 (
	`SCM_UNBNDP
 (
¨g
Ë? 
def
 : 
	`scm_to_ul⁄g_l⁄g
 (¨g))

	)

93 
	#SCM_NUM2FLOAT
(
pos
, 
¨g
) \

94 (
	`scm_num2Êﬂt
 (
¨g
, 
pos
, 
FUNC_NAME
))

	)

96 
	#SCM_NUM2DOUBLE
(
pos
, 
¨g
) \

97 (
	`scm_num2doubÀ
 (
¨g
, 
pos
, 
FUNC_NAME
))

	)

99 
	#SCM_OUT_OF_RANGE
(
pos
, 
¨g
) \

100 dÿ{ 
	`scm_out_of_ønge_pos
 (
FUNC_NAME
, 
¨g
, 
	`scm_‰om_öt
 (
pos
)); } 0)

	)

102 
	#SCM_ASSERT_RANGE
(
pos
, 
¨g
, 
f
) \

103 dÿ{ i‡(
	`SCM_UNLIKELY
 (!(
f
))) \

104 
	`scm_out_of_ønge_pos
 (
FUNC_NAME
, 
¨g
, 
	`scm_‰om_öt
 (
pos
)); } \

105 0)

	)

107 
	#SCM_MUST_MALLOC_TYPE
(
ty≥
) \

108 ((
ty≥
 *Ë
	`scm_mu°_mÆloc
 ( (ty≥), 
FUNC_NAME
))

	)

110 
	#SCM_MUST_MALLOC_TYPE_NUM
(
ty≥
, 
num
) \

111 ((
ty≥
 *Ë
	`scm_mu°_mÆloc
 ( (ty≥Ë* (
num
), 
FUNC_NAME
))

	)

113 
	#SCM_MUST_MALLOC
(
size
Ë(
	`scm_mu°_mÆloc
 ((size), 
FUNC_NAME
))

	)

115 
	#SCM_MAKE_VALIDATE
(
pos
, 
v¨
, 
¥ed
) \

117 
	`SCM_ASSERT_TYPE
 (
SCM_
 ## 
	`¥ed
 (
v¨
), v¨, 
pos
, 
FUNC_NAME
, #pred); \

118 } 0)

	)

120 
	#SCM_I_MAKE_VALIDATE_MSG2
(
pos
, 
v¨
, 
¥ed
, 
msg
) \

122 
	`SCM_ASSERT_TYPE
 (
	`¥ed
 (
v¨
), v¨, 
pos
, 
FUNC_NAME
, 
msg
); \

123 } 0)

	)

125 
	#SCM_MAKE_VALIDATE_MSG
(
pos
, 
v¨
, 
¥ed
, 
msg
) \

126 
	`SCM_I_MAKE_VALIDATE_MSG2
 (
pos
, 
v¨
, 
SCM_
 ## 
¥ed
, 
msg
)

	)

131 
	#SCM_VALIDATE_REST_ARGUMENT
(
x
) \

133 i‡(
SCM_DEBUG_REST_ARGUMENT
) { \

134 i‡(
	`scm_ûígth
 (
x
) < 0) { \

135 
	`SCM_MISC_ERROR
 ("Re°árgumít†dÿnŸ f‹máÖr›îÜi°.", 
SCM_EOL
); \

138 } 0)

	)

140 
	#SCM_VALIDATE_NIM
(
pos
, 
scm
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, scm, 
NIMP
, "n⁄-immedüã")

	)

142 
	#SCM_VALIDATE_BOOL
(
pos
, 
Êag
) \

144 
	`SCM_ASSERT_TYPE
 (
	`scm_is_boﬁ
 (
Êag
), fœg, 
pos
, 
FUNC_NAME
, "boolean"); \

145 } 0)

	)

147 
	#SCM_VALIDATE_BOOL_COPY
(
pos
, 
Êag
, 
cv¨
) \

149 
	`SCM_ASSERT
 (
	`scm_is_boﬁ
 (
Êag
), fœg, 
pos
, 
FUNC_NAME
); \

150 
cv¨
 = 
	`scm_to_boﬁ
 (
Êag
); \

151 } 0)

	)

153 
	#SCM_VALIDATE_CHAR
(
pos
, 
scm
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, scm, 
CHARP
, "ch¨a˘î")

	)

155 
	#SCM_VALIDATE_CHAR_COPY
(
pos
, 
scm
, 
cv¨
) \

157 
	`SCM_ASSERT
 (
	`SCM_CHARP
 (
scm
), scm, 
pos
, 
FUNC_NAME
); \

158 
cv¨
 = 
	`SCM_CHAR
 (
scm
); \

159 } 0)

	)

161 
	#SCM_VALIDATE_STRING
(
pos
, 
°r
) \

163 
	`SCM_ASSERT_TYPE
 (
	`scm_is_°rög
 (
°r
), så, 
pos
, 
FUNC_NAME
, "string"); \

164 } 0)

	)

166 
	#SCM_VALIDATE_REAL
(
pos
, 
z
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, z, 
REALP
, "ªÆ")

	)

168 
	#SCM_VALIDATE_NUMBER
(
pos
, 
z
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, z, 
NUMBERP
, "numbî")

	)

170 
	#SCM_VALIDATE_USHORT_COPY
(
pos
, 
k
, 
cv¨
) \

172 
cv¨
 = 
	`SCM_NUM2USHORT
 (
pos
, 
k
); \

173 } 0)

	)

175 
	#SCM_VALIDATE_SHORT_COPY
(
pos
, 
k
, 
cv¨
) \

177 
cv¨
 = 
	`SCM_NUM2SHORT
 (
pos
, 
k
); \

178 } 0)

	)

180 
	#SCM_VALIDATE_UINT_COPY
(
pos
, 
k
, 
cv¨
) \

182 
cv¨
 = 
	`SCM_NUM2UINT
 (
pos
, 
k
); \

183 } 0)

	)

185 
	#SCM_VALIDATE_INT_COPY
(
pos
, 
k
, 
cv¨
) \

187 
cv¨
 = 
	`SCM_NUM2INT
 (
pos
, 
k
); \

188 } 0)

	)

190 
	#SCM_VALIDATE_ULONG_COPY
(
pos
, 
k
, 
cv¨
) \

192 
cv¨
 = 
	`SCM_NUM2ULONG
 (
pos
, 
k
); \

193 } 0)

	)

195 
	#SCM_VALIDATE_LONG_COPY
(
pos
, 
k
, 
cv¨
) \

197 
cv¨
 = 
	`SCM_NUM2LONG
 (
pos
, 
k
); \

198 } 0)

	)

200 
	#SCM_VALIDATE_FLOAT_COPY
(
pos
, 
k
, 
cv¨
) \

202 
cv¨
 = 
	`SCM_NUM2FLOAT
 (
pos
, 
k
); \

203 } 0)

	)

205 
	#SCM_VALIDATE_DOUBLE_COPY
(
pos
, 
k
, 
cv¨
) \

207 
cv¨
 = 
	`SCM_NUM2DOUBLE
 (
pos
, 
k
); \

208 } 0)

	)

210 
	#SCM_VALIDATE_DOUBLE_DEF_COPY
(
pos
, 
k
, , 
cv¨
) \

212 i‡(
	`SCM_UNBNDP
 (
k
)) \

214 
k
 = 
	`scm_make_ªÆ
 (); \

215 
cv¨
 = ; \

219 
cv¨
 = 
	`SCM_NUM2DOUBLE
 (
pos
, 
k
); \

221 } 0)

	)

223 
	#SCM_VALIDATE_NULL
(
pos
, 
scm
) \

224 
	`SCM_I_MAKE_VALIDATE_MSG2
 (
pos
, 
scm
, 
scm_is_nuŒ
, "em±yÜi°")

	)

226 
	#SCM_VALIDATE_NULL_OR_NIL
(
pos
, 
scm
) \

227 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
scm
, 
NULL_OR_NIL_P
, "em±yÜi°")

	)

229 
	#SCM_VALIDATE_CONS
(
pos
, 
scm
) \

230 
	`SCM_I_MAKE_VALIDATE_MSG2
 (
pos
, 
scm
, 
scm_is_∑ú
, "∑ú")

	)

232 
	#SCM_VALIDATE_LIST
(
pos
, 
l°
) \

234 
	`SCM_ASSERT
 (
	`scm_ûígth
 (
l°
Ë>0,Ü°, 
pos
, 
FUNC_NAME
); \

235 } 0)

	)

237 
	#SCM_VALIDATE_NONEMPTYLIST
(
pos
, 
l°
) \

239 
	`SCM_ASSERT
 (
	`scm_ûígth
 (
l°
Ë> 0,Ü°, 
pos
, 
FUNC_NAME
); \

240 } 0)

	)

242 
	#SCM_VALIDATE_LIST_COPYLEN
(
pos
, 
l°
, 
cv¨
) \

244 
cv¨
 = 
	`scm_ûígth
 (
l°
); \

245 
	`SCM_ASSERT
 (
cv¨
 >0, 
l°
, 
pos
, 
FUNC_NAME
); \

246 } 0)

	)

248 
	#SCM_VALIDATE_NONEMPTYLIST_COPYLEN
(
pos
, 
l°
, 
cv¨
) \

250 
cv¨
 = 
	`scm_ûígth
 (
l°
); \

251 
	`SCM_ASSERT
 (
cv¨
 >1, 
l°
, 
pos
, 
FUNC_NAME
); \

252 } 0)

	)

254 
	#SCM_VALIDATE_ALISTCELL
(
pos
, 
Æi°
) \

256 
	`SCM_ASSERT
 (
	`scm_is_∑ú
 (
Æi°
Ë&& scm_is_∑ú (
	`SCM_CAR
 (alist)), \

257 
Æi°
, 
pos
, 
FUNC_NAME
); \

258 } 0)

	)

260 
	#SCM_VALIDATE_ALISTCELL_COPYSCM
(
pos
, 
Æi°
, 
cv¨
) \

262 
	`SCM_ASSERT
 (
	`scm_is_∑ú
 (
Æi°
),áli°, 
pos
, 
FUNC_NAME
); \

263 
cv¨
 = 
	`SCM_CAR
 (
Æi°
); \

264 
	`SCM_ASSERT
 (
	`scm_is_∑ú
 (
cv¨
), 
Æi°
, 
pos
, 
FUNC_NAME
); \

265 } 0)

	)

267 
	#SCM_VALIDATE_OPORT_VALUE
(
pos
, 
p‹t
) \

269 
	`SCM_ASSERT
 (
	`scm_vÆid_›‹t_vÆue_p
 (
p‹t
),Ö‹t, 
pos
, 
FUNC_NAME
); \

270 } 0)

	)

272 
	#SCM_VALIDATE_PRINTSTATE
(
pos
, 
a
Ë
	`SCM_MAKE_VALIDATE_MSG
’os,á, 
PRINT_STATE_P
, "¥öt-°©e")

	)

274 
	#SCM_VALIDATE_SMOB
(
pos
, 
obj
, 
ty≥
) \

276 
	`SCM_ASSERT
 (
	`SCM_TYP16_PREDICATE
 (
scm_tc16_
 ## 
ty≥
, 
obj
), \

277 
obj
, 
pos
, 
FUNC_NAME
); \

278 } 0)

	)

280 
	#SCM_VALIDATE_THUNK
(
pos
, 
thunk
) \

282 
	`SCM_ASSERT
 (
	`scm_is_åue
 (
	`scm_thunk_p
 (
thunk
)),Åhunk, 
pos
, 
FUNC_NAME
); \

283 } 0)

	)

285 
	#SCM_VALIDATE_SYMBOL
(
pos
, 
°r
) \

287 
	`SCM_ASSERT_TYPE
 (
	`scm_is_symbﬁ
 (
°r
), så, 
pos
, 
FUNC_NAME
, "symbol"); \

288 } 0)

	)

290 
	#SCM_VALIDATE_VARIABLE
(
pos
, 
v¨
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v¨, 
VARIABLEP
, "v¨übÀ")

	)

292 
	#SCM_VALIDATE_MEMOIZED
(
pos
, 
obj
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, obj, 
MEMOIZEDP
, "memoized code")

	)

294 
	#SCM_VALIDATE_CLOSURE
(
pos
, 
obj
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, obj, 
CLOSUREP
, "˛osuª")

	)

296 
	#SCM_VALIDATE_PROC
(
pos
, 
¥oc
) \

298 
	`SCM_ASSERT
 (
	`scm_is_åue
 (
	`scm_¥o˚duª_p
 (
¥oc
)),Öroc, 
pos
, 
FUNC_NAME
); \

299 } 0)

	)

301 
	#SCM_VALIDATE_NULLORCONS
(
pos
, 
ív
) \

303 
	`SCM_ASSERT
 (
	`scm_is_nuŒ
 (
ív
Ë|| 
	`scm_is_∑ú
 (ív),Énv, 
pos
, 
FUNC_NAME
); \

304 } 0)

	)

306 
	#SCM_VALIDATE_HOOK
(
pos
, 
a
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,á, 
HOOKP
, "hook")

	)

308 
	#SCM_VALIDATE_RGXP
(
pos
, 
a
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,á, 
RGXP
, "ªgexp")

	)

310 
	#SCM_VALIDATE_DIR
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,Ö‹t, 
DIRP
, "dúe˘‹yÖ‹t")

	)

312 
	#SCM_VALIDATE_PORT
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,Ö‹t, 
PORTP
, "p‹t")

	)

314 
	#SCM_VALIDATE_INPUT_PORT
(
pos
, 
p‹t
) \

315 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
p‹t
, 
INPUT_PORT_P
, "öpuàp‹t")

	)

317 
	#SCM_VALIDATE_OUTPUT_PORT
(
pos
, 
p‹t
) \

318 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
p‹t
, 
OUTPUT_PORT_P
, "ouçuàp‹t")

	)

320 
	#SCM_VALIDATE_FPORT
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,Ö‹t, 
FPORTP
, "fûêp‹t")

	)

322 
	#SCM_VALIDATE_OPFPORT
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,Ö‹t, 
OPFPORTP
, "›í fûêp‹t")

	)

324 
	#SCM_VALIDATE_OPINPORT
(
pos
, 
p‹t
) \

325 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
p‹t
, 
OPINPORTP
, "›í i≈uàp‹t")

	)

327 
	#SCM_VALIDATE_OPENPORT
(
pos
, 
p‹t
) \

329 
	`SCM_ASSERT
 (
	`SCM_PORTP
 (
p‹t
Ë&& 
	`SCM_OPENP
 (port), \

330 
p‹t
, 
pos
, 
FUNC_NAME
); \

331 } 0)

	)

333 
	#SCM_VALIDATE_OPPORT
(
pos
, 
p‹t
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos,Ö‹t, 
OPPORTP
, "›íÖ‹t")

	)

335 
	#SCM_VALIDATE_OPOUTPORT
(
pos
, 
p‹t
) \

336 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
p‹t
, 
OPOUTPORTP
, "›í ouçuàp‹t")

	)

338 
	#SCM_VALIDATE_OPOUTSTRPORT
(
pos
, 
p‹t
) \

339 
	`SCM_MAKE_VALIDATE_MSG
 (
pos
, 
p‹t
, 
OPOUTSTRPORTP
, "›í ouçuà°rögÖ‹t")

	)

341 
	#SCM_VALIDATE_FLUID
(
pos
, 
Êuid
) \

342 
	`SCM_I_MAKE_VALIDATE_MSG2
 (
pos
, 
Êuid
, 
scm_is_Êuid
, "Êuid")

	)

344 
	#SCM_VALIDATE_KEYWORD
(
pos
, 
v
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v, 
KEYWORDP
, "keyw‹d")

	)

346 
	#SCM_VALIDATE_STACK
(
pos
, 
v
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v, 
STACKP
, "°ack")

	)

348 
	#SCM_VALIDATE_FRAME
(
pos
, 
v
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v, 
FRAMEP
, "‰ame")

	)

350 
	#SCM_VALIDATE_RSTATE
(
pos
, 
v
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v, 
RSTATEP
, "øndom-gíî©‹-°©e")

	)

352 
	#SCM_VALIDATE_ARRAY
(
pos
, 
v
) \

354 
	`SCM_ASSERT
 (!
	`SCM_IMP
 (
v
) \

355 && 
	`scm_is_åue
 (
	`scm_¨øy_p
 (
v
, 
SCM_UNDEFINED
)), \

356 
v
, 
pos
, 
FUNC_NAME
); \

357 } 0)

	)

359 
	#SCM_VALIDATE_VECTOR
(
pos
, 
v
) \

361 
	`SCM_ASSERT
 (
	`scm_is_sim∂e_ve˘‹
 (
v
), v, 
pos
, 
FUNC_NAME
); \

362 } 0)

	)

364 
	#SCM_VALIDATE_VECTOR_OR_DVECTOR
(
pos
, 
v
) \

366 
	`SCM_ASSERT
 ((
	`scm_is_sim∂e_ve˘‹
 (
v
) \

367 || (
	`scm_is_åue
 (
	`scm_f64ve˘‹_p
 (
v
)))), \

368 
v
, 
pos
, 
FUNC_NAME
); \

369 } 0)

	)

371 
	#SCM_VALIDATE_STRUCT
(
pos
, 
v
Ë
	`SCM_MAKE_VALIDATE_MSG
 (pos, v, 
STRUCTP
, "°ru˘")

	)

373 
	#SCM_VALIDATE_VTABLE
(
pos
, 
v
) \

375 
	`SCM_ASSERT
 (!
	`SCM_IMP
 (
v
Ë&& 
	`scm_is_åue
 (
	`scm_°ru˘_vèbÀ_p
 (v)), \

376 
v
, 
pos
, 
FUNC_NAME
); \

377 } 0)

	)

379 
	#SCM_VALIDATE_VECTOR_LEN
(
pos
, 
v
, 
Àn
) \

381 
	`SCM_ASSERT
 (
	`SCM_VECTORP
 (
v
Ë&& 
Àn
 =
	`SCM_VECTOR_LENGTH
 (v), v, 
pos
, 
FUNC_NAME
); \

382 } 0)

	)

	@/usr/include/libguile/values.h

3 #i‚de‡
SCM_VALUES_H


4 
	#SCM_VALUES_H


	)

25 
	~"libguûe/__scm.h
"

27 
SCM_API
 
SCM
 
	gscm_vÆues_vèbÀ
;

29 
	#SCM_VALUESP
(
x
Ë(
	`SCM_STRUCTP
 (x)\

30 && 
	`scm_is_eq
 (
	`scm_°ru˘_vèbÀ
 (
x
), 
scm_vÆues_vèbÀ
))

	)

32 
SCM_API
 
SCM
 
scm_vÆues
 (SCM 
¨gs
);

33 
SCM_API
 
scm_öô_vÆues
 ();

	@/usr/include/libguile/variable.h

3 #i‚de‡
SCM_VARIABLE_H


4 
	#SCM_VARIABLE_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/smob.h
"

32 
	#SCM_VARIABLEP
(
X
Ë(!
	`SCM_IMP
 (XË&& 
	`SCM_TYP7
(XË=
scm_tc7_v¨übÀ
)

	)

33 
	#SCM_VARIABLE_REF
(
V
Ë
	`SCM_CELL_OBJECT_1
 (V)

	)

34 
	#SCM_VARIABLE_SET
(
V
, 
X
Ë
	`SCM_SET_CELL_OBJECT_1
 (V, X)

	)

35 
	#SCM_VARIABLE_LOC
(
V
Ë(
	`SCM_CELL_OBJECT_LOC
 ((V), 1))

	)

39 
SCM_API
 
SCM
 
scm_make_v¨übÀ
 (SCM 
öô
);

40 
SCM_API
 
SCM
 
scm_make_undeföed_v¨übÀ
 ();

41 
SCM_API
 
SCM
 
scm_v¨übÀ_p
 (SCM 
obj
);

42 
SCM_API
 
SCM
 
scm_v¨übÀ_ªf
 (SCM 
v¨
);

43 
SCM_API
 
SCM
 
scm_v¨übÀ_£t_x
 (SCM 
v¨
, SCM 
vÆ
);

44 
SCM_API
 
SCM
 
scm_v¨übÀ_bound_p
 (SCM 
v¨
);

46 
SCM_API
 
scm_i_v¨übÀ_¥öt
 (
SCM
 
v¨
, SCM 
p‹t
, 
scm_¥öt_°©e
 *
p°©e
);

48 
SCM_API
 
scm_öô_v¨übÀ
 ();

	@/usr/include/libguile/vectors.h

3 #i‚de‡
SCM_VECTORS_H


4 
	#SCM_VECTORS_H


	)

25 
	~"libguûe/__scm.h
"

26 
	~"libguûe/unif.h
"

30 
SCM_API
 
SCM
 
scm_ve˘‹_p
 (SCM 
x
);

31 
SCM_API
 
SCM
 
scm_ve˘‹_Àngth
 (SCM 
v
);

32 
SCM_API
 
SCM
 
scm_ve˘‹
 (SCM 
l
);

33 
SCM_API
 
SCM
 
scm_ve˘‹_ªf
 (SCM 
v
, SCM 
k
);

34 
SCM_API
 
SCM
 
scm_ve˘‹_£t_x
 (SCM 
v
, SCM 
k
, SCM 
obj
);

35 
SCM_API
 
SCM
 
scm_make_ve˘‹
 (SCM 
k
, SCM 
fûl
);

36 
SCM_API
 
SCM
 
scm_ve˘‹_to_li°
 (SCM 
v
);

37 
SCM_API
 
SCM
 
scm_ve˘‹_fûl_x
 (SCM 
v
, SCM 
fûl_x
);

38 
SCM_API
 
SCM
 
scm_ve˘‹_move_À·_x
 (SCM 
vec1
, SCM 
°¨t1
, SCM 
íd1
,

39 
SCM
 
vec2
, SCM 
°¨t2
);

40 
SCM_API
 
SCM
 
scm_ve˘‹_move_right_x
 (SCM 
vec1
, SCM 
°¨t1
, SCM 
íd1
,

41 
SCM
 
vec2
, SCM 
°¨t2
);

42 
SCM_API
 
SCM
 
scm_ve˘‹_c›y
 (SCM 
vec
);

44 
SCM_API
 
scm_is_ve˘‹
 (
SCM
 
obj
);

45 
SCM_API
 
scm_is_sim∂e_ve˘‹
 (
SCM
 
obj
);

46 
SCM_API
 
SCM
 
scm_c_make_ve˘‹
 (
size_t
 
Àn
, SCM 
fûl
);

47 
SCM_API
 
size_t
 
scm_c_ve˘‹_Àngth
 (
SCM
 
vec
);

48 
SCM_API
 
SCM
 
scm_c_ve˘‹_ªf
 (SCM 
vec
, 
size_t
 
k
);

49 
SCM_API
 
scm_c_ve˘‹_£t_x
 (
SCM
 
vec
, 
size_t
 
k
, SCM 
obj
);

50 
SCM_API
 c⁄° 
SCM
 *
scm_ve˘‹_ñemíts
 (SCM 
vec
,

51 
scm_t_¨øy_h™dÀ
 *
h
,

52 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

53 
SCM_API
 
SCM
 *
scm_ve˘‹_wrôabÀ_ñemíts
 (SCM 
vec
,

54 
scm_t_¨øy_h™dÀ
 *
h
,

55 
size_t
 *
À≈
, 
ssize_t
 *
ö˝
);

59 
	#SCM_SIMPLE_VECTOR_LENGTH
(
x
Ë
	`SCM_I_VECTOR_LENGTH
(x)

	)

60 
	#SCM_SIMPLE_VECTOR_REF
(
x
,
idx
Ë((
	`SCM_I_VECTOR_ELTS
(x))[idx])

	)

61 
	#SCM_SIMPLE_VECTOR_SET
(
x
,
idx
,
vÆ
Ë((
	`SCM_I_VECTOR_WELTS
(x))[idx]=(vÆ))

	)

65 
SCM_API
 
SCM
 
scm_gíîÆized_ve˘‹_p
 (SCM 
v
);

66 
SCM_API
 
SCM
 
scm_gíîÆized_ve˘‹_Àngth
 (SCM 
v
);

67 
SCM_API
 
SCM
 
scm_gíîÆized_ve˘‹_ªf
 (SCM 
v
, SCM 
idx
);

68 
SCM_API
 
SCM
 
scm_gíîÆized_ve˘‹_£t_x
 (SCM 
v
, SCM 
idx
, SCM 
vÆ
);

69 
SCM_API
 
SCM
 
scm_gíîÆized_ve˘‹_to_li°
 (SCM 
v
);

71 
SCM_API
 
scm_is_gíîÆized_ve˘‹
 (
SCM
 
obj
);

72 
SCM_API
 
size_t
 
scm_c_gíîÆized_ve˘‹_Àngth
 (
SCM
 
v
);

73 
SCM_API
 
SCM
 
scm_c_gíîÆized_ve˘‹_ªf
 (SCM 
v
, 
size_t
 
idx
);

74 
SCM_API
 
scm_c_gíîÆized_ve˘‹_£t_x
 (
SCM
 
v
, 
size_t
 
idx
, SCM 
vÆ
);

75 
SCM_API
 
scm_gíîÆized_ve˘‹_gë_h™dÀ
 (
SCM
 
vec
,

76 
scm_t_¨øy_h™dÀ
 *
h
);

80 
	#SCM_I_IS_VECTOR
(
x
Ë(!
	`SCM_IMP
(xË&& (
	`SCM_TYP7S
(x)==
scm_tc7_ve˘‹
))

	)

81 
	#SCM_I_VECTOR_ELTS
(
x
Ë((c⁄° 
SCM
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

82 
	#SCM_I_VECTOR_WELTS
(
x
Ë((
SCM
 *Ë
	`SCM_CELL_WORD_1
 (x))

	)

83 
	#SCM_I_VECTOR_LENGTH
(
x
Ë(((
size_t
Ë
	`SCM_CELL_WORD_0
 (x)Ë>> 8)

	)

85 
SCM_API
 
scm_i_ve˘‹_‰ì
 (
SCM
 
vec
);

86 
SCM_API
 
SCM
 
scm_i_ve˘‹_equÆ_p
 (SCM 
x
, SCM 
y
);

92 
	#SCM_I_WVECTP
(
x
Ë(!
	`SCM_IMP
 (x) && \

93 
	`SCM_TYP7
 (
x
Ë=
scm_tc7_wve˘
)

	)

94 
	#SCM_I_WVECT_LENGTH
 
SCM_I_VECTOR_LENGTH


	)

95 
	#SCM_I_WVECT_VELTS
 
SCM_I_VECTOR_ELTS


	)

96 
	#SCM_I_WVECT_GC_WVELTS
 
SCM_I_VECTOR_WELTS


	)

97 
	#SCM_I_WVECT_EXTRA
(
x
Ë(
	`SCM_CELL_WORD_2
 (x))

	)

98 
	#SCM_I_SET_WVECT_EXTRA
(
x
, 
t
Ë(
	`SCM_SET_CELL_WORD_2
 ((x),—)))

	)

99 
	#SCM_I_WVECT_GC_CHAIN
(
x
Ë(
	`SCM_CELL_OBJECT_3
 (x))

	)

100 
	#SCM_I_SET_WVECT_GC_CHAIN
(
x
, 
o
Ë(
	`SCM_SET_CELL_OBJECT_3
 ((x), (o)))

	)

102 
SCM_API
 
SCM
 
scm_i_Æloˇã_wók_ve˘‹
 (
scm_t_bôs
 
ty≥
, SCM 
size
, SCM 
fûl
);

104 
SCM_API
 
scm_öô_ve˘‹s
 ();

	@/usr/include/libguile/version.h

3 #i‚de‡
SCM_VERSION_H


4 
	#SCM_VERSION_H


	)

25 
	~"libguûe/__scm.h
"

29 
	#SCM_MAJOR_VERSION
 1

	)

30 
	#SCM_MINOR_VERSION
 8

	)

31 
	#SCM_MICRO_VERSION
 7

	)

33 
SCM_API
 
SCM
 
scm_maj‹_vîsi⁄
 ();

34 
SCM_API
 
SCM
 
scm_mö‹_vîsi⁄
 ();

35 
SCM_API
 
SCM
 
scm_mi¸o_vîsi⁄
 ();

36 
SCM_API
 
SCM
 
scm_ef„˘ive_vîsi⁄
 ();

37 
SCM_API
 
SCM
 
scm_vîsi⁄
 ();

38 
SCM_API
 
scm_öô_vîsi⁄
 ();

	@/usr/include/libguile/vports.h

3 #i‚de‡
SCM_VPORTS_H


4 
	#SCM_VPORTS_H


	)

25 
	~"libguûe/__scm.h
"

29 
SCM_API
 
SCM
 
scm_make_so·_p‹t
 (SCM 
pv
, SCM 
modes
);

30 
SCM_API
 
scm_öô_vp‹ts
 ();

	@/usr/include/libguile/weaks.h

3 #i‚de‡
SCM_WEAKS_H


4 
	#SCM_WEAKS_H


	)

25 
	~"libguûe/__scm.h
"

29 
	#SCM_WVECTF_WEAK_KEY
 1

	)

30 
	#SCM_WVECTF_WEAK_VALUE
 2

	)

32 
	#SCM_WVECT_WEAK_KEY_P
(
x
Ë(
	`SCM_I_WVECT_EXTRA
(xË& 
SCM_WVECTF_WEAK_KEY
)

	)

33 
	#SCM_WVECT_WEAK_VALUE_P
(
x
Ë(
	`SCM_I_WVECT_EXTRA
(xË& 
SCM_WVECTF_WEAK_VALUE
)

	)

41 
	#SCM_I_WVECT_DELTA
(
x
Ë(
	`SCM_I_WVECT_EXTRA
(xË>> 3)

	)

42 
	#SCM_I_SET_WVECT_DELTA
(
x
,
n
Ë(
SCM_I_SET_WVECT_EXTRA
 \

43 ((
x
), ((
	`SCM_I_WVECT_EXTRA
 (x) & 7) \

44 | ((
n
Ë<< 3))))

	)

46 
	#SCM_I_WVECT_TYPE
(
x
Ë(
	`SCM_I_WVECT_EXTRA
(xË& 7)

	)

47 
	#SCM_I_SET_WVECT_TYPE
(
x
,
t
Ë(
SCM_I_SET_WVECT_EXTRA
 \

48 ((
x
), (
	`SCM_I_WVECT_EXTRA
 (xË& ~7Ë| (
t
)))

	)

49 
	#SCM_IS_WHVEC
(
X
Ë(
	`SCM_I_WVECT_TYPE
 (XË=1)

	)

50 
	#SCM_IS_WHVEC_V
(
X
Ë(
	`SCM_I_WVECT_TYPE
 (XË=2)

	)

51 
	#SCM_IS_WHVEC_B
(
X
Ë(
	`SCM_I_WVECT_TYPE
 (XË=3)

	)

52 
	#SCM_IS_WHVEC_ANY
(
X
Ë(
	`SCM_I_WVECT_TYPE
 (XË!0)

	)

56 
SCM_API
 
SCM
 
scm_make_wók_ve˘‹
 (SCM 
k
, SCM 
fûl
);

57 
SCM_API
 
SCM
 
scm_wók_ve˘‹
 (SCM 
l
);

58 
SCM_API
 
SCM
 
scm_wók_ve˘‹_p
 (SCM 
x
);

59 
SCM_API
 
SCM
 
scm_make_wók_key_Æi°_ve˘‹
 (SCM 
k
);

60 
SCM_API
 
SCM
 
scm_make_wók_vÆue_Æi°_ve˘‹
 (SCM 
k
);

61 
SCM_API
 
SCM
 
scm_make_doubly_wók_Æi°_ve˘‹
 (SCM 
k
);

62 
SCM_API
 
SCM
 
scm_wók_key_Æi°_ve˘‹_p
 (SCM 
x
);

63 
SCM_API
 
SCM
 
scm_wók_vÆue_Æi°_ve˘‹_p
 (SCM 
x
);

64 
SCM_API
 
SCM
 
scm_doubly_wók_Æi°_ve˘‹_p
 (SCM 
x
);

65 
SCM_API
 
SCM
 
scm_öô_wóks_buûtös
 ();

66 
SCM_API
 
scm_öô_wóks
 ();

68 
SCM_API
 
scm_i_öô_wók_ve˘‹s_f‹_gc
 ();

69 
SCM_API
 
scm_i_m¨k_wók_ve˘‹
 (
SCM
 
w
);

70 
SCM_API
 
scm_i_m¨k_wók_ve˘‹s_n⁄_wóks
 ();

71 
SCM_API
 
scm_i_ªmove_wóks_‰om_wók_ve˘‹s
 ();

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gmp-i386.h

21 #i‚de‡
__GMP_H__


23 #i‡
deföed
 (
__˝lu•lus
)

24 
	~<iosfwd
>

25 
	~<c°dio
>

30 #i‡! 
deföed
 (
__GMP_WITHIN_CONFIGURE
)

31 
	#__GMP_BITS_PER_MP_LIMB
 32

	)

32 
	#__GMP_HAVE_HOST_CPU_FAMILY_powî
 0

	)

33 
	#__GMP_HAVE_HOST_CPU_FAMILY_powîpc
 0

	)

34 
	#GMP_LIMB_BITS
 32

	)

35 
	#GMP_NAIL_BITS
 0

	)

37 
	#GMP_NUMB_BITS
 (
GMP_LIMB_BITS
 - 
GMP_NAIL_BITS
)

	)

38 
	#GMP_NUMB_MASK
 ((~ 
	`__GMP_CAST
 (
mp_limb_t
, 0)Ë>> 
GMP_NAIL_BITS
)

	)

39 
	#GMP_NUMB_MAX
 
GMP_NUMB_MASK


	)

40 
	#GMP_NAIL_MASK
 (~ 
GMP_NUMB_MASK
)

	)

46 #i‚de‡
__GNU_MP__


47 
	#__GNU_MP__
 4

	)

49 
	#__√ed_size_t


	)

50 #i‡
deföed
 (
__˝lu•lus
)

51 
	~<c°ddef
>

53 
	~<°ddef.h
>

55 #unde‡
__√ed_size_t


58 #i‡! 
deföed
 (
__GMP_WITHIN_CONFIGURE
)

60 
	#__GMP_LIBGMP_DLL
 0

	)

89 #i‡ 
deföed
 (
__STDC__
) \

90 || 
deföed
 (
__˝lu•lus
) \

91 || 
deföed
 (
_AIX
) \

92 || 
deföed
 (
__DECC
) \

93 || (
deföed
 (
__mùs
Ë&& deföed (
_SYSTYPE_SVR4
)) \

94 || 
deföed
 (
_MSC_VER
) \

95 || 
	$deföed
 (
_WIN32
)

96 
	#__GMP_HAVE_CONST
 1

	)

97 
	#__GMP_HAVE_PROTOTYPES
 1

	)

98 
	#__GMP_HAVE_TOKEN_PASTE
 1

	)

100 
	#__GMP_HAVE_CONST
 0

	)

101 
	#__GMP_HAVE_PROTOTYPES
 0

	)

102 
	#__GMP_HAVE_TOKEN_PASTE
 0

	)

106 #i‡
__GMP_HAVE_CONST


107 
	#__gmp_c⁄°
 c⁄°

	)

108 
	#__gmp_sig√d
 sig√d

	)

110 
	#__gmp_c⁄°


	)

111 
	#__gmp_sig√d


	)

155 #i‡
	`deföed
 (
__GNUC__
)

156 
	#__GMP_DECLSPEC_EXPORT
 
	`__de˛•ec
(
__dŒexp‹t__
)

	)

157 
	#__GMP_DECLSPEC_IMPORT
 
	`__de˛•ec
(
__dŒimp‹t__
)

	)

159 #i‡
	`deföed
 (
_MSC_VER
Ë|| deföed (
__BORLANDC__
)

160 
	#__GMP_DECLSPEC_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

161 
	#__GMP_DECLSPEC_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

163 #ifde‡
__WATCOMC__


164 
	#__GMP_DECLSPEC_EXPORT
 
__exp‹t


	)

165 
	#__GMP_DECLSPEC_IMPORT
 
__imp‹t


	)

167 #ifde‡
__IBMC__


168 
	#__GMP_DECLSPEC_EXPORT
 
_Exp‹t


	)

169 
	#__GMP_DECLSPEC_IMPORT
 
_Imp‹t


	)

172 #i‡
__GMP_LIBGMP_DLL


173 #i‡
__GMP_WITHIN_GMP


175 
	#__GMP_DECLSPEC
 
__GMP_DECLSPEC_EXPORT


	)

178 
	#__GMP_DECLSPEC
 
__GMP_DECLSPEC_IMPORT


	)

182 
	#__GMP_DECLSPEC


	)

186 #ifde‡
__GMP_SHORT_LIMB


187 
	tmp_limb_t
;

188 
	tmp_limb_sig√d_t
;

190 #ifde‡
_LONG_LONG_LIMB


191 
	tmp_limb_t
;

192 
	tmp_limb_sig√d_t
;

194 
	tmp_limb_t
;

195 
	tmp_limb_sig√d_t
;

204 
_mp_Æloc
;

206 
_mp_size
;

209 
mp_limb_t
 *
_mp_d
;

210 } 
	t__mpz_°ru˘
;

215 
__mpz_°ru˘
 
	tMP_INT
;

216 
__mpz_°ru˘
 
	tmpz_t
[1];

218 
mp_limb_t
 * 
	tmp_±r
;

219 
__gmp_c⁄°
 
	tmp_limb_t
 * 
	tmp_§˝å
;

220 #i‡
	`deföed
 (
_CRAY
Ë&& ! deföed (
_CRAYMPP
)

222 
	#__GMP_MP_SIZE_T_INT
 1

	)

223 
	tmp_size_t
;

224 
	tmp_exp_t
;

226 
	#__GMP_MP_SIZE_T_INT
 0

	)

227 
	tmp_size_t
;

228 
	tmp_exp_t
;

233 
__mpz_°ru˘
 
_mp_num
;

234 
__mpz_°ru˘
 
_mp_dí
;

235 } 
	t__mpq_°ru˘
;

237 
__mpq_°ru˘
 
	tMP_RAT
;

238 
__mpq_°ru˘
 
	tmpq_t
[1];

242 
_mp_¥ec
;

246 
_mp_size
;

249 
mp_exp_t
 
_mp_exp
;

250 
mp_limb_t
 *
_mp_d
;

251 } 
	t__mpf_°ru˘
;

254 
__mpf_°ru˘
 
	tmpf_t
[1];

259 
GMP_RAND_ALG_DEFAULT
 = 0,

260 
GMP_RAND_ALG_LC
 = 
GMP_RAND_ALG_DEFAULT


261 } 
	tgmp_øndÆg_t
;

266 
mpz_t
 
_mp_£ed
;

267 
gmp_øndÆg_t
 
_mp_Æg
;

269 *
_mp_lc
;

270 } 
_mp_Ægd©a
;

271 } 
	t__gmp_ønd°©e_°ru˘
;

272 
__gmp_ønd°©e_°ru˘
 
	tgmp_ønd°©e_t
[1];

276 
__gmp_c⁄°
 
	t__mpz_°ru˘
 *
	tmpz_§˝å
;

277 
__mpz_°ru˘
 *
	tmpz_±r
;

278 
__gmp_c⁄°
 
	t__mpf_°ru˘
 *
	tmpf_§˝å
;

279 
__mpf_°ru˘
 *
	tmpf_±r
;

280 
__gmp_c⁄°
 
	t__mpq_°ru˘
 *
	tmpq_§˝å
;

281 
__mpq_°ru˘
 *
	tmpq_±r
;

286 #i‡
__GMP_LIBGMP_DLL


287 #i‡
__GMP_WITHIN_GMPXX


289 
	#__GMP_DECLSPEC_XX
 
__GMP_DECLSPEC_EXPORT


	)

292 
	#__GMP_DECLSPEC_XX
 
__GMP_DECLSPEC_IMPORT


	)

296 
	#__GMP_DECLSPEC_XX


	)

300 #i‡
__GMP_HAVE_PROTOTYPES


301 
	#__GMP_PROTO
(
x
Ë
	)
x

303 
	#__GMP_PROTO
(
x
Ë()

	)

306 #i‚de‡
__MPN


307 #i‡
__GMP_HAVE_TOKEN_PASTE


308 
	#__MPN
(
x
Ë
__gm≤_
##
	)
x

310 
	#__MPN
(
x
Ë
__gm≤_
 
	)
x

316 #i‡
	`deföed
 (
FILE
) \

317 || 
	`deföed
 (
H_STDIO
) \

318 || 
	`deföed
 (
_H_STDIO
) \

319 || 
	`deföed
 (
_STDIO_H
) \

320 || 
	`deföed
 (
_STDIO_H_
) \

321 || 
	`deföed
 (
__STDIO_H
) \

322 || 
	`deföed
 (
__STDIO_H__
) \

323 || 
	`deföed
 (
_STDIO_INCLUDED
) \

324 || 
	`deföed
 (
__dj_ö˛ude_°dio_h_
) \

325 || 
	`deföed
 (
_FILE_DEFINED
) \

326 || 
	`deföed
 (
__STDIO__
) \

327 || 
	`deföed
 (
_MSL_STDIO_H
) \

328 || 
	`deföed
 (
_STDIO_H_INCLUDED
) \

329 || 
	$deföed
 (
_ISO_STDIO_ISO_H
)

330 
	#_GMP_H_HAVE_FILE
 1

	)

337 #i‡
	`deföed
 (
_OBSTACK_H
)

338 
	#_GMP_H_HAVE_OBSTACK
 1

	)

352 #ifde‡
va_°¨t


353 
	#_GMP_H_HAVE_VA_LIST
 1

	)

357 #i‡
	`deföed
 (
__GNUC__
Ë&& deföed (
__GNUC_MINOR__
)

358 
	#__GMP_GNUC_PREREQ
(
maj
, 
mö
) \

359 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

361 
	#__GMP_GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

369 #i‡
	`__GMP_GNUC_PREREQ
 (2,96Ë&& ! 
	`deföed
 (
__GMP_NO_ATTRIBUTE_CONST_PURE
)

370 
	#__GMP_ATTRIBUTE_PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

372 
	#__GMP_ATTRIBUTE_PURE


	)

383 #ifde‡
__˝lu•lus


384 
	#__GMP_CAST
(
ty≥
, 
ex¥
Ë(
°©ic_ˇ°
<ty≥> (ex¥))

	)

386 
	#__GMP_CAST
(
ty≥
, 
ex¥
Ë(—y≥Ë”x¥))

	)

407 #i‡
	`deföed
 (
__˝lu•lus
)

408 
	#__GMP_NOTHROW
 
	`throw
 ()

	)

410 
	#__GMP_NOTHROW


	)

423 #ifde‡
__GNUC__


424 #i‡(
deföed
 
__GNUC_STDC_INLINE__
Ë|| (
__GNUC__
 =4 && 
__GNUC_MINOR__
 == 2)

425 
	#__GMP_EXTERN_INLINE
 
__ölöe__
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

427 
	#__GMP_EXTERN_INLINE
 
__ölöe__


	)

429 
	#__GMP_INLINE_PROTOTYPES
 1

	)

440 #ifde‡
__DECC


441 
	#__GMP_EXTERN_INLINE
 
__ölöe


	)

451 #ifde‡
__SCO_VERSION__


452 #i‡
__SCO_VERSION__
 > 400000000 && 
__STDC__
 != 1 \

453 && ! 
	$deföed
 (
__GMP_EXTERN_INLINE
)

454 
	#__GMP_EXTERN_INLINE
 
ölöe


	)

459 #ifde‡
_MSC_VER


460 
	#__GMP_EXTERN_INLINE
 
__ölöe


	)

464 #i‡
	`deföed
 (
__SUNPRO_C
) && __SUNPRO_C >= 0x560 \

465 && ! 
	$deföed
 (
__GMP_EXTERN_INLINE
)

466 
	#__GMP_EXTERN_INLINE
 
ölöe


	)

470 #i‡
	`deföed
 (
__SUNPRO_C
) && __SUNPRO_C >= 0x540 \

471 && ! 
	$deföed
 (
__GMP_EXTERN_INLINE
)

472 
	#__GMP_EXTERN_INLINE
 
ölöe


	)

479 #i‡
	`deföed
 (
__˝lu•lus
Ë&& ! deföed (
__GMP_EXTERN_INLINE
)

480 
	#__GMP_EXTERN_INLINE
 
ölöe


	)

489 #i‡
	`deföed
 (
__GMP_WITHIN_CONFIGURE
Ë&& ! 
__GMP_WITHIN_CONFIGURE_INLINE


490 #unde‡
__GMP_EXTERN_INLINE


496 #ifde‡
__GMP_EXTERN_INLINE


497 #i‚de‡
__GMP_INLINE_PROTOTYPES


498 
	#__GMP_INLINE_PROTOTYPES
 0

	)

501 
	#__GMP_INLINE_PROTOTYPES
 1

	)

505 
	#__GMP_ABS
(
x
Ë((xË>0 ? (xË: -(x))

	)

506 
	#__GMP_MAX
(
h
,
i
Ë((hË> (iË? (hË: (i))

	)

510 
	#__GMP_UINT_MAX
 (~ (Ë0)

	)

511 
	#__GMP_ULONG_MAX
 (~ (Ë0)

	)

512 
	#__GMP_USHRT_MAX
 ((Ë~0)

	)

516 #i‡
	`__GMP_GNUC_PREREQ
 (3,0)

517 
	#__GMP_LIKELY
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄dË!0, 1)

	)

518 
	#__GMP_UNLIKELY
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄dË!0, 0)

	)

520 
	#__GMP_LIKELY
(
c⁄d
Ë(c⁄d)

	)

521 
	#__GMP_UNLIKELY
(
c⁄d
Ë(c⁄d)

	)

524 #ifde‡
_CRAY


525 
	#__GMP_CRAY_Pøgma
(
°r
Ë
	`_Pøgma
 (°r)

	)

527 
	#__GMP_CRAY_Pøgma
(
°r
)

	)

532 
	#mpq_numªf
(
Q
Ë(&((Q)->
_mp_num
))

	)

533 
	#mpq_díªf
(
Q
Ë(&((Q)->
_mp_dí
))

	)

536 #i‡
	`deföed
 (
__˝lu•lus
)

538 
usög
 
°d
::
FILE
;

541 
	#mp_£t_mem‹y_fun˘i⁄s
 
__gmp_£t_mem‹y_fun˘i⁄s


	)

542 
__GMP_DECLSPEC
 
mp_£t_mem‹y_fun˘i⁄s
 
	`__GMP_PROTO
 ((*(*Ë(
size_t
),

543 *(*Ë(*, 
size_t
, size_t),

544 (*Ë(*, 
size_t
))Ë
__GMP_NOTHROW
;

546 
	#mp_gë_mem‹y_fun˘i⁄s
 
__gmp_gë_mem‹y_fun˘i⁄s


	)

547 
__GMP_DECLSPEC
 
mp_gë_mem‹y_fun˘i⁄s
 
	`__GMP_PROTO
 ((*(**Ë(
size_t
),

548 *(**Ë(*, 
size_t
, size_t),

549 (**Ë(*, 
size_t
))Ë
__GMP_NOTHROW
;

551 
	#mp_bôs_≥r_limb
 
__gmp_bôs_≥r_limb


	)

552 
__GMP_DECLSPEC
 
__gmp_c⁄°
 
mp_bôs_≥r_limb
;

554 
	#gmp_î∫o
 
__gmp_î∫o


	)

555 
__GMP_DECLSPEC
 
gmp_î∫o
;

557 
	#gmp_vîsi⁄
 
__gmp_vîsi⁄


	)

558 
__GMP_DECLSPEC
 
__gmp_c⁄°
 * __gmp_c⁄° 
gmp_vîsi⁄
;

564 
	#gmp_øndöô
 
__gmp_øndöô


	)

565 
__GMP_DECLSPEC
 
gmp_øndöô
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, 
gmp_øndÆg_t
, ...));

567 
	#gmp_øndöô_deÁu…
 
__gmp_øndöô_deÁu…


	)

568 
__GMP_DECLSPEC
 
gmp_øndöô_deÁu…
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
));

570 
	#gmp_øndöô_lc_2exp
 
__gmp_øndöô_lc_2exp


	)

571 
__GMP_DECLSPEC
 
gmp_øndöô_lc_2exp
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
,

572 
mpz_§˝å
, ,

575 
	#gmp_øndöô_lc_2exp_size
 
__gmp_øndöô_lc_2exp_size


	)

576 
__GMP_DECLSPEC
 
gmp_øndöô_lc_2exp_size
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, ));

578 
	#gmp_øndöô_mt
 
__gmp_øndöô_mt


	)

579 
__GMP_DECLSPEC
 
gmp_øndöô_mt
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
));

581 
	#gmp_øndöô_£t
 
__gmp_øndöô_£t


	)

582 
__GMP_DECLSPEC
 
gmp_øndöô_£t
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, 
__gmp_c⁄°
 
__gmp_ønd°©e_°ru˘
 *));

584 
	#gmp_ønd£ed
 
__gmp_ønd£ed


	)

585 
__GMP_DECLSPEC
 
gmp_ønd£ed
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, 
mpz_§˝å
));

587 
	#gmp_ønd£ed_ui
 
__gmp_ønd£ed_ui


	)

588 
__GMP_DECLSPEC
 
gmp_ønd£ed_ui
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, ));

590 
	#gmp_ønd˛ór
 
__gmp_ønd˛ór


	)

591 
__GMP_DECLSPEC
 
gmp_ønd˛ór
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
));

593 
	#gmp_uøndomb_ui
 
__gmp_uøndomb_ui


	)

594 
__GMP_DECLSPEC
 
gmp_uøndomb_ui
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, ));

596 
	#gmp_uøndomm_ui
 
__gmp_uøndomm_ui


	)

597 
__GMP_DECLSPEC
 
gmp_uøndomm_ui
 
	`__GMP_PROTO
 ((
gmp_ønd°©e_t
, ));

602 
	#gmp_a•rötf
 
__gmp_a•rötf


	)

603 
__GMP_DECLSPEC
 
gmp_a•rötf
 
	`__GMP_PROTO
 ((**, 
__gmp_c⁄°
 *, ...));

605 
	#gmp_Ârötf
 
__gmp_Ârötf


	)

606 #ifde‡
_GMP_H_HAVE_FILE


607 
__GMP_DECLSPEC
 
gmp_Ârötf
 
	`__GMP_PROTO
 ((
FILE
 *, 
__gmp_c⁄°
 *, ...));

610 
	#gmp_ob°ack_¥ötf
 
__gmp_ob°ack_¥ötf


	)

611 #i‡
	`deföed
 (
_GMP_H_HAVE_OBSTACK
)

612 
__GMP_DECLSPEC
 
gmp_ob°ack_¥ötf
 
	`__GMP_PROTO
 ((
ob°ack
 *, 
__gmp_c⁄°
 *, ...));

615 
	#gmp_ob°ack_v¥ötf
 
__gmp_ob°ack_v¥ötf


	)

616 #i‡
	`deföed
 (
_GMP_H_HAVE_OBSTACK
Ë&& deföed (
_GMP_H_HAVE_VA_LIST
)

617 
__GMP_DECLSPEC
 
gmp_ob°ack_v¥ötf
 
	`__GMP_PROTO
 ((
ob°ack
 *, 
__gmp_c⁄°
 *, 
va_li°
));

620 
	#gmp_¥ötf
 
__gmp_¥ötf


	)

621 
__GMP_DECLSPEC
 
gmp_¥ötf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, ...));

623 
	#gmp_¢¥ötf
 
__gmp_¢¥ötf


	)

624 
__GMP_DECLSPEC
 
gmp_¢¥ötf
 
	`__GMP_PROTO
 ((*, 
size_t
, 
__gmp_c⁄°
 *, ...));

626 
	#gmp_•rötf
 
__gmp_•rötf


	)

627 
__GMP_DECLSPEC
 
gmp_•rötf
 
	`__GMP_PROTO
 ((*, 
__gmp_c⁄°
 *, ...));

629 
	#gmp_va•rötf
 
__gmp_va•rötf


	)

630 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

631 
__GMP_DECLSPEC
 
gmp_va•rötf
 
	`__GMP_PROTO
 ((**, 
__gmp_c⁄°
 *, 
va_li°
));

634 
	#gmp_vÂrötf
 
__gmp_vÂrötf


	)

635 #i‡
	`deföed
 (
_GMP_H_HAVE_FILE
Ë&& deföed (
_GMP_H_HAVE_VA_LIST
)

636 
__GMP_DECLSPEC
 
gmp_vÂrötf
 
	`__GMP_PROTO
 ((
FILE
 *, 
__gmp_c⁄°
 *, 
va_li°
));

639 
	#gmp_v¥ötf
 
__gmp_v¥ötf


	)

640 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

641 
__GMP_DECLSPEC
 
gmp_v¥ötf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, 
va_li°
));

644 
	#gmp_v¢¥ötf
 
__gmp_v¢¥ötf


	)

645 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

646 
__GMP_DECLSPEC
 
gmp_v¢¥ötf
 
	`__GMP_PROTO
 ((*, 
size_t
, 
__gmp_c⁄°
 *, 
va_li°
));

649 
	#gmp_v•rötf
 
__gmp_v•rötf


	)

650 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

651 
__GMP_DECLSPEC
 
gmp_v•rötf
 
	`__GMP_PROTO
 ((*, 
__gmp_c⁄°
 *, 
va_li°
));

657 
	#gmp_fsˇnf
 
__gmp_fsˇnf


	)

658 #ifde‡
_GMP_H_HAVE_FILE


659 
__GMP_DECLSPEC
 
gmp_fsˇnf
 
	`__GMP_PROTO
 ((
FILE
 *, 
__gmp_c⁄°
 *, ...));

662 
	#gmp_sˇnf
 
__gmp_sˇnf


	)

663 
__GMP_DECLSPEC
 
gmp_sˇnf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, ...));

665 
	#gmp_ssˇnf
 
__gmp_ssˇnf


	)

666 
__GMP_DECLSPEC
 
gmp_ssˇnf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, __gmp_const *, ...));

668 
	#gmp_vfsˇnf
 
__gmp_vfsˇnf


	)

669 #i‡
	`deföed
 (
_GMP_H_HAVE_FILE
Ë&& deföed (
_GMP_H_HAVE_VA_LIST
)

670 
__GMP_DECLSPEC
 
gmp_vfsˇnf
 
	`__GMP_PROTO
 ((
FILE
 *, 
__gmp_c⁄°
 *, 
va_li°
));

673 
	#gmp_vsˇnf
 
__gmp_vsˇnf


	)

674 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

675 
__GMP_DECLSPEC
 
gmp_vsˇnf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, 
va_li°
));

678 
	#gmp_vssˇnf
 
__gmp_vssˇnf


	)

679 #i‡
	`deföed
 (
_GMP_H_HAVE_VA_LIST
)

680 
__GMP_DECLSPEC
 
gmp_vssˇnf
 
	`__GMP_PROTO
 ((
__gmp_c⁄°
 *, __gmp_c⁄° *, 
va_li°
));

686 
	#_mpz_ªÆloc
 
__gmpz_ªÆloc


	)

687 
	#mpz_ªÆloc
 
__gmpz_ªÆloc


	)

688 
__GMP_DECLSPEC
 *
_mpz_ªÆloc
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mp_size_t
));

690 
	#mpz_abs
 
__gmpz_abs


	)

691 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_abs
)

692 
__GMP_DECLSPEC
 
mpz_abs
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

695 
	#mpz_add
 
__gmpz_add


	)

696 
__GMP_DECLSPEC
 
mpz_add
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

698 
	#mpz_add_ui
 
__gmpz_add_ui


	)

699 
__GMP_DECLSPEC
 
mpz_add_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

701 
	#mpz_addmul
 
__gmpz_addmul


	)

702 
__GMP_DECLSPEC
 
mpz_addmul
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

704 
	#mpz_addmul_ui
 
__gmpz_addmul_ui


	)

705 
__GMP_DECLSPEC
 
mpz_addmul_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

707 
	#mpz_™d
 
__gmpz_™d


	)

708 
__GMP_DECLSPEC
 
mpz_™d
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

710 
	#mpz_¨øy_öô
 
__gmpz_¨øy_öô


	)

711 
__GMP_DECLSPEC
 
mpz_¨øy_öô
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mp_size_t
, mp_size_t));

713 
	#mpz_bö_ui
 
__gmpz_bö_ui


	)

714 
__GMP_DECLSPEC
 
mpz_bö_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

716 
	#mpz_bö_uiui
 
__gmpz_bö_uiui


	)

717 
__GMP_DECLSPEC
 
mpz_bö_uiui
 
	`__GMP_PROTO
 ((
mpz_±r
, , ));

719 
	#mpz_cdiv_q
 
__gmpz_cdiv_q


	)

720 
__GMP_DECLSPEC
 
mpz_cdiv_q
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

722 
	#mpz_cdiv_q_2exp
 
__gmpz_cdiv_q_2exp


	)

723 
__GMP_DECLSPEC
 
mpz_cdiv_q_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

725 
	#mpz_cdiv_q_ui
 
__gmpz_cdiv_q_ui


	)

726 
__GMP_DECLSPEC
 
mpz_cdiv_q_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

728 
	#mpz_cdiv_qr
 
__gmpz_cdiv_qr


	)

729 
__GMP_DECLSPEC
 
mpz_cdiv_qr
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, mpz_srcptr));

731 
	#mpz_cdiv_qr_ui
 
__gmpz_cdiv_qr_ui


	)

732 
__GMP_DECLSPEC
 
mpz_cdiv_qr_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, ));

734 
	#mpz_cdiv_r
 
__gmpz_cdiv_r


	)

735 
__GMP_DECLSPEC
 
mpz_cdiv_r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

737 
	#mpz_cdiv_r_2exp
 
__gmpz_cdiv_r_2exp


	)

738 
__GMP_DECLSPEC
 
mpz_cdiv_r_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

740 
	#mpz_cdiv_r_ui
 
__gmpz_cdiv_r_ui


	)

741 
__GMP_DECLSPEC
 
mpz_cdiv_r_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

743 
	#mpz_cdiv_ui
 
__gmpz_cdiv_ui


	)

744 
__GMP_DECLSPEC
 
mpz_cdiv_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

746 
	#mpz_˛ór
 
__gmpz_˛ór


	)

747 
__GMP_DECLSPEC
 
mpz_˛ór
 
	`__GMP_PROTO
 ((
mpz_±r
));

749 
	#mpz_˛rbô
 
__gmpz_˛rbô


	)

750 
__GMP_DECLSPEC
 
mpz_˛rbô
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

752 
	#mpz_cmp
 
__gmpz_cmp


	)

753 
__GMP_DECLSPEC
 
mpz_cmp
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

755 
	#mpz_cmp_d
 
__gmpz_cmp_d


	)

756 
__GMP_DECLSPEC
 
mpz_cmp_d
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

758 
	#_mpz_cmp_si
 
__gmpz_cmp_si


	)

759 
__GMP_DECLSPEC
 
_mpz_cmp_si
 
	`__GMP_PROTO
 ((
mpz_§˝å
, sig√d )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

761 
	#_mpz_cmp_ui
 
__gmpz_cmp_ui


	)

762 
__GMP_DECLSPEC
 
_mpz_cmp_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

764 
	#mpz_cm∑bs
 
__gmpz_cm∑bs


	)

765 
__GMP_DECLSPEC
 
mpz_cm∑bs
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

767 
	#mpz_cm∑bs_d
 
__gmpz_cm∑bs_d


	)

768 
__GMP_DECLSPEC
 
mpz_cm∑bs_d
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

770 
	#mpz_cm∑bs_ui
 
__gmpz_cm∑bs_ui


	)

771 
__GMP_DECLSPEC
 
mpz_cm∑bs_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

773 
	#mpz_com
 
__gmpz_com


	)

774 
__GMP_DECLSPEC
 
mpz_com
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

776 
	#mpz_combô
 
__gmpz_combô


	)

777 
__GMP_DECLSPEC
 
mpz_combô
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

779 
	#mpz_c⁄gruít_p
 
__gmpz_c⁄gruít_p


	)

780 
__GMP_DECLSPEC
 
mpz_c⁄gruít_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å, mpz_§˝å)Ë
__GMP_ATTRIBUTE_PURE
;

782 
	#mpz_c⁄gruít_2exp_p
 
__gmpz_c⁄gruít_2exp_p


	)

783 
__GMP_DECLSPEC
 
mpz_c⁄gruít_2exp_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

785 
	#mpz_c⁄gruít_ui_p
 
__gmpz_c⁄gruít_ui_p


	)

786 
__GMP_DECLSPEC
 
mpz_c⁄gruít_ui_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, , )Ë
__GMP_ATTRIBUTE_PURE
;

788 
	#mpz_divexa˘
 
__gmpz_divexa˘


	)

789 
__GMP_DECLSPEC
 
mpz_divexa˘
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

791 
	#mpz_divexa˘_ui
 
__gmpz_divexa˘_ui


	)

792 
__GMP_DECLSPEC
 
mpz_divexa˘_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

794 
	#mpz_divisibÀ_p
 
__gmpz_divisibÀ_p


	)

795 
__GMP_DECLSPEC
 
mpz_divisibÀ_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å)Ë
__GMP_ATTRIBUTE_PURE
;

797 
	#mpz_divisibÀ_ui_p
 
__gmpz_divisibÀ_ui_p


	)

798 
__GMP_DECLSPEC
 
mpz_divisibÀ_ui_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

800 
	#mpz_divisibÀ_2exp_p
 
__gmpz_divisibÀ_2exp_p


	)

801 
__GMP_DECLSPEC
 
mpz_divisibÀ_2exp_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

803 
	#mpz_dump
 
__gmpz_dump


	)

804 
__GMP_DECLSPEC
 
mpz_dump
 
	`__GMP_PROTO
 ((
mpz_§˝å
));

806 
	#mpz_exp‹t
 
__gmpz_exp‹t


	)

807 
__GMP_DECLSPEC
 *
mpz_exp‹t
 
	`__GMP_PROTO
 ((*, 
size_t
 *, , size_t, , size_t, 
mpz_§˝å
));

809 
	#mpz_Ác_ui
 
__gmpz_Ác_ui


	)

810 
__GMP_DECLSPEC
 
mpz_Ác_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

812 
	#mpz_fdiv_q
 
__gmpz_fdiv_q


	)

813 
__GMP_DECLSPEC
 
mpz_fdiv_q
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

815 
	#mpz_fdiv_q_2exp
 
__gmpz_fdiv_q_2exp


	)

816 
__GMP_DECLSPEC
 
mpz_fdiv_q_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

818 
	#mpz_fdiv_q_ui
 
__gmpz_fdiv_q_ui


	)

819 
__GMP_DECLSPEC
 
mpz_fdiv_q_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

821 
	#mpz_fdiv_qr
 
__gmpz_fdiv_qr


	)

822 
__GMP_DECLSPEC
 
mpz_fdiv_qr
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, mpz_srcptr));

824 
	#mpz_fdiv_qr_ui
 
__gmpz_fdiv_qr_ui


	)

825 
__GMP_DECLSPEC
 
mpz_fdiv_qr_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, ));

827 
	#mpz_fdiv_r
 
__gmpz_fdiv_r


	)

828 
__GMP_DECLSPEC
 
mpz_fdiv_r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

830 
	#mpz_fdiv_r_2exp
 
__gmpz_fdiv_r_2exp


	)

831 
__GMP_DECLSPEC
 
mpz_fdiv_r_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

833 
	#mpz_fdiv_r_ui
 
__gmpz_fdiv_r_ui


	)

834 
__GMP_DECLSPEC
 
mpz_fdiv_r_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

836 
	#mpz_fdiv_ui
 
__gmpz_fdiv_ui


	)

837 
__GMP_DECLSPEC
 
mpz_fdiv_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

839 
	#mpz_fib_ui
 
__gmpz_fib_ui


	)

840 
__GMP_DECLSPEC
 
mpz_fib_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

842 
	#mpz_fib2_ui
 
__gmpz_fib2_ui


	)

843 
__GMP_DECLSPEC
 
mpz_fib2_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_ptr, ));

845 
	#mpz_fôs_söt_p
 
__gmpz_fôs_söt_p


	)

846 
__GMP_DECLSPEC
 
mpz_fôs_söt_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

848 
	#mpz_fôs_¶⁄g_p
 
__gmpz_fôs_¶⁄g_p


	)

849 
__GMP_DECLSPEC
 
mpz_fôs_¶⁄g_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

851 
	#mpz_fôs_ssh‹t_p
 
__gmpz_fôs_ssh‹t_p


	)

852 
__GMP_DECLSPEC
 
mpz_fôs_ssh‹t_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

854 
	#mpz_fôs_uöt_p
 
__gmpz_fôs_uöt_p


	)

855 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_fôs_uöt_p
)

856 
__GMP_DECLSPEC
 
mpz_fôs_uöt_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

859 
	#mpz_fôs_ul⁄g_p
 
__gmpz_fôs_ul⁄g_p


	)

860 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_fôs_ul⁄g_p
)

861 
__GMP_DECLSPEC
 
mpz_fôs_ul⁄g_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

864 
	#mpz_fôs_ush‹t_p
 
__gmpz_fôs_ush‹t_p


	)

865 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_fôs_ush‹t_p
)

866 
__GMP_DECLSPEC
 
mpz_fôs_ush‹t_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

869 
	#mpz_gcd
 
__gmpz_gcd


	)

870 
__GMP_DECLSPEC
 
mpz_gcd
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

872 
	#mpz_gcd_ui
 
__gmpz_gcd_ui


	)

873 
__GMP_DECLSPEC
 
mpz_gcd_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

875 
	#mpz_gcdext
 
__gmpz_gcdext


	)

876 
__GMP_DECLSPEC
 
mpz_gcdext
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, mpz_±r, 
mpz_§˝å
, mpz_srcptr));

878 
	#mpz_gë_d
 
__gmpz_gë_d


	)

879 
__GMP_DECLSPEC
 
mpz_gë_d
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

881 
	#mpz_gë_d_2exp
 
__gmpz_gë_d_2exp


	)

882 
__GMP_DECLSPEC
 
mpz_gë_d_2exp
 
	`__GMP_PROTO
 ((sig√d *, 
mpz_§˝å
));

884 
	#mpz_gë_si
 
__gmpz_gë_si


	)

885 
__GMP_DECLSPEC
 
mpz_gë_si
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

887 
	#mpz_gë_°r
 
__gmpz_gë_°r


	)

888 
__GMP_DECLSPEC
 *
mpz_gë_°r
 
	`__GMP_PROTO
 ((*, , 
mpz_§˝å
));

890 
	#mpz_gë_ui
 
__gmpz_gë_ui


	)

891 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_gë_ui
)

892 
__GMP_DECLSPEC
 
mpz_gë_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

895 
	#mpz_gëlimbn
 
__gmpz_gëlimbn


	)

896 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_gëlimbn
)

897 
__GMP_DECLSPEC
 
mp_limb_t
 
mpz_gëlimbn
 
	`__GMP_PROTO
 ((
mpz_§˝å
, 
mp_size_t
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

900 
	#mpz_hamdi°
 
__gmpz_hamdi°


	)

901 
__GMP_DECLSPEC
 
mpz_hamdi°
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

903 
	#mpz_imp‹t
 
__gmpz_imp‹t


	)

904 
__GMP_DECLSPEC
 
mpz_imp‹t
 
	`__GMP_PROTO
 ((
mpz_±r
, 
size_t
, , size_t, , size_t, 
__gmp_c⁄°
 *));

906 
	#mpz_öô
 
__gmpz_öô


	)

907 
__GMP_DECLSPEC
 
mpz_öô
 
	`__GMP_PROTO
 ((
mpz_±r
));

909 
	#mpz_öô2
 
__gmpz_öô2


	)

910 
__GMP_DECLSPEC
 
mpz_öô2
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

912 
	#mpz_öô_£t
 
__gmpz_öô_£t


	)

913 
__GMP_DECLSPEC
 
mpz_öô_£t
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

915 
	#mpz_öô_£t_d
 
__gmpz_öô_£t_d


	)

916 
__GMP_DECLSPEC
 
mpz_öô_£t_d
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

918 
	#mpz_öô_£t_si
 
__gmpz_öô_£t_si


	)

919 
__GMP_DECLSPEC
 
mpz_öô_£t_si
 
	`__GMP_PROTO
 ((
mpz_±r
, signed ));

921 
	#mpz_öô_£t_°r
 
__gmpz_öô_£t_°r


	)

922 
__GMP_DECLSPEC
 
mpz_öô_£t_°r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
__gmp_c⁄°
 *, ));

924 
	#mpz_öô_£t_ui
 
__gmpz_öô_£t_ui


	)

925 
__GMP_DECLSPEC
 
mpz_öô_£t_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

927 
	#mpz_öp_øw
 
__gmpz_öp_øw


	)

928 #ifde‡
_GMP_H_HAVE_FILE


929 
__GMP_DECLSPEC
 
size_t
 
mpz_öp_øw
 
	`__GMP_PROTO
 ((
mpz_±r
, 
FILE
 *));

932 
	#mpz_öp_°r
 
__gmpz_öp_°r


	)

933 #ifde‡
_GMP_H_HAVE_FILE


934 
__GMP_DECLSPEC
 
size_t
 
mpz_öp_°r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
FILE
 *, ));

937 
	#mpz_övît
 
__gmpz_övît


	)

938 
__GMP_DECLSPEC
 
mpz_övît
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

940 
	#mpz_i‹
 
__gmpz_i‹


	)

941 
__GMP_DECLSPEC
 
mpz_i‹
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

943 
	#mpz_jacobi
 
__gmpz_jacobi


	)

944 
__GMP_DECLSPEC
 
mpz_jacobi
 
	`__GMP_PROTO
 ((
mpz_§˝å
, mpz_§˝å)Ë
__GMP_ATTRIBUTE_PURE
;

946 
	#mpz_kr⁄eckî
 
mpz_jacobi


	)

948 
	#mpz_kr⁄eckî_si
 
__gmpz_kr⁄eckî_si


	)

949 
__GMP_DECLSPEC
 
mpz_kr⁄eckî_si
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

951 
	#mpz_kr⁄eckî_ui
 
__gmpz_kr⁄eckî_ui


	)

952 
__GMP_DECLSPEC
 
mpz_kr⁄eckî_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

954 
	#mpz_si_kr⁄eckî
 
__gmpz_si_kr⁄eckî


	)

955 
__GMP_DECLSPEC
 
mpz_si_kr⁄eckî
 
	`__GMP_PROTO
 ((, 
mpz_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

957 
	#mpz_ui_kr⁄eckî
 
__gmpz_ui_kr⁄eckî


	)

958 
__GMP_DECLSPEC
 
mpz_ui_kr⁄eckî
 
	`__GMP_PROTO
 ((, 
mpz_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

960 
	#mpz_lcm
 
__gmpz_lcm


	)

961 
__GMP_DECLSPEC
 
mpz_lcm
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

963 
	#mpz_lcm_ui
 
__gmpz_lcm_ui


	)

964 
__GMP_DECLSPEC
 
mpz_lcm_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

966 
	#mpz_Àgídª
 
mpz_jacobi


	)

968 
	#mpz_lu˙um_ui
 
__gmpz_lu˙um_ui


	)

969 
__GMP_DECLSPEC
 
mpz_lu˙um_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

971 
	#mpz_lu˙um2_ui
 
__gmpz_lu˙um2_ui


	)

972 
__GMP_DECLSPEC
 
mpz_lu˙um2_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_ptr, ));

974 
	#mpz_mûÀºabö
 
__gmpz_mûÀºabö


	)

975 
__GMP_DECLSPEC
 
mpz_mûÀºabö
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

977 
	#mpz_mod
 
__gmpz_mod


	)

978 
__GMP_DECLSPEC
 
mpz_mod
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

980 
	#mpz_mod_ui
 
mpz_fdiv_r_ui


	)

982 
	#mpz_mul
 
__gmpz_mul


	)

983 
__GMP_DECLSPEC
 
mpz_mul
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

985 
	#mpz_mul_2exp
 
__gmpz_mul_2exp


	)

986 
__GMP_DECLSPEC
 
mpz_mul_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

988 
	#mpz_mul_si
 
__gmpz_mul_si


	)

989 
__GMP_DECLSPEC
 
mpz_mul_si
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

991 
	#mpz_mul_ui
 
__gmpz_mul_ui


	)

992 
__GMP_DECLSPEC
 
mpz_mul_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

994 
	#mpz_√g
 
__gmpz_√g


	)

995 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_√g
)

996 
__GMP_DECLSPEC
 
mpz_√g
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

999 
	#mpz_√xçrime
 
__gmpz_√xçrime


	)

1000 
__GMP_DECLSPEC
 
mpz_√xçrime
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

1002 
	#mpz_out_øw
 
__gmpz_out_øw


	)

1003 #ifde‡
_GMP_H_HAVE_FILE


1004 
__GMP_DECLSPEC
 
size_t
 
mpz_out_øw
 
	`__GMP_PROTO
 ((
FILE
 *, 
mpz_§˝å
));

1007 
	#mpz_out_°r
 
__gmpz_out_°r


	)

1008 #ifde‡
_GMP_H_HAVE_FILE


1009 
__GMP_DECLSPEC
 
size_t
 
mpz_out_°r
 
	`__GMP_PROTO
 ((
FILE
 *, , 
mpz_§˝å
));

1012 
	#mpz_≥r„˘_powî_p
 
__gmpz_≥r„˘_powî_p


	)

1013 
__GMP_DECLSPEC
 
mpz_≥r„˘_powî_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

1015 
	#mpz_≥r„˘_squ¨e_p
 
__gmpz_≥r„˘_squ¨e_p


	)

1016 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_≥r„˘_squ¨e_p
)

1017 
__GMP_DECLSPEC
 
mpz_≥r„˘_squ¨e_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

1020 
	#mpz_p›cou¡
 
__gmpz_p›cou¡


	)

1021 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_p›cou¡
)

1022 
__GMP_DECLSPEC
 
mpz_p›cou¡
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1025 
	#mpz_pow_ui
 
__gmpz_pow_ui


	)

1026 
__GMP_DECLSPEC
 
mpz_pow_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1028 
	#mpz_powm
 
__gmpz_powm


	)

1029 
__GMP_DECLSPEC
 
mpz_powm
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr, mpz_srcptr));

1031 
	#mpz_powm_ui
 
__gmpz_powm_ui


	)

1032 
__GMP_DECLSPEC
 
mpz_powm_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, , mpz_srcptr));

1034 
	#mpz_¥obab_¥ime_p
 
__gmpz_¥obab_¥ime_p


	)

1035 
__GMP_DECLSPEC
 
mpz_¥obab_¥ime_p
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

1037 
	#mpz_øndom
 
__gmpz_øndom


	)

1038 
__GMP_DECLSPEC
 
mpz_øndom
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mp_size_t
));

1040 
	#mpz_øndom2
 
__gmpz_øndom2


	)

1041 
__GMP_DECLSPEC
 
mpz_øndom2
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mp_size_t
));

1043 
	#mpz_ªÆloc2
 
__gmpz_ªÆloc2


	)

1044 
__GMP_DECLSPEC
 
mpz_ªÆloc2
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

1046 
	#mpz_ªmove
 
__gmpz_ªmove


	)

1047 
__GMP_DECLSPEC
 
mpz_ªmove
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1049 
	#mpz_roŸ
 
__gmpz_roŸ


	)

1050 
__GMP_DECLSPEC
 
mpz_roŸ
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1052 
	#mpz_roŸªm
 
__gmpz_roŸªm


	)

1053 
__GMP_DECLSPEC
 
mpz_roŸªm
 
	`__GMP_PROTO
 ((
mpz_±r
,mpz_±r, 
mpz_§˝å
, ));

1055 
	#mpz_º™domb
 
__gmpz_º™domb


	)

1056 
__GMP_DECLSPEC
 
mpz_º™domb
 
	`__GMP_PROTO
 ((
mpz_±r
, 
gmp_ønd°©e_t
, ));

1058 
	#mpz_sˇn0
 
__gmpz_sˇn0


	)

1059 
__GMP_DECLSPEC
 
mpz_sˇn0
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1061 
	#mpz_sˇn1
 
__gmpz_sˇn1


	)

1062 
__GMP_DECLSPEC
 
mpz_sˇn1
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1064 
	#mpz_£t
 
__gmpz_£t


	)

1065 
__GMP_DECLSPEC
 
mpz_£t
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

1067 
	#mpz_£t_d
 
__gmpz_£t_d


	)

1068 
__GMP_DECLSPEC
 
mpz_£t_d
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

1070 
	#mpz_£t_f
 
__gmpz_£t_f


	)

1071 
__GMP_DECLSPEC
 
mpz_£t_f
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpf_§˝å
));

1073 
	#mpz_£t_q
 
__gmpz_£t_q


	)

1074 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_£t_q
)

1075 
__GMP_DECLSPEC
 
mpz_£t_q
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpq_§˝å
));

1078 
	#mpz_£t_si
 
__gmpz_£t_si


	)

1079 
__GMP_DECLSPEC
 
mpz_£t_si
 
	`__GMP_PROTO
 ((
mpz_±r
, signed ));

1081 
	#mpz_£t_°r
 
__gmpz_£t_°r


	)

1082 
__GMP_DECLSPEC
 
mpz_£t_°r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
__gmp_c⁄°
 *, ));

1084 
	#mpz_£t_ui
 
__gmpz_£t_ui


	)

1085 
__GMP_DECLSPEC
 
mpz_£t_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

1087 
	#mpz_£tbô
 
__gmpz_£tbô


	)

1088 
__GMP_DECLSPEC
 
mpz_£tbô
 
	`__GMP_PROTO
 ((
mpz_±r
, ));

1090 
	#mpz_size
 
__gmpz_size


	)

1091 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpz_size
)

1092 
__GMP_DECLSPEC
 
size_t
 
mpz_size
 
	`__GMP_PROTO
 ((
mpz_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1095 
	#mpz_sizeöba£
 
__gmpz_sizeöba£


	)

1096 
__GMP_DECLSPEC
 
size_t
 
mpz_sizeöba£
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1098 
	#mpz_sqπ
 
__gmpz_sqπ


	)

1099 
__GMP_DECLSPEC
 
mpz_sqπ
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
));

1101 
	#mpz_sqπªm
 
__gmpz_sqπªm


	)

1102 
__GMP_DECLSPEC
 
mpz_sqπªm
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
));

1104 
	#mpz_sub
 
__gmpz_sub


	)

1105 
__GMP_DECLSPEC
 
mpz_sub
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1107 
	#mpz_sub_ui
 
__gmpz_sub_ui


	)

1108 
__GMP_DECLSPEC
 
mpz_sub_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1110 
	#mpz_ui_sub
 
__gmpz_ui_sub


	)

1111 
__GMP_DECLSPEC
 
mpz_ui_sub
 
	`__GMP_PROTO
 ((
mpz_±r
, , 
mpz_§˝å
));

1113 
	#mpz_submul
 
__gmpz_submul


	)

1114 
__GMP_DECLSPEC
 
mpz_submul
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1116 
	#mpz_submul_ui
 
__gmpz_submul_ui


	)

1117 
__GMP_DECLSPEC
 
mpz_submul_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1119 
	#mpz_sw≠
 
__gmpz_sw≠


	)

1120 
__GMP_DECLSPEC
 
mpz_sw≠
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r)Ë
__GMP_NOTHROW
;

1122 
	#mpz_tdiv_ui
 
__gmpz_tdiv_ui


	)

1123 
__GMP_DECLSPEC
 
mpz_tdiv_ui
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

1125 
	#mpz_tdiv_q
 
__gmpz_tdiv_q


	)

1126 
__GMP_DECLSPEC
 
mpz_tdiv_q
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1128 
	#mpz_tdiv_q_2exp
 
__gmpz_tdiv_q_2exp


	)

1129 
__GMP_DECLSPEC
 
mpz_tdiv_q_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1131 
	#mpz_tdiv_q_ui
 
__gmpz_tdiv_q_ui


	)

1132 
__GMP_DECLSPEC
 
mpz_tdiv_q_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1134 
	#mpz_tdiv_qr
 
__gmpz_tdiv_qr


	)

1135 
__GMP_DECLSPEC
 
mpz_tdiv_qr
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, mpz_srcptr));

1137 
	#mpz_tdiv_qr_ui
 
__gmpz_tdiv_qr_ui


	)

1138 
__GMP_DECLSPEC
 
mpz_tdiv_qr_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, mpz_±r, 
mpz_§˝å
, ));

1140 
	#mpz_tdiv_r
 
__gmpz_tdiv_r


	)

1141 
__GMP_DECLSPEC
 
mpz_tdiv_r
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1143 
	#mpz_tdiv_r_2exp
 
__gmpz_tdiv_r_2exp


	)

1144 
__GMP_DECLSPEC
 
mpz_tdiv_r_2exp
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1146 
	#mpz_tdiv_r_ui
 
__gmpz_tdiv_r_ui


	)

1147 
__GMP_DECLSPEC
 
mpz_tdiv_r_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, ));

1149 
	#mpz_t°bô
 
__gmpz_t°bô


	)

1150 
__GMP_DECLSPEC
 
mpz_t°bô
 
	`__GMP_PROTO
 ((
mpz_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1152 
	#mpz_ui_pow_ui
 
__gmpz_ui_pow_ui


	)

1153 
__GMP_DECLSPEC
 
mpz_ui_pow_ui
 
	`__GMP_PROTO
 ((
mpz_±r
, , ));

1155 
	#mpz_uøndomb
 
__gmpz_uøndomb


	)

1156 
__GMP_DECLSPEC
 
mpz_uøndomb
 
	`__GMP_PROTO
 ((
mpz_±r
, 
gmp_ønd°©e_t
, ));

1158 
	#mpz_uøndomm
 
__gmpz_uøndomm


	)

1159 
__GMP_DECLSPEC
 
mpz_uøndomm
 
	`__GMP_PROTO
 ((
mpz_±r
, 
gmp_ønd°©e_t
, 
mpz_§˝å
));

1161 
	#mpz_x‹
 
__gmpz_x‹


	)

1162 
	#mpz_e‹
 
__gmpz_x‹


	)

1163 
__GMP_DECLSPEC
 
mpz_x‹
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpz_§˝å
, mpz_srcptr));

1168 
	#mpq_abs
 
__gmpq_abs


	)

1169 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpq_abs
)

1170 
__GMP_DECLSPEC
 
mpq_abs
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
));

1173 
	#mpq_add
 
__gmpq_add


	)

1174 
__GMP_DECLSPEC
 
mpq_add
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, mpq_srcptr));

1176 
	#mpq_ˇn⁄iˇlize
 
__gmpq_ˇn⁄iˇlize


	)

1177 
__GMP_DECLSPEC
 
mpq_ˇn⁄iˇlize
 
	`__GMP_PROTO
 ((
mpq_±r
));

1179 
	#mpq_˛ór
 
__gmpq_˛ór


	)

1180 
__GMP_DECLSPEC
 
mpq_˛ór
 
	`__GMP_PROTO
 ((
mpq_±r
));

1182 
	#mpq_cmp
 
__gmpq_cmp


	)

1183 
__GMP_DECLSPEC
 
mpq_cmp
 
	`__GMP_PROTO
 ((
mpq_§˝å
, mpq_§˝å)Ë
__GMP_ATTRIBUTE_PURE
;

1185 
	#_mpq_cmp_si
 
__gmpq_cmp_si


	)

1186 
__GMP_DECLSPEC
 
_mpq_cmp_si
 
	`__GMP_PROTO
 ((
mpq_§˝å
, , )Ë
__GMP_ATTRIBUTE_PURE
;

1188 
	#_mpq_cmp_ui
 
__gmpq_cmp_ui


	)

1189 
__GMP_DECLSPEC
 
_mpq_cmp_ui
 
	`__GMP_PROTO
 ((
mpq_§˝å
, , )Ë
__GMP_ATTRIBUTE_PURE
;

1191 
	#mpq_div
 
__gmpq_div


	)

1192 
__GMP_DECLSPEC
 
mpq_div
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, mpq_srcptr));

1194 
	#mpq_div_2exp
 
__gmpq_div_2exp


	)

1195 
__GMP_DECLSPEC
 
mpq_div_2exp
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, ));

1197 
	#mpq_equÆ
 
__gmpq_equÆ


	)

1198 
__GMP_DECLSPEC
 
mpq_equÆ
 
	`__GMP_PROTO
 ((
mpq_§˝å
, mpq_§˝å)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1200 
	#mpq_gë_num
 
__gmpq_gë_num


	)

1201 
__GMP_DECLSPEC
 
mpq_gë_num
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpq_§˝å
));

1203 
	#mpq_gë_dí
 
__gmpq_gë_dí


	)

1204 
__GMP_DECLSPEC
 
mpq_gë_dí
 
	`__GMP_PROTO
 ((
mpz_±r
, 
mpq_§˝å
));

1206 
	#mpq_gë_d
 
__gmpq_gë_d


	)

1207 
__GMP_DECLSPEC
 
mpq_gë_d
 
	`__GMP_PROTO
 ((
mpq_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

1209 
	#mpq_gë_°r
 
__gmpq_gë_°r


	)

1210 
__GMP_DECLSPEC
 *
mpq_gë_°r
 
	`__GMP_PROTO
 ((*, , 
mpq_§˝å
));

1212 
	#mpq_öô
 
__gmpq_öô


	)

1213 
__GMP_DECLSPEC
 
mpq_öô
 
	`__GMP_PROTO
 ((
mpq_±r
));

1215 
	#mpq_öp_°r
 
__gmpq_öp_°r


	)

1216 #ifde‡
_GMP_H_HAVE_FILE


1217 
__GMP_DECLSPEC
 
size_t
 
mpq_öp_°r
 
	`__GMP_PROTO
 ((
mpq_±r
, 
FILE
 *, ));

1220 
	#mpq_öv
 
__gmpq_öv


	)

1221 
__GMP_DECLSPEC
 
mpq_öv
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
));

1223 
	#mpq_mul
 
__gmpq_mul


	)

1224 
__GMP_DECLSPEC
 
mpq_mul
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, mpq_srcptr));

1226 
	#mpq_mul_2exp
 
__gmpq_mul_2exp


	)

1227 
__GMP_DECLSPEC
 
mpq_mul_2exp
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, ));

1229 
	#mpq_√g
 
__gmpq_√g


	)

1230 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_mpq_√g
)

1231 
__GMP_DECLSPEC
 
mpq_√g
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
));

1234 
	#mpq_out_°r
 
__gmpq_out_°r


	)

1235 #ifde‡
_GMP_H_HAVE_FILE


1236 
__GMP_DECLSPEC
 
size_t
 
mpq_out_°r
 
	`__GMP_PROTO
 ((
FILE
 *, , 
mpq_§˝å
));

1239 
	#mpq_£t
 
__gmpq_£t


	)

1240 
__GMP_DECLSPEC
 
mpq_£t
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
));

1242 
	#mpq_£t_d
 
__gmpq_£t_d


	)

1243 
__GMP_DECLSPEC
 
mpq_£t_d
 
	`__GMP_PROTO
 ((
mpq_±r
, ));

1245 
	#mpq_£t_dí
 
__gmpq_£t_dí


	)

1246 
__GMP_DECLSPEC
 
mpq_£t_dí
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpz_§˝å
));

1248 
	#mpq_£t_f
 
__gmpq_£t_f


	)

1249 
__GMP_DECLSPEC
 
mpq_£t_f
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpf_§˝å
));

1251 
	#mpq_£t_num
 
__gmpq_£t_num


	)

1252 
__GMP_DECLSPEC
 
mpq_£t_num
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpz_§˝å
));

1254 
	#mpq_£t_si
 
__gmpq_£t_si


	)

1255 
__GMP_DECLSPEC
 
mpq_£t_si
 
	`__GMP_PROTO
 ((
mpq_±r
, signed , ));

1257 
	#mpq_£t_°r
 
__gmpq_£t_°r


	)

1258 
__GMP_DECLSPEC
 
mpq_£t_°r
 
	`__GMP_PROTO
 ((
mpq_±r
, 
__gmp_c⁄°
 *, ));

1260 
	#mpq_£t_ui
 
__gmpq_£t_ui


	)

1261 
__GMP_DECLSPEC
 
mpq_£t_ui
 
	`__GMP_PROTO
 ((
mpq_±r
, , ));

1263 
	#mpq_£t_z
 
__gmpq_£t_z


	)

1264 
__GMP_DECLSPEC
 
mpq_£t_z
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpz_§˝å
));

1266 
	#mpq_sub
 
__gmpq_sub


	)

1267 
__GMP_DECLSPEC
 
mpq_sub
 
	`__GMP_PROTO
 ((
mpq_±r
, 
mpq_§˝å
, mpq_srcptr));

1269 
	#mpq_sw≠
 
__gmpq_sw≠


	)

1270 
__GMP_DECLSPEC
 
mpq_sw≠
 
	`__GMP_PROTO
 ((
mpq_±r
, mpq_±r)Ë
__GMP_NOTHROW
;

1275 
	#mpf_abs
 
__gmpf_abs


	)

1276 
__GMP_DECLSPEC
 
mpf_abs
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1278 
	#mpf_add
 
__gmpf_add


	)

1279 
__GMP_DECLSPEC
 
mpf_add
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, mpf_srcptr));

1281 
	#mpf_add_ui
 
__gmpf_add_ui


	)

1282 
__GMP_DECLSPEC
 
mpf_add_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1283 
	#mpf_˚û
 
__gmpf_˚û


	)

1284 
__GMP_DECLSPEC
 
mpf_˚û
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1286 
	#mpf_˛ór
 
__gmpf_˛ór


	)

1287 
__GMP_DECLSPEC
 
mpf_˛ór
 
	`__GMP_PROTO
 ((
mpf_±r
));

1289 
	#mpf_cmp
 
__gmpf_cmp


	)

1290 
__GMP_DECLSPEC
 
mpf_cmp
 
	`__GMP_PROTO
 ((
mpf_§˝å
, mpf_§˝å)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1292 
	#mpf_cmp_d
 
__gmpf_cmp_d


	)

1293 
__GMP_DECLSPEC
 
mpf_cmp_d
 
	`__GMP_PROTO
 ((
mpf_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

1295 
	#mpf_cmp_si
 
__gmpf_cmp_si


	)

1296 
__GMP_DECLSPEC
 
mpf_cmp_si
 
	`__GMP_PROTO
 ((
mpf_§˝å
, sig√d )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1298 
	#mpf_cmp_ui
 
__gmpf_cmp_ui


	)

1299 
__GMP_DECLSPEC
 
mpf_cmp_ui
 
	`__GMP_PROTO
 ((
mpf_§˝å
, )Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1301 
	#mpf_div
 
__gmpf_div


	)

1302 
__GMP_DECLSPEC
 
mpf_div
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, mpf_srcptr));

1304 
	#mpf_div_2exp
 
__gmpf_div_2exp


	)

1305 
__GMP_DECLSPEC
 
mpf_div_2exp
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1307 
	#mpf_div_ui
 
__gmpf_div_ui


	)

1308 
__GMP_DECLSPEC
 
mpf_div_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1310 
	#mpf_dump
 
__gmpf_dump


	)

1311 
__GMP_DECLSPEC
 
mpf_dump
 
	`__GMP_PROTO
 ((
mpf_§˝å
));

1313 
	#mpf_eq
 
__gmpf_eq


	)

1314 
__GMP_DECLSPEC
 
mpf_eq
 
	`__GMP_PROTO
 ((
mpf_§˝å
, mpf_§˝å, )Ë
__GMP_ATTRIBUTE_PURE
;

1316 
	#mpf_fôs_söt_p
 
__gmpf_fôs_söt_p


	)

1317 
__GMP_DECLSPEC
 
mpf_fôs_söt_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1319 
	#mpf_fôs_¶⁄g_p
 
__gmpf_fôs_¶⁄g_p


	)

1320 
__GMP_DECLSPEC
 
mpf_fôs_¶⁄g_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1322 
	#mpf_fôs_ssh‹t_p
 
__gmpf_fôs_ssh‹t_p


	)

1323 
__GMP_DECLSPEC
 
mpf_fôs_ssh‹t_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1325 
	#mpf_fôs_uöt_p
 
__gmpf_fôs_uöt_p


	)

1326 
__GMP_DECLSPEC
 
mpf_fôs_uöt_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1328 
	#mpf_fôs_ul⁄g_p
 
__gmpf_fôs_ul⁄g_p


	)

1329 
__GMP_DECLSPEC
 
mpf_fôs_ul⁄g_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1331 
	#mpf_fôs_ush‹t_p
 
__gmpf_fôs_ush‹t_p


	)

1332 
__GMP_DECLSPEC
 
mpf_fôs_ush‹t_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1334 
	#mpf_Êo‹
 
__gmpf_Êo‹


	)

1335 
__GMP_DECLSPEC
 
mpf_Êo‹
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1337 
	#mpf_gë_d
 
__gmpf_gë_d


	)

1338 
__GMP_DECLSPEC
 
mpf_gë_d
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_ATTRIBUTE_PURE
;

1340 
	#mpf_gë_d_2exp
 
__gmpf_gë_d_2exp


	)

1341 
__GMP_DECLSPEC
 
mpf_gë_d_2exp
 
	`__GMP_PROTO
 ((sig√d *, 
mpf_§˝å
));

1343 
	#mpf_gë_deÁu…_¥ec
 
__gmpf_gë_deÁu…_¥ec


	)

1344 
__GMP_DECLSPEC
 
mpf_gë_deÁu…_¥ec
 
	`__GMP_PROTO
 (()Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1346 
	#mpf_gë_¥ec
 
__gmpf_gë_¥ec


	)

1347 
__GMP_DECLSPEC
 
mpf_gë_¥ec
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1349 
	#mpf_gë_si
 
__gmpf_gë_si


	)

1350 
__GMP_DECLSPEC
 
mpf_gë_si
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1352 
	#mpf_gë_°r
 
__gmpf_gë_°r


	)

1353 
__GMP_DECLSPEC
 *
mpf_gë_°r
 
	`__GMP_PROTO
 ((*, 
mp_exp_t
 *, , 
size_t
, 
mpf_§˝å
));

1355 
	#mpf_gë_ui
 
__gmpf_gë_ui


	)

1356 
__GMP_DECLSPEC
 
mpf_gë_ui
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1358 
	#mpf_öô
 
__gmpf_öô


	)

1359 
__GMP_DECLSPEC
 
mpf_öô
 
	`__GMP_PROTO
 ((
mpf_±r
));

1361 
	#mpf_öô2
 
__gmpf_öô2


	)

1362 
__GMP_DECLSPEC
 
mpf_öô2
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1364 
	#mpf_öô_£t
 
__gmpf_öô_£t


	)

1365 
__GMP_DECLSPEC
 
mpf_öô_£t
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1367 
	#mpf_öô_£t_d
 
__gmpf_öô_£t_d


	)

1368 
__GMP_DECLSPEC
 
mpf_öô_£t_d
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1370 
	#mpf_öô_£t_si
 
__gmpf_öô_£t_si


	)

1371 
__GMP_DECLSPEC
 
mpf_öô_£t_si
 
	`__GMP_PROTO
 ((
mpf_±r
, signed ));

1373 
	#mpf_öô_£t_°r
 
__gmpf_öô_£t_°r


	)

1374 
__GMP_DECLSPEC
 
mpf_öô_£t_°r
 
	`__GMP_PROTO
 ((
mpf_±r
, 
__gmp_c⁄°
 *, ));

1376 
	#mpf_öô_£t_ui
 
__gmpf_öô_£t_ui


	)

1377 
__GMP_DECLSPEC
 
mpf_öô_£t_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1379 
	#mpf_öp_°r
 
__gmpf_öp_°r


	)

1380 #ifde‡
_GMP_H_HAVE_FILE


1381 
__GMP_DECLSPEC
 
size_t
 
mpf_öp_°r
 
	`__GMP_PROTO
 ((
mpf_±r
, 
FILE
 *, ));

1384 
	#mpf_öãgî_p
 
__gmpf_öãgî_p


	)

1385 
__GMP_DECLSPEC
 
mpf_öãgî_p
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1387 
	#mpf_mul
 
__gmpf_mul


	)

1388 
__GMP_DECLSPEC
 
mpf_mul
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, mpf_srcptr));

1390 
	#mpf_mul_2exp
 
__gmpf_mul_2exp


	)

1391 
__GMP_DECLSPEC
 
mpf_mul_2exp
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1393 
	#mpf_mul_ui
 
__gmpf_mul_ui


	)

1394 
__GMP_DECLSPEC
 
mpf_mul_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1396 
	#mpf_√g
 
__gmpf_√g


	)

1397 
__GMP_DECLSPEC
 
mpf_√g
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1399 
	#mpf_out_°r
 
__gmpf_out_°r


	)

1400 #ifde‡
_GMP_H_HAVE_FILE


1401 
__GMP_DECLSPEC
 
size_t
 
mpf_out_°r
 
	`__GMP_PROTO
 ((
FILE
 *, , size_t, 
mpf_§˝å
));

1404 
	#mpf_pow_ui
 
__gmpf_pow_ui


	)

1405 
__GMP_DECLSPEC
 
mpf_pow_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1407 
	#mpf_øndom2
 
__gmpf_øndom2


	)

1408 
__GMP_DECLSPEC
 
mpf_øndom2
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mp_size_t
, 
mp_exp_t
));

1410 
	#mpf_ªldiff
 
__gmpf_ªldiff


	)

1411 
__GMP_DECLSPEC
 
mpf_ªldiff
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, mpf_srcptr));

1413 
	#mpf_£t
 
__gmpf_£t


	)

1414 
__GMP_DECLSPEC
 
mpf_£t
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1416 
	#mpf_£t_d
 
__gmpf_£t_d


	)

1417 
__GMP_DECLSPEC
 
mpf_£t_d
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1419 
	#mpf_£t_deÁu…_¥ec
 
__gmpf_£t_deÁu…_¥ec


	)

1420 
__GMP_DECLSPEC
 
mpf_£t_deÁu…_¥ec
 
	`__GMP_PROTO
 (()Ë
__GMP_NOTHROW
;

1422 
	#mpf_£t_¥ec
 
__gmpf_£t_¥ec


	)

1423 
__GMP_DECLSPEC
 
mpf_£t_¥ec
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1425 
	#mpf_£t_¥ec_øw
 
__gmpf_£t_¥ec_øw


	)

1426 
__GMP_DECLSPEC
 
mpf_£t_¥ec_øw
 
	`__GMP_PROTO
 ((
mpf_±r
, )Ë
__GMP_NOTHROW
;

1428 
	#mpf_£t_q
 
__gmpf_£t_q


	)

1429 
__GMP_DECLSPEC
 
mpf_£t_q
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpq_§˝å
));

1431 
	#mpf_£t_si
 
__gmpf_£t_si


	)

1432 
__GMP_DECLSPEC
 
mpf_£t_si
 
	`__GMP_PROTO
 ((
mpf_±r
, signed ));

1434 
	#mpf_£t_°r
 
__gmpf_£t_°r


	)

1435 
__GMP_DECLSPEC
 
mpf_£t_°r
 
	`__GMP_PROTO
 ((
mpf_±r
, 
__gmp_c⁄°
 *, ));

1437 
	#mpf_£t_ui
 
__gmpf_£t_ui


	)

1438 
__GMP_DECLSPEC
 
mpf_£t_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1440 
	#mpf_£t_z
 
__gmpf_£t_z


	)

1441 
__GMP_DECLSPEC
 
mpf_£t_z
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpz_§˝å
));

1443 
	#mpf_size
 
__gmpf_size


	)

1444 
__GMP_DECLSPEC
 
size_t
 
mpf_size
 
	`__GMP_PROTO
 ((
mpf_§˝å
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1446 
	#mpf_sqπ
 
__gmpf_sqπ


	)

1447 
__GMP_DECLSPEC
 
mpf_sqπ
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1449 
	#mpf_sqπ_ui
 
__gmpf_sqπ_ui


	)

1450 
__GMP_DECLSPEC
 
mpf_sqπ_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, ));

1452 
	#mpf_sub
 
__gmpf_sub


	)

1453 
__GMP_DECLSPEC
 
mpf_sub
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, mpf_srcptr));

1455 
	#mpf_sub_ui
 
__gmpf_sub_ui


	)

1456 
__GMP_DECLSPEC
 
mpf_sub_ui
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
, ));

1458 
	#mpf_sw≠
 
__gmpf_sw≠


	)

1459 
__GMP_DECLSPEC
 
mpf_sw≠
 
	`__GMP_PROTO
 ((
mpf_±r
, mpf_±r)Ë
__GMP_NOTHROW
;

1461 
	#mpf_åunc
 
__gmpf_åunc


	)

1462 
__GMP_DECLSPEC
 
mpf_åunc
 
	`__GMP_PROTO
 ((
mpf_±r
, 
mpf_§˝å
));

1464 
	#mpf_ui_div
 
__gmpf_ui_div


	)

1465 
__GMP_DECLSPEC
 
mpf_ui_div
 
	`__GMP_PROTO
 ((
mpf_±r
, , 
mpf_§˝å
));

1467 
	#mpf_ui_sub
 
__gmpf_ui_sub


	)

1468 
__GMP_DECLSPEC
 
mpf_ui_sub
 
	`__GMP_PROTO
 ((
mpf_±r
, , 
mpf_§˝å
));

1470 
	#mpf_uøndomb
 
__gmpf_uøndomb


	)

1471 
__GMP_DECLSPEC
 
mpf_uøndomb
 
	`__GMP_PROTO
 ((
mpf_t
, 
gmp_ønd°©e_t
, ));

1478 
	#m≤_add
 
	`__MPN
(
add
)

	)

1479 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_add
)

1480 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_add
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_srcptr,mp_size_t));

1483 
	#m≤_add_1
 
	`__MPN
(
add_1
)

	)

1484 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_add_1
)

1485 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_add_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t)Ë
__GMP_NOTHROW
;

1488 
	#m≤_add_n
 
	`__MPN
(
add_n
)

	)

1489 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_add_n
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, mp_§˝å, 
mp_size_t
));

1491 
	#m≤_addmul_1
 
	`__MPN
(
addmul_1
)

	)

1492 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_addmul_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t));

1494 
	#m≤_bdivmod
 
	`__MPN
(
bdivmod
)

	)

1495 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_bdivmod
 
	`__GMP_PROTO
 ((
mp_±r
, mp_±r, 
mp_size_t
, 
mp_§˝å
, mp_size_t, ));

1497 
	#m≤_cmp
 
	`__MPN
(
cmp
)

	)

1498 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_cmp
)

1499 
__GMP_DECLSPEC
 
m≤_cmp
 
	`__GMP_PROTO
 ((
mp_§˝å
, mp_§˝å, 
mp_size_t
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1502 
	#m≤_divexa˘_by3
(
d°
,
§c
,
size
) \

1503 
	`m≤_divexa˘_by3c
 (
d°
, 
§c
, 
size
, 
	`__GMP_CAST
 (
mp_limb_t
, 0))

	)

1505 
	#m≤_divexa˘_by3c
 
	`__MPN
(
divexa˘_by3c
)

	)

1506 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_divexa˘_by3c
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t));

1508 
	#m≤_divmod_1
(
qp
,
≈
,
nsize
,
dlimb
) \

1509 
	`m≤_divªm_1
 (
qp
, 
	`__GMP_CAST
 (
mp_size_t
, 0), 
≈
, 
nsize
, 
dlimb
)

	)

1511 
	#m≤_divªm
 
	`__MPN
(
divªm
)

	)

1512 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_divªm
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_size_t
, mp_±r, mp_size_t, 
mp_§˝å
, mp_size_t));

1514 
	#m≤_divªm_1
 
	`__MPN
(
divªm_1
)

	)

1515 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_divªm_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_size_t
, 
mp_§˝å
, mp_size_t, mp_limb_t));

1517 
	#m≤_divªm_2
 
	`__MPN
(
divªm_2
)

	)

1518 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_divªm_2
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_size_t
, mp_±r, mp_size_t, 
mp_§˝å
));

1520 
	#m≤_gcd
 
	`__MPN
(
gcd
)

	)

1521 
__GMP_DECLSPEC
 
mp_size_t
 
m≤_gcd
 
	`__GMP_PROTO
 ((
mp_±r
, mp_ptr, mp_size_t, mp_ptr, mp_size_t));

1523 
	#m≤_gcd_1
 
	`__MPN
(
gcd_1
)

	)

1524 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_gcd_1
 
	`__GMP_PROTO
 ((
mp_§˝å
, 
mp_size_t
, mp_limb_t)Ë
__GMP_ATTRIBUTE_PURE
;

1526 
	#m≤_gcdext_1
 
	`__MPN
(
gcdext_1
)

	)

1527 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_gcdext_1
 
	`__GMP_PROTO
 ((
mp_limb_sig√d_t
 *, mp_limb_signed_t *, mp_limb_t, mp_limb_t));

1529 
	#m≤_gcdext
 
	`__MPN
(
gcdext
)

	)

1530 
__GMP_DECLSPEC
 
mp_size_t
 
m≤_gcdext
 
	`__GMP_PROTO
 ((
mp_±r
, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t));

1532 
	#m≤_gë_°r
 
	`__MPN
(
gë_°r
)

	)

1533 
__GMP_DECLSPEC
 
size_t
 
m≤_gë_°r
 
	`__GMP_PROTO
 ((*, , 
mp_±r
, 
mp_size_t
));

1535 
	#m≤_hamdi°
 
	`__MPN
(
hamdi°
)

	)

1536 
__GMP_DECLSPEC
 
m≤_hamdi°
 
	`__GMP_PROTO
 ((
mp_§˝å
, mp_§˝å, 
mp_size_t
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1538 
	#m≤_lshi·
 
	`__MPN
(
lshi·
)

	)

1539 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_lshi·
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, ));

1541 
	#m≤_mod_1
 
	`__MPN
(
mod_1
)

	)

1542 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_mod_1
 
	`__GMP_PROTO
 ((
mp_§˝å
, 
mp_size_t
, mp_limb_t)Ë
__GMP_ATTRIBUTE_PURE
;

1544 
	#m≤_mul
 
	`__MPN
(
mul
)

	)

1545 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_mul
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_srcptr, mp_size_t));

1547 
	#m≤_mul_1
 
	`__MPN
(
mul_1
)

	)

1548 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_mul_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t));

1550 
	#m≤_mul_n
 
	`__MPN
(
mul_n
)

	)

1551 
__GMP_DECLSPEC
 
m≤_mul_n
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, mp_§˝å, 
mp_size_t
));

1553 
	#m≤_sqr
 
	`__MPN
(
sqr
)

	)

1554 
__GMP_DECLSPEC
 
m≤_sqr
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
));

1556 
	#m≤_√g_n
 
	`__MPN
(
√g_n
)

	)

1557 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_√g_n
)

1558 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_√g_n
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
));

1561 
	#m≤_≥r„˘_squ¨e_p
 
	`__MPN
(
≥r„˘_squ¨e_p
)

	)

1562 
__GMP_DECLSPEC
 
m≤_≥r„˘_squ¨e_p
 
	`__GMP_PROTO
 ((
mp_§˝å
, 
mp_size_t
)Ë
__GMP_ATTRIBUTE_PURE
;

1564 
	#m≤_p›cou¡
 
	`__MPN
(
p›cou¡
)

	)

1565 
__GMP_DECLSPEC
 
m≤_p›cou¡
 
	`__GMP_PROTO
 ((
mp_§˝å
, 
mp_size_t
)Ë
__GMP_NOTHROW
 
__GMP_ATTRIBUTE_PURE
;

1567 
	#m≤_pow_1
 
	`__MPN
(
pow_1
)

	)

1568 
__GMP_DECLSPEC
 
mp_size_t
 
m≤_pow_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, mp_size_t, 
mp_limb_t
, mp_ptr));

1571 
	#m≤_¥eöv_mod_1
 
	`__MPN
(
¥eöv_mod_1
)

	)

1572 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_¥eöv_mod_1
 
	`__GMP_PROTO
 ((
mp_§˝å
, 
mp_size_t
, mp_limb_t, mp_limb_t)Ë
__GMP_ATTRIBUTE_PURE
;

1574 
	#m≤_øndom
 
	`__MPN
(
øndom
)

	)

1575 
__GMP_DECLSPEC
 
m≤_øndom
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_size_t
));

1577 
	#m≤_øndom2
 
	`__MPN
(
øndom2
)

	)

1578 
__GMP_DECLSPEC
 
m≤_øndom2
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_size_t
));

1580 
	#m≤_rshi·
 
	`__MPN
(
rshi·
)

	)

1581 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_rshi·
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, ));

1583 
	#m≤_sˇn0
 
	`__MPN
(
sˇn0
)

	)

1584 
__GMP_DECLSPEC
 
m≤_sˇn0
 
	`__GMP_PROTO
 ((
mp_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

1586 
	#m≤_sˇn1
 
	`__MPN
(
sˇn1
)

	)

1587 
__GMP_DECLSPEC
 
m≤_sˇn1
 
	`__GMP_PROTO
 ((
mp_§˝å
, )Ë
__GMP_ATTRIBUTE_PURE
;

1589 
	#m≤_£t_°r
 
	`__MPN
(
£t_°r
)

	)

1590 
__GMP_DECLSPEC
 
mp_size_t
 
m≤_£t_°r
 
	`__GMP_PROTO
 ((
mp_±r
, 
__gmp_c⁄°
 *, 
size_t
, ));

1592 
	#m≤_sqπªm
 
	`__MPN
(
sqπªm
)

	)

1593 
__GMP_DECLSPEC
 
mp_size_t
 
m≤_sqπªm
 
	`__GMP_PROTO
 ((
mp_±r
, mp_±r, 
mp_§˝å
, mp_size_t));

1595 
	#m≤_sub
 
	`__MPN
(
sub
)

	)

1596 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_sub
)

1597 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_sub
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_srcptr,mp_size_t));

1600 
	#m≤_sub_1
 
	`__MPN
(
sub_1
)

	)

1601 #i‡
__GMP_INLINE_PROTOTYPES
 || 
	`deföed
 (
__GMP_FORCE_m≤_sub_1
)

1602 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_sub_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t)Ë
__GMP_NOTHROW
;

1605 
	#m≤_sub_n
 
	`__MPN
(
sub_n
)

	)

1606 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_sub_n
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, mp_§˝å, 
mp_size_t
));

1608 
	#m≤_submul_1
 
	`__MPN
(
submul_1
)

	)

1609 
__GMP_DECLSPEC
 
mp_limb_t
 
m≤_submul_1
 
	`__GMP_PROTO
 ((
mp_±r
, 
mp_§˝å
, 
mp_size_t
, mp_limb_t));

1611 
	#m≤_tdiv_qr
 
	`__MPN
(
tdiv_qr
)

	)

1612 
__GMP_DECLSPEC
 
m≤_tdiv_qr
 
	`__GMP_PROTO
 ((
mp_±r
, mp_±r, 
mp_size_t
, 
mp_§˝å
, mp_size_t, mp_srcptr, mp_size_t));

1631 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë&& ! deföed (
__GMP_FORCE_mpz_abs
)

1632 
__GMP_EXTERN_INLINE
 

1633 
	`mpz_abs
 (
mpz_±r
 
__gmp_w
, 
mpz_§˝å
 
__gmp_u
)

1635 i‡(
__gmp_w
 !
__gmp_u
)

1636 
	`mpz_£t
 (
__gmp_w
, 
__gmp_u
);

1637 
__gmp_w
->
_mp_size
 = 
	`__GMP_ABS
 (__gmp_w->_mp_size);

1641 #i‡
GMP_NAIL_BITS
 == 0

1642 
	#__GMPZ_FITS_UTYPE_P
(
z
,
maxvÆ
) \

1643 
mp_size_t
 
__gmp_n
 = 
z
->
_mp_size
; \

1644 
mp_±r
 
__gmp_p
 = 
z
->
_mp_d
; \

1645  (
__gmp_n
 =0 || (__gmp_¿=1 && 
__gmp_p
[0] <
maxvÆ
));

	)

1647 
	#__GMPZ_FITS_UTYPE_P
(
z
,
maxvÆ
) \

1648 
mp_size_t
 
__gmp_n
 = 
z
->
_mp_size
; \

1649 
mp_±r
 
__gmp_p
 = 
z
->
_mp_d
; \

1650  (
__gmp_n
 =0 || (__gmp_¿=1 && 
__gmp_p
[0] <
maxvÆ
) \

1651 || (
__gmp_n
 =2 && 
__gmp_p
[1] <((
mp_limb_t
Ë
maxvÆ
 >> 
GMP_NUMB_BITS
)));

	)

1654 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_fôs_uöt_p
)

1655 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_fôs_uöt_p
)

1656 
__GMP_EXTERN_INLINE


1659 
	`mpz_fôs_uöt_p
 (
mpz_§˝å
 
__gmp_z
Ë
__GMP_NOTHROW


1661 
	`__GMPZ_FITS_UTYPE_P
 (
__gmp_z
, 
__GMP_UINT_MAX
);

1665 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_fôs_ul⁄g_p
)

1666 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_fôs_ul⁄g_p
)

1667 
__GMP_EXTERN_INLINE


1670 
	`mpz_fôs_ul⁄g_p
 (
mpz_§˝å
 
__gmp_z
Ë
__GMP_NOTHROW


1672 
	`__GMPZ_FITS_UTYPE_P
 (
__gmp_z
, 
__GMP_ULONG_MAX
);

1676 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_fôs_ush‹t_p
)

1677 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_fôs_ush‹t_p
)

1678 
__GMP_EXTERN_INLINE


1681 
	`mpz_fôs_ush‹t_p
 (
mpz_§˝å
 
__gmp_z
Ë
__GMP_NOTHROW


1683 
	`__GMPZ_FITS_UTYPE_P
 (
__gmp_z
, 
__GMP_USHRT_MAX
);

1687 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_gë_ui
)

1688 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_gë_ui
)

1689 
__GMP_EXTERN_INLINE


1692 
	`mpz_gë_ui
 (
mpz_§˝å
 
__gmp_z
Ë
__GMP_NOTHROW


1694 
mp_±r
 
__gmp_p
 = 
__gmp_z
->
_mp_d
;

1695 
mp_size_t
 
__gmp_n
 = 
__gmp_z
->
_mp_size
;

1696 
mp_limb_t
 
__gmp_l
 = 
__gmp_p
[0];

1701 #i‡
GMP_NAIL_BITS
 =0 || 
	`deföed
 (
_LONG_LONG_LIMB
)

1703  (
__gmp_n
 !0 ? 
__gmp_l
 : 0);

1706 
__gmp_n
 = 
	`__GMP_ABS
 (__gmp_n);

1707 i‡(
__gmp_n
 <= 1)

1708  (
__gmp_n
 !0 ? 
__gmp_l
 : 0);

1710  
__gmp_l
 + (
__gmp_p
[1] << 
GMP_NUMB_BITS
);

1715 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_gëlimbn
)

1716 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_gëlimbn
)

1717 
__GMP_EXTERN_INLINE


1719 
mp_limb_t


1720 
	`mpz_gëlimbn
 (
mpz_§˝å
 
__gmp_z
, 
mp_size_t
 
__gmp_n
Ë
__GMP_NOTHROW


1722 
mp_limb_t
 
__gmp_ªsu…
 = 0;

1723 i‡(
	`__GMP_LIKELY
 (
__gmp_n
 >0 && __gmp_¿< 
	`__GMP_ABS
 (
__gmp_z
->
_mp_size
)))

1724 
__gmp_ªsu…
 = 
__gmp_z
->
_mp_d
[
__gmp_n
];

1725  
__gmp_ªsu…
;

1729 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë&& ! deföed (
__GMP_FORCE_mpz_√g
)

1730 
__GMP_EXTERN_INLINE
 

1731 
	`mpz_√g
 (
mpz_±r
 
__gmp_w
, 
mpz_§˝å
 
__gmp_u
)

1733 i‡(
__gmp_w
 !
__gmp_u
)

1734 
	`mpz_£t
 (
__gmp_w
, 
__gmp_u
);

1735 
__gmp_w
->
_mp_size
 = - __gmp_w->_mp_size;

1739 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_≥r„˘_squ¨e_p
)

1740 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_≥r„˘_squ¨e_p
)

1741 
__GMP_EXTERN_INLINE


1744 
	`mpz_≥r„˘_squ¨e_p
 (
mpz_§˝å
 
__gmp_a
)

1746 
mp_size_t
 
__gmp_asize
;

1747 
__gmp_ªsu…
;

1749 
__gmp_asize
 = 
__gmp_a
->
_mp_size
;

1750 
__gmp_ªsu…
 = (
__gmp_asize
 >= 0);

1751 i‡(
	`__GMP_LIKELY
 (
__gmp_asize
 > 0))

1752 
__gmp_ªsu…
 = 
	`m≤_≥r„˘_squ¨e_p
 (
__gmp_a
->
_mp_d
, 
__gmp_asize
);

1753  
__gmp_ªsu…
;

1757 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_p›cou¡
)

1758 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_p›cou¡
)

1759 
__GMP_EXTERN_INLINE


1762 
	`mpz_p›cou¡
 (
mpz_§˝å
 
__gmp_u
Ë
__GMP_NOTHROW


1764 
mp_size_t
 
__gmp_usize
;

1765 
__gmp_ªsu…
;

1767 
__gmp_usize
 = 
__gmp_u
->
_mp_size
;

1768 
__gmp_ªsu…
 = (
__gmp_usize
 < 0 ? 
__GMP_ULONG_MAX
 : 0);

1769 i‡(
	`__GMP_LIKELY
 (
__gmp_usize
 > 0))

1770 
__gmp_ªsu…
 = 
	`m≤_p›cou¡
 (
__gmp_u
->
_mp_d
, 
__gmp_usize
);

1771  
__gmp_ªsu…
;

1775 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_£t_q
)

1776 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_£t_q
)

1777 
__GMP_EXTERN_INLINE


1780 
	`mpz_£t_q
 (
mpz_±r
 
__gmp_w
, 
mpq_§˝å
 
__gmp_u
)

1782 
	`mpz_tdiv_q
 (
__gmp_w
, 
	`mpq_numªf
 (
__gmp_u
), 
	`mpq_díªf
 (__gmp_u));

1786 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_mpz_size
)

1787 #i‡! 
	`deföed
 (
__GMP_FORCE_mpz_size
)

1788 
__GMP_EXTERN_INLINE


1790 
size_t


1791 
	`mpz_size
 (
mpz_§˝å
 
__gmp_z
Ë
__GMP_NOTHROW


1793  
	`__GMP_ABS
 (
__gmp_z
->
_mp_size
);

1800 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë&& ! deföed (
__GMP_FORCE_mpq_abs
)

1801 
__GMP_EXTERN_INLINE
 

1802 
	`mpq_abs
 (
mpq_±r
 
__gmp_w
, 
mpq_§˝å
 
__gmp_u
)

1804 i‡(
__gmp_w
 !
__gmp_u
)

1805 
	`mpq_£t
 (
__gmp_w
, 
__gmp_u
);

1806 
__gmp_w
->
_mp_num
.
_mp_size
 = 
	`__GMP_ABS
 (__gmp_w->_mp_num._mp_size);

1810 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë&& ! deföed (
__GMP_FORCE_mpq_√g
)

1811 
__GMP_EXTERN_INLINE
 

1812 
	`mpq_√g
 (
mpq_±r
 
__gmp_w
, 
mpq_§˝å
 
__gmp_u
)

1814 i‡(
__gmp_w
 !
__gmp_u
)

1815 
	`mpq_£t
 (
__gmp_w
, 
__gmp_u
);

1816 
__gmp_w
->
_mp_num
.
_mp_size
 = - __gmp_w->_mp_num._mp_size;

1838 
	#__GMPN_AORS
(
cout
, 
wp
, 
xp
, 
xsize
, 
yp
, 
ysize
, 
FUNCTION
, 
TEST
) \

1840 
mp_size_t
 
__gmp_i
; \

1841 
mp_limb_t
 
__gmp_x
; \

1848 
__gmp_i
 = (
ysize
); \

1849 i‡(
__gmp_i
 != 0) \

1851 i‡(
	`FUNCTION
 (
wp
, 
xp
, 
yp
, 
__gmp_i
)) \

1855 i‡(
__gmp_i
 >(
xsize
)) \

1857 (
cout
) = 1; \

1858 
__gmp_d⁄e
; \

1860 
__gmp_x
 = (
xp
)[
__gmp_i
]; \

1862 
TEST
); \

1865 i‡((
wp
Ë!(
xp
)) \

1866 
	`__GMPN_COPY_REST
 (
wp
, 
xp
, 
xsize
, 
__gmp_i
); \

1867 (
cout
) = 0; \

1868 
__gmp_d⁄e
: \

1870 } 0)

	)

1872 
	#__GMPN_ADD
(
cout
, 
wp
, 
xp
, 
xsize
, 
yp
, 
ysize
) \

1873 
	`__GMPN_AORS
 (
cout
, 
wp
, 
xp
, 
xsize
, 
yp
, 
ysize
, 
m≤_add_n
, \

1874 (((
wp
)[
__gmp_i
++] = (
__gmp_x
 + 1Ë& 
GMP_NUMB_MASK
Ë=0))

	)

1875 
	#__GMPN_SUB
(
cout
, 
wp
, 
xp
, 
xsize
, 
yp
, 
ysize
) \

1876 
	`__GMPN_AORS
 (
cout
, 
wp
, 
xp
, 
xsize
, 
yp
, 
ysize
, 
m≤_sub_n
, \

1877 (((
wp
)[
__gmp_i
++] = (
__gmp_x
 - 1Ë& 
GMP_NUMB_MASK
), __gmp_x =0))

	)

1904 #i‡
GMP_NAIL_BITS
 == 0

1905 
	#__GMPN_AORS_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
, 
OP
, 
CB
) \

1907 
mp_size_t
 
__gmp_i
; \

1908 
mp_limb_t
 
__gmp_x
, 
__gmp_r
; \

1913 
__gmp_x
 = (
§c
)[0]; \

1914 
__gmp_r
 = 
__gmp_x
 
	`OP
 (
v
); \

1915 (
d°
)[0] = 
__gmp_r
; \

1916 i‡(
	`CB
 (
__gmp_r
, 
__gmp_x
, (
v
))) \

1918 (
cout
) = 1; \

1919 
__gmp_i
 = 1; __gmp_ò< (
n
);) \

1921 
__gmp_x
 = (
§c
)[
__gmp_i
]; \

1922 
__gmp_r
 = 
__gmp_x
 
OP
 1; \

1923 (
d°
)[
__gmp_i
] = 
__gmp_r
; \

1924 ++
__gmp_i
; \

1925 i‡(!
	`CB
 (
__gmp_r
, 
__gmp_x
, 1)) \

1927 i‡((
§c
Ë!(
d°
)) \

1928 
	`__GMPN_COPY_REST
 (
d°
, 
§c
, 
n
, 
__gmp_i
); \

1929 (
cout
) = 0; \

1936 i‡((
§c
Ë!(
d°
)) \

1937 
	`__GMPN_COPY_REST
 (
d°
, 
§c
, 
n
, 1); \

1938 (
cout
) = 0; \

1940 } 0)

	)

1943 #i‡
GMP_NAIL_BITS
 >= 1

1944 
	#__GMPN_AORS_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
, 
OP
, 
CB
) \

1946 
mp_size_t
 
__gmp_i
; \

1947 
mp_limb_t
 
__gmp_x
, 
__gmp_r
; \

1952 
__gmp_x
 = (
§c
)[0]; \

1953 
__gmp_r
 = 
__gmp_x
 
	`OP
 (
v
); \

1954 (
d°
)[0] = 
__gmp_r
 & 
GMP_NUMB_MASK
; \

1955 i‡(
__gmp_r
 >> 
GMP_NUMB_BITS
 != 0) \

1957 (
cout
) = 1; \

1958 
__gmp_i
 = 1; __gmp_ò< (
n
);) \

1960 
__gmp_x
 = (
§c
)[
__gmp_i
]; \

1961 
__gmp_r
 = 
__gmp_x
 
OP
 1; \

1962 (
d°
)[
__gmp_i
] = 
__gmp_r
 & 
GMP_NUMB_MASK
; \

1963 ++
__gmp_i
; \

1964 i‡(
__gmp_r
 >> 
GMP_NUMB_BITS
 == 0) \

1966 i‡((
§c
Ë!(
d°
)) \

1967 
	`__GMPN_COPY_REST
 (
d°
, 
§c
, 
n
, 
__gmp_i
); \

1968 (
cout
) = 0; \

1975 i‡((
§c
Ë!(
d°
)) \

1976 
	`__GMPN_COPY_REST
 (
d°
, 
§c
, 
n
, 1); \

1977 (
cout
) = 0; \

1979 } 0)

	)

1982 
	#__GMPN_ADDCB
(
r
,
x
,
y
Ë(‘Ë< (y))

	)

1983 
	#__GMPN_SUBCB
(
r
,
x
,
y
Ë((xË< (y))

	)

1985 
	#__GMPN_ADD_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
) \

1986 
	`__GMPN_AORS_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
, +, 
__GMPN_ADDCB
)

	)

1987 
	#__GMPN_SUB_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
) \

1988 
	`__GMPN_AORS_1
(
cout
, 
d°
, 
§c
, 
n
, 
v
, -, 
__GMPN_SUBCB
)

	)

1994 
	#__GMPN_CMP
(
ªsu…
, 
xp
, 
yp
, 
size
) \

1996 
mp_size_t
 
__gmp_i
; \

1997 
mp_limb_t
 
__gmp_x
, 
__gmp_y
; \

2001 (
ªsu…
) = 0; \

2002 
__gmp_i
 = (
size
); \

2003 --
__gmp_i
 >= 0) \

2005 
__gmp_x
 = (
xp
)[
__gmp_i
]; \

2006 
__gmp_y
 = (
yp
)[
__gmp_i
]; \

2007 i‡(
__gmp_x
 !
__gmp_y
) \

2010 (
ªsu…
Ë(
__gmp_x
 > 
__gmp_y
 ? 1 : -1); \

2014 } 0)

	)

2017 #i‡
	`deföed
 (
__GMPN_COPY
Ë&& ! deföed (
__GMPN_COPY_REST
)

2018 
	#__GMPN_COPY_REST
(
d°
, 
§c
, 
size
, 
°¨t
) \

2022 
	`__GMPN_COPY
 ((
d°
)+(
°¨t
), (
§c
)+(°¨t), (
size
)-(start)); \

2023 } 0)

	)

2029 #i‡! 
	`deföed
 (
__GMPN_COPY_REST
)

2030 
	#__GMPN_COPY_REST
(
d°
, 
§c
, 
size
, 
°¨t
) \

2032 
mp_size_t
 
__gmp_j
; \

2037 
	`__GMP_CRAY_Pøgma
 ("_CRI ivdep"); \

2038 
__gmp_j
 = (
°¨t
); __gmp_j < (
size
); __gmp_j++) \

2039 (
d°
)[
__gmp_j
] = (
§c
)[__gmp_j]; \

2040 } 0)

	)

2047 #i‡! 
	`deföed
 (
__GMPN_COPY
)

2048 
	#__GMPN_COPY
(
d°
, 
§c
, 
size
Ë
	`__GMPN_COPY_REST
 (d°, src, size, 0)

	)

2052 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_add
)

2053 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_add
)

2054 
__GMP_EXTERN_INLINE


2056 
mp_limb_t


2057 
	`m≤_add
 (
mp_±r
 
__gmp_wp
, 
mp_§˝å
 
__gmp_xp
, 
mp_size_t
 
__gmp_xsize
, mp_§˝å 
__gmp_yp
, mp_size_à
__gmp_ysize
)

2059 
mp_limb_t
 
__gmp_c
;

2060 
	`__GMPN_ADD
 (
__gmp_c
, 
__gmp_wp
, 
__gmp_xp
, 
__gmp_xsize
, 
__gmp_yp
, 
__gmp_ysize
);

2061  
__gmp_c
;

2065 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_add_1
)

2066 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_add_1
)

2067 
__GMP_EXTERN_INLINE


2069 
mp_limb_t


2070 
	`m≤_add_1
 (
mp_±r
 
__gmp_d°
, 
mp_§˝å
 
__gmp_§c
, 
mp_size_t
 
__gmp_size
, 
mp_limb_t
 
__gmp_n
Ë
__GMP_NOTHROW


2072 
mp_limb_t
 
__gmp_c
;

2073 
	`__GMPN_ADD_1
 (
__gmp_c
, 
__gmp_d°
, 
__gmp_§c
, 
__gmp_size
, 
__gmp_n
);

2074  
__gmp_c
;

2078 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_cmp
)

2079 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_cmp
)

2080 
__GMP_EXTERN_INLINE


2083 
	`m≤_cmp
 (
mp_§˝å
 
__gmp_xp
, mp_§˝å 
__gmp_yp
, 
mp_size_t
 
__gmp_size
Ë
__GMP_NOTHROW


2085 
__gmp_ªsu…
;

2086 
	`__GMPN_CMP
 (
__gmp_ªsu…
, 
__gmp_xp
, 
__gmp_yp
, 
__gmp_size
);

2087  
__gmp_ªsu…
;

2091 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_sub
)

2092 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_sub
)

2093 
__GMP_EXTERN_INLINE


2095 
mp_limb_t


2096 
	`m≤_sub
 (
mp_±r
 
__gmp_wp
, 
mp_§˝å
 
__gmp_xp
, 
mp_size_t
 
__gmp_xsize
, mp_§˝å 
__gmp_yp
, mp_size_à
__gmp_ysize
)

2098 
mp_limb_t
 
__gmp_c
;

2099 
	`__GMPN_SUB
 (
__gmp_c
, 
__gmp_wp
, 
__gmp_xp
, 
__gmp_xsize
, 
__gmp_yp
, 
__gmp_ysize
);

2100  
__gmp_c
;

2104 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_sub_1
)

2105 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_sub_1
)

2106 
__GMP_EXTERN_INLINE


2108 
mp_limb_t


2109 
	`m≤_sub_1
 (
mp_±r
 
__gmp_d°
, 
mp_§˝å
 
__gmp_§c
, 
mp_size_t
 
__gmp_size
, 
mp_limb_t
 
__gmp_n
Ë
__GMP_NOTHROW


2111 
mp_limb_t
 
__gmp_c
;

2112 
	`__GMPN_SUB_1
 (
__gmp_c
, 
__gmp_d°
, 
__gmp_§c
, 
__gmp_size
, 
__gmp_n
);

2113  
__gmp_c
;

2117 #i‡
	`deföed
 (
__GMP_EXTERN_INLINE
Ë|| deföed (
__GMP_FORCE_m≤_√g_n
)

2118 #i‡! 
	`deföed
 (
__GMP_FORCE_m≤_√g_n
)

2119 
__GMP_EXTERN_INLINE


2121 
mp_limb_t


2122 
	`m≤_√g_n
 (
mp_±r
 
__gmp_Ω
, 
mp_§˝å
 
__gmp_up
, 
mp_size_t
 
__gmp_n
)

2124 
mp_limb_t
 
__gmp_ul
, 
__gmp_cy
;

2125 
__gmp_cy
 = 0;

2127 
__gmp_ul
 = *
__gmp_up
++;

2128 *
__gmp_Ω
++ = -
__gmp_ul
 - 
__gmp_cy
;

2129 
__gmp_cy
 |
__gmp_ul
 != 0;

2130 } --
__gmp_n
 != 0);

2131  
__gmp_cy
;

2135 #i‡
	`deföed
 (
__˝lu•lus
)

2136 
	}
}

2141 
	#mpz_sgn
(
Z
Ë((Z)->
_mp_size
 < 0 ? -1 : (Z)->_mp_sizê> 0)

	)

2142 
	#mpf_sgn
(
F
Ë((F)->
_mp_size
 < 0 ? -1 : (F)->_mp_sizê> 0)

	)

2143 
	#mpq_sgn
(
Q
Ë((Q)->
_mp_num
.
_mp_size
 < 0 ? -1 : (Q)->_mp_num._mp_sizê> 0)

	)

2146 #i‡
deföed
 (
__GNUC__
) && __GNUC__ >= 2

2147 
	#mpz_cmp_ui
(
Z
,
UI
) \

2148 (
	`__buûtö_c⁄°™t_p
 (
UI
) && (UI) == 0 \

2149 ? 
	`mpz_sgn
 (
Z
Ë: 
	`_mpz_cmp_ui
 (Z,
UI
))

	)

2150 
	#mpz_cmp_si
(
Z
,
SI
) \

2151 (
	`__buûtö_c⁄°™t_p
 (
SI
Ë&& (SIË=0 ? 
	`mpz_sgn
 (
Z
) \

2152 : 
	`__buûtö_c⁄°™t_p
 (
SI
) && (SI) > 0 \

2153 ? 
	`_mpz_cmp_ui
 (
Z
, 
	`__GMP_CAST
 (, 
SI
)) \

2154 : 
	`_mpz_cmp_si
 (
Z
,
SI
))

	)

2155 
	#mpq_cmp_ui
(
Q
,
NUI
,
DUI
) \

2156 (
	`__buûtö_c⁄°™t_p
 (
NUI
) && (NUI) == 0 \

2157 ? 
	`mpq_sgn
 (
Q
Ë: 
	`_mpq_cmp_ui
 (Q,
NUI
,
DUI
))

	)

2158 
	#mpq_cmp_si
(
q
,
n
,
d
) \

2159 (
	`__buûtö_c⁄°™t_p
 ((
n
) >= 0) && (n) >= 0 \

2160 ? 
	`mpq_cmp_ui
 (
q
, 
	`__GMP_CAST
 (, 
n
), 
d
) \

2161 : 
	`_mpq_cmp_si
 (
q
, 
n
, 
d
))

	)

2163 
	#mpz_cmp_ui
(
Z
,
UI
Ë
	`_mpz_cmp_ui
 (Z,UI)

	)

2164 
	#mpz_cmp_si
(
Z
,
UI
Ë
	`_mpz_cmp_si
 (Z,UI)

	)

2165 
	#mpq_cmp_ui
(
Q
,
NUI
,
DUI
Ë
	`_mpq_cmp_ui
 (Q,NUI,DUI)

	)

2166 
	#mpq_cmp_si
(
q
,
n
,
d
Ë
	`_mpq_cmp_si
(q,n,d)

	)

2173 
	#mpz_odd_p
(
z
Ë(((z)->
_mp_size
 !0Ë& 
	`__GMP_CAST
 (, (z)->
_mp_d
[0]))

	)

2174 
	#mpz_eví_p
(
z
Ë(! 
	`mpz_odd_p
 (z))

	)

2179 #ifde‡
__˝lu•lus


2180 
__GMP_DECLSPEC_XX
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam &, 
	gmpz_§˝å
);

2181 
__GMP_DECLSPEC_XX
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam &, 
	gmpq_§˝å
);

2182 
__GMP_DECLSPEC_XX
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam &, 
	gmpf_§˝å
);

2183 
__GMP_DECLSPEC_XX
 
	g°d
::
i°ªam
& 
›î©‹
>> (
°d
::i°ªam &, 
	gmpz_±r
);

2184 
__GMP_DECLSPEC_XX
 
	g°d
::
i°ªam
& 
›î©‹
>> (
°d
::i°ªam &, 
	gmpq_±r
);

2185 
__GMP_DECLSPEC_XX
 
	g°d
::
i°ªam
& 
›î©‹
>> (
°d
::i°ªam &, 
	gmpf_±r
);

2190 
	#m≤_divmod
(
qp
,
≈
,
nsize
,
dp
,
dsize
) \

2191 
	`m≤_divªm
 (
qp
, 
	`__GMP_CAST
 (
mp_size_t
, 0), 
≈
, 
nsize
, 
dp
, 
dsize
)

	)

2194 
	#mpz_mdiv
 
mpz_fdiv_q


	)

2195 
	#mpz_mdivmod
 
mpz_fdiv_qr


	)

2196 
	#mpz_mmod
 
mpz_fdiv_r


	)

2197 
	#mpz_mdiv_ui
 
mpz_fdiv_q_ui


	)

2198 
	#mpz_mdivmod_ui
(
q
,
r
,
n
,
d
) \

2199 (((
r
Ë=0Ë? 
	`mpz_fdiv_q_ui
 (
q
,
n
,
d
Ë: 
	`mpz_fdiv_qr_ui
 (q,r,n,d))

	)

2200 
	#mpz_mmod_ui
(
r
,
n
,
d
) \

2201 (((
r
Ë=0Ë? 
	`mpz_fdiv_ui
 (
n
,
d
Ë: 
	`mpz_fdiv_r_ui
 (r,n,d))

	)

2204 
	#mpz_div
 
mpz_fdiv_q


	)

2205 
	#mpz_divmod
 
mpz_fdiv_qr


	)

2206 
	#mpz_div_ui
 
mpz_fdiv_q_ui


	)

2207 
	#mpz_divmod_ui
 
mpz_fdiv_qr_ui


	)

2208 
	#mpz_div_2exp
 
mpz_fdiv_q_2exp


	)

2209 
	#mpz_mod_2exp
 
mpz_fdiv_r_2exp


	)

2213 
	gGMP_ERROR_NONE
 = 0,

2214 
	gGMP_ERROR_UNSUPPORTED_ARGUMENT
 = 1,

2215 
	gGMP_ERROR_DIVISION_BY_ZERO
 = 2,

2216 
	gGMP_ERROR_SQRT_OF_NEGATIVE
 = 4,

2217 
	gGMP_ERROR_INVALID_ARGUMENT
 = 8

2221 
	#__GMP_CC
 " i486-löux-gnu-gc¯-°d=gnu99"

	)

2222 
	#__GMP_CFLAGS
 "-WÆ»-g -D_REENTRANT -O3"

	)

2225 
	#__GNU_MP_VERSION
 4

	)

2226 
	#__GNU_MP_VERSION_MINOR
 3

	)

2227 
	#__GNU_MP_VERSION_PATCHLEVEL
 2

	)

2229 
	#__GMP_H__


	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libguile/hooks.h

3 #i‚de‡
SCM_HOOKS_H


4 
	#SCM_HOOKS_H


	)

25 
	~"libguûe/__scm.h
"

36 
	escm_t_c_hook_ty≥
 {

37 
	mSCM_C_HOOK_NORMAL
,

38 
	mSCM_C_HOOK_OR
,

39 
	mSCM_C_HOOK_AND


40 } 
	tscm_t_c_hook_ty≥
;

42 *(*
	tscm_t_c_hook_fun˘i⁄
Ë(*
	thook_d©a
,

43 *
	t‚_d©a
,

44 *
	td©a
);

46 
	sscm_t_c_hook_íåy
 {

47 
scm_t_c_hook_íåy
 *
	m√xt
;

48 
scm_t_c_hook_fun˘i⁄
 
	mfunc
;

49 *
	md©a
;

50 } 
	tscm_t_c_hook_íåy
;

52 
	sscm_t_c_hook
 {

53 
scm_t_c_hook_íåy
 *
	mfú°
;

54 
scm_t_c_hook_ty≥
 
	mty≥
;

55 *
	md©a
;

56 } 
	tscm_t_c_hook
;

58 
SCM_API
 
scm_c_hook_öô
 (
scm_t_c_hook
 *
hook
,

59 *
hook_d©a
,

60 
scm_t_c_hook_ty≥
 
ty≥
);

61 
SCM_API
 
scm_c_hook_add
 (
scm_t_c_hook
 *
hook
,

62 
scm_t_c_hook_fun˘i⁄
 
func
,

63 *
‚_d©a
,

64 
≠≥ndp
);

65 
SCM_API
 
scm_c_hook_ªmove
 (
scm_t_c_hook
 *
hook
,

66 
scm_t_c_hook_fun˘i⁄
 
func
,

67 *
‚_d©a
);

68 
SCM_API
 *
scm_c_hook_run
 (
scm_t_c_hook
 *
hook
, *
d©a
);

74 
SCM_API
 
scm_t_bôs
 
	gscm_tc16_hook
;

76 
	#SCM_HOOKP
(
x
Ë
	`SCM_SMOB_PREDICATE
 (
scm_tc16_hook
, x)

	)

77 
	#SCM_HOOK_ARITY
(
hook
Ë
	`SCM_SMOB_FLAGS
 (hook)

	)

78 
	#SCM_HOOK_PROCEDURES
(
hook
Ë
	`SCM_SMOB_OBJECT
 (hook)

	)

79 
	#SCM_SET_HOOK_PROCEDURES
(
hook
, 
¥ocs
Ë
	`SCM_SET_SMOB_OBJECT
 ((hook), (¥ocs))

	)

81 
SCM_API
 
SCM
 
scm_make_hook
 (SCM 
n_¨gs
);

82 
SCM_API
 
SCM
 
scm_hook_p
 (SCM 
x
);

83 
SCM_API
 
SCM
 
scm_hook_em±y_p
 (SCM 
hook
);

84 
SCM_API
 
SCM
 
scm_add_hook_x
 (SCM 
hook
, SCM 
thunk
, SCM 
≠≥ndp
);

85 
SCM_API
 
SCM
 
scm_ªmove_hook_x
 (SCM 
hook
, SCM 
thunk
);

86 
SCM_API
 
SCM
 
scm_ª£t_hook_x
 (SCM 
hook
);

87 
SCM_API
 
SCM
 
scm_run_hook
 (SCM 
hook
, SCM 
¨gs
);

88 
SCM_API
 
scm_c_run_hook
 (
SCM
 
hook
, SCM 
¨gs
);

89 
SCM_API
 
SCM
 
scm_hook_to_li°
 (SCM 
hook
);

90 
SCM_API
 
scm_öô_hooks
 ();

	@/usr/include/libguile/iselect.h

3 #i‚de‡
SCM_ISELECT_H


4 
	#SCM_ISELECT_H


	)

25 
	~"libguûe/__scm.h
"

28 
	~<sys/ty≥s.h
>

30 #i‡
SCM_HAVE_SYS_SELECT_H


31 
	~<sys/£À˘.h
>

34 #i‡
SCM_HAVE_WINSOCK2_H


35 
	~<wösock2.h
>

38 #ifde‡
FD_SET


40 
	#SELECT_TYPE
 
fd_£t


	)

41 
	#SELECT_SET_SIZE
 
FD_SETSIZE


	)

46 
	#SELECT_SET_SIZE
 32

	)

47 
	#SELECT_TYPE
 

	)

48 
	#FD_SET
(
n
, 
p
Ë(*’Ë|(1 << (n)))

	)

49 
	#FD_CLR
(
n
, 
p
Ë(*’Ë&~(1 << (n)))

	)

50 
	#FD_ISSET
(
n
, 
p
Ë(*’Ë& (1 << (n)))

	)

51 
	#FD_ZERO
(
p
Ë(*’Ë0)

	)

55 
SCM_API
 
scm_°d_£À˘
 (
fds
,

56 
SELECT_TYPE
 *
rfds
,

57 
SELECT_TYPE
 *
wfds
,

58 
SELECT_TYPE
 *
efds
,

59 
timevÆ
 *
timeout
);

	@/usr/include/libguile/null-threads.h

3 #i‚de‡
SCM_NULL_THREADS_H


4 
	#SCM_NULL_THREADS_H


	)

35 
	~<î∫o.h
>

39 
	#scm_i_±hªad_t
 

	)

40 
	#scm_i_±hªad_£lf
(Ë0

	)

41 
	#scm_i_±hªad_¸óã
(
t
,
a
,
f
,
d
Ë(*—)=0, ()(f), 
ENOSYS
)

	)

42 
	#scm_i_±hªad_dëach
(
t
Ëdÿ{ } 0)

	)

43 
	#scm_i_±hªad_exô
(
v
Ë
	`exô
(0)

	)

44 
	#scm_i_sched_yõld
(Ë0

	)

48 
	#scm_i_±hªad_sigmask
 
sig¥ocmask


	)

52 
	#SCM_I_PTHREAD_MUTEX_INITIALIZER
 0

	)

53 
	#scm_i_±hªad_muãx_t
 

	)

54 
	#scm_i_±hªad_muãx_öô
(
m
,
a
Ë(*(mË0)

	)

55 
	#scm_i_±hªad_muãx_de°roy
(
m
Ëdÿ{ ()(m); } 0)

	)

56 
	#scm_i_±hªad_muãx_åylock
(
m
Ë((*(m))++)

	)

57 
	#scm_i_±hªad_muãx_lock
(
m
Ë((*(m))++)

	)

58 
	#scm_i_±hªad_muãx_u∆ock
(
m
Ë((*(m))--)

	)

59 
	#scm_i_±hªad_muãx©å_ªcursive
 0

	)

63 
	#SCM_I_PTHREAD_COND_INITIALIZER
 0

	)

64 
	#scm_i_±hªad_c⁄d_t
 

	)

65 
	#scm_i_±hªad_c⁄d_öô
(
c
,
a
Ë(*(cË0)

	)

66 
	#scm_i_±hªad_c⁄d_de°roy
(
c
Ëdÿ{ ()(c); } 0)

	)

67 
	#scm_i_±hªad_c⁄d_sig«l
(
c
Ë(*(cË1)

	)

68 
	#scm_i_±hªad_c⁄d_brﬂdˇ°
(
c
Ë(*(cË1)

	)

69 
	#scm_i_±hªad_c⁄d_waô
(
c
,
m
Ë(
	`ab‹t
(), 0)

	)

70 
	#scm_i_±hªad_c⁄d_timedwaô
(
c
,
m
,
t
Ë(
	`ab‹t
(), 0)

	)

74 
	#scm_i_±hªad_⁄˚_t
 

	)

75 
	#SCM_I_PTHREAD_ONCE_INIT
 0

	)

76 
	#scm_i_±hªad_⁄˚
(
o
,
f
) do { \

77 if(!*(
o
)Ë{ *(o)=1; 
	`f
 (); } \

78 } 0)

	)

82 
	sscm_i_±hªad_key_t
 {

83 
scm_i_±hªad_key_t
 *
	m√xt
;

84 *
	mvÆue
;

85 (*
	mde°r_func
) (*);

86 } 
	tscm_i_±hªad_key_t
;

88 
SCM_API
 
scm_i_±hªad_key_¸óã
 (
scm_i_±hªad_key_t
 *
key
,

89 (*
de°r_func
) (*));

90 
	#scm_i_±hªad_£t•ecific
(
k
,
p
Ë((k).
vÆue
 = (p))

	)

91 
	#scm_i_±hªad_gë•ecific
(
k
Ë((k).
vÆue
)

	)

95 
	#scm_i_scm_±hªad_muãx_lock
 
scm_i_±hªad_muãx_lock


	)

96 
	#scm_i_dynwöd_±hªad_muãx_lock
 
scm_i_±hªad_muãx_lock


	)

97 
	#scm_i_scm_±hªad_c⁄d_waô
 
scm_i_±hªad_c⁄d_waô


	)

98 
	#scm_i_scm_±hªad_c⁄d_timedwaô
 
scm_i_±hªad_c⁄d_timedwaô


	)

	@/usr/include/libguile/pthread-threads.h

3 #i‚de‡
SCM_PTHREADS_THREADS_H


4 
	#SCM_PTHREADS_THREADS_H


	)

28 
	~<±hªad.h
>

29 
	~<sched.h
>

33 
	#scm_i_±hªad_t
 
±hªad_t


	)

34 
	#scm_i_±hªad_£lf
 
±hªad_£lf


	)

35 
	#scm_i_±hªad_¸óã
 
±hªad_¸óã


	)

36 
	#scm_i_±hªad_dëach
 
±hªad_dëach


	)

37 
	#scm_i_±hªad_exô
 
±hªad_exô


	)

38 
	#scm_i_sched_yõld
 
sched_yõld


	)

42 
	#scm_i_±hªad_sigmask
 
±hªad_sigmask


	)

46 #i‡
SCM_NEED_BRACES_ON_PTHREAD_MUTEX_INITIALIZER


47 
	#SCM_I_PTHREAD_MUTEX_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
 }

	)

49 
	#SCM_I_PTHREAD_MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

51 
	#scm_i_±hªad_muãx_t
 
±hªad_muãx_t


	)

52 
	#scm_i_±hªad_muãx_öô
 
±hªad_muãx_öô


	)

53 
	#scm_i_±hªad_muãx_de°roy
 
±hªad_muãx_de°roy


	)

54 
	#scm_i_±hªad_muãx_åylock
 
±hªad_muãx_åylock


	)

55 
	#scm_i_±hªad_muãx_lock
 
±hªad_muãx_lock


	)

56 
	#scm_i_±hªad_muãx_u∆ock
 
±hªad_muãx_u∆ock


	)

57 
±hªad_muãx©å_t
 
scm_i_±hªad_muãx©å_ªcursive
[1];

61 
	#SCM_I_PTHREAD_COND_INITIALIZER
 
PTHREAD_COND_INITIALIZER


	)

62 
	#scm_i_±hªad_c⁄d_t
 
±hªad_c⁄d_t


	)

63 
	#scm_i_±hªad_c⁄d_öô
 
±hªad_c⁄d_öô


	)

64 
	#scm_i_±hªad_c⁄d_de°roy
 
±hªad_c⁄d_de°roy


	)

65 
	#scm_i_±hªad_c⁄d_sig«l
 
±hªad_c⁄d_sig«l


	)

66 
	#scm_i_±hªad_c⁄d_brﬂdˇ°
 
±hªad_c⁄d_brﬂdˇ°


	)

67 
	#scm_i_±hªad_c⁄d_waô
 
±hªad_c⁄d_waô


	)

68 
	#scm_i_±hªad_c⁄d_timedwaô
 
±hªad_c⁄d_timedwaô


	)

72 
	#scm_i_±hªad_⁄˚_t
 
±hªad_⁄˚_t


	)

73 
	#scm_i_±hªad_⁄˚
 
±hªad_⁄˚


	)

74 #i‡
SCM_NEED_BRACES_ON_PTHREAD_ONCE_INIT


75 
	#SCM_I_PTHREAD_ONCE_INIT
 { 
PTHREAD_ONCE_INIT
 }

	)

77 
	#SCM_I_PTHREAD_ONCE_INIT
 
PTHREAD_ONCE_INIT


	)

82 
	#scm_i_±hªad_key_t
 
±hªad_key_t


	)

83 
	#scm_i_±hªad_key_¸óã
 
±hªad_key_¸óã


	)

84 
	#scm_i_±hªad_£t•ecific
 
±hªad_£t•ecific


	)

85 
	#scm_i_±hªad_gë•ecific
 
±hªad_gë•ecific


	)

89 
	#scm_i_scm_±hªad_muãx_lock
 
scm_±hªad_muãx_lock


	)

90 
	#scm_i_dynwöd_±hªad_muãx_lock
 
scm_dynwöd_±hªad_muãx_lock


	)

91 
	#scm_i_scm_±hªad_c⁄d_waô
 
scm_±hªad_c⁄d_waô


	)

92 
	#scm_i_scm_±hªad_c⁄d_timedwaô
 
scm_±hªad_c⁄d_timedwaô


	)

	@/usr/include/libguile/scmconfig.h

19 #i‚de‡
SCM_SCMCONFIG_H


20 
	#SCM_SCMCONFIG_H


	)

23 
	~<°döt.h
>

24 
	~<limôs.h
>

25 
	~<sys/time.h
>

26 
	~<time.h
>

28 
	#SCM_HAVE_STDC_HEADERS
 1

	)

29 
	~<°dlib.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<°ddef.h
>

33 
	#SCM_HAVE_SYS_SELECT_H
 1

	)

34 
	#SCM_HAVE_FLOATINGPOINT_H
 0

	)

35 
	#SCM_HAVE_IEEEFP_H
 0

	)

36 
	#SCM_HAVE_NAN_H
 0

	)

37 
	#SCM_HAVE_WINSOCK2_H
 0

	)

47 
	#SCM_ENABLE_DISCOURAGED
 1

	)

51 
	#SCM_ENABLE_DEPRECATED
 1

	)

54 
	#SCM_ENABLE_ELISP
 1

	)

57 
	#SCM_STACK_GROWS_UP
 0

	)

61 
	#SCM_C_INLINE
 
ölöe


	)

65 
	#SCM_SIZEOF_CHAR
 1

	)

66 
	#SCM_SIZEOF_UNSIGNED_CHAR
 1

	)

67 
	#SCM_SIZEOF_SHORT
 2

	)

68 
	#SCM_SIZEOF_UNSIGNED_SHORT
 2

	)

69 
	#SCM_SIZEOF_LONG
 4

	)

70 
	#SCM_SIZEOF_UNSIGNED_LONG
 4

	)

71 
	#SCM_SIZEOF_INT
 4

	)

72 
	#SCM_SIZEOF_UNSIGNED_INT
 4

	)

73 
	#SCM_SIZEOF_SIZE_T
 4

	)

77 
	#SCM_SIZEOF_LONG_LONG
 8

	)

78 
	#SCM_SIZEOF_UNSIGNED_LONG_LONG
 8

	)

82 #i‡(
SCM_ENABLE_DEPRECATED
 == 1)

83 
	tl⁄g_l⁄g
;

84 
	tul⁄g_l⁄g
;

88 
öt8_t
 
	tscm_t_öt8
;

89 
uöt8_t
 
	tscm_t_uöt8
;

90 
öt16_t
 
	tscm_t_öt16
;

91 
uöt16_t
 
	tscm_t_uöt16
;

92 
öt32_t
 
	tscm_t_öt32
;

93 
uöt32_t
 
	tscm_t_uöt32
;

94 
ötmax_t
 
	tscm_t_ötmax
;

95 
uötmax_t
 
	tscm_t_uötmax
;

96 
	#SCM_SIZEOF_INTMAX
 8

	)

101 
	#SCM_HAVE_T_INT64
 1

	)

102 
öt64_t
 
	tscm_t_öt64
;

107 
	#SCM_HAVE_T_UINT64
 1

	)

108 
uöt64_t
 
	tscm_t_uöt64
;

112 
±rdiff_t
 
	tscm_t_±rdiff
;

113 
	#SCM_SIZEOF_SCM_T_PTRDIFF
 4

	)

116 
	#SCM_SIZEOF_INTPTR_T
 4

	)

118 
	#SCM_SIZEOF_UINTPTR_T
 4

	)

121 
time•ec
 
	tscm_t_time•ec
;

125 
	#SCM_USE_PTHREAD_THREADS
 1

	)

127 
	#SCM_USE_NULL_THREADS
 0

	)

129 
	#SCM_NEED_BRACES_ON_PTHREAD_ONCE_INIT
 0

	)

132 
	#SCM_NEED_BRACES_ON_PTHREAD_MUTEX_INITIALIZER
 0

	)

137 
	#SCM_HAVE_STRUCT_DIRENT64
 1

	)

139 
	#SCM_HAVE_READDIR64_R
 1

	)

141 #i‡
SCM_ENABLE_DEPRECATED
 == 1

142 
	#USE_THREADS
 1

	)

143 
	#GUILE_ISELECT
 1

	)

144 
	#READER_EXTENSIONS
 1

	)

145 
	#DEBUG_EXTENSIONS
 1

	)

146 
	#DYNAMIC_LINKING
 1

	)

149 
	#SCM_HAVE_ARRAYS
 1

	)

	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/ucontext.h

21 #i‚de‡
_UCONTEXT_H


22 
	#_UCONTEXT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<sys/uc⁄ãxt.h
>

29 
__BEGIN_DECLS


32 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROW
;

35 
	$£tc⁄ãxt
 (
__c⁄°
 
uc⁄ãxt_t
 *
__u˝
Ë
__THROW
;

39 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

40 
__c⁄°
 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROW
;

48 
	`makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

49 
__¨gc
, ...Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

20 #i‚de‡
_SETJMP_H


25 #ifde‡
__REDIRECT_NTH


26 
__REDIRECT_NTH
 (
l⁄gjmp
,

27 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

28 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

29 
__REDIRECT_NTH
 (
_l⁄gjmp
,

30 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

31 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

32 
__REDIRECT_NTH
 (
sigl⁄gjmp
,

33 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

34 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

36 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

37 
__THROW
 
__©åibuã__
 ((
__n‹ëu∫__
));

38 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

40 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
211
5863
config.h
graphics.h
grtext.h
guile-libgraph.c
libgraph.c
polygon.c
polygon.h
sample.c
shapes.c
shapes.h
text.c
/usr/include/SDL/SDL.h
/usr/include/SDL/SDL_image.h
/usr/include/ctype.h
/usr/include/fcntl.h
/usr/include/libguile.h
/usr/include/math.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/gmp.h
/usr/include/libguile/__scm.h
/usr/include/libguile/alist.h
/usr/include/libguile/arbiters.h
/usr/include/libguile/async.h
/usr/include/libguile/backtrace.h
/usr/include/libguile/boolean.h
/usr/include/libguile/chars.h
/usr/include/libguile/continuations.h
/usr/include/libguile/debug.h
/usr/include/libguile/deprecated.h
/usr/include/libguile/discouraged.h
/usr/include/libguile/dynl.h
/usr/include/libguile/dynwind.h
/usr/include/libguile/eq.h
/usr/include/libguile/error.h
/usr/include/libguile/eval.h
/usr/include/libguile/evalext.h
/usr/include/libguile/extensions.h
/usr/include/libguile/feature.h
/usr/include/libguile/filesys.h
/usr/include/libguile/fluids.h
/usr/include/libguile/fports.h
/usr/include/libguile/futures.h
/usr/include/libguile/gc.h
/usr/include/libguile/gdbint.h
/usr/include/libguile/goops.h
/usr/include/libguile/gsubr.h
/usr/include/libguile/guardians.h
/usr/include/libguile/hash.h
/usr/include/libguile/hashtab.h
/usr/include/libguile/init.h
/usr/include/libguile/inline.h
/usr/include/libguile/ioext.h
/usr/include/libguile/keywords.h
/usr/include/libguile/list.h
/usr/include/libguile/load.h
/usr/include/libguile/macros.h
/usr/include/libguile/mallocs.h
/usr/include/libguile/modules.h
/usr/include/libguile/net_db.h
/usr/include/libguile/numbers.h
/usr/include/libguile/objects.h
/usr/include/libguile/objprop.h
/usr/include/libguile/options.h
/usr/include/libguile/pairs.h
/usr/include/libguile/ports.h
/usr/include/libguile/posix.h
/usr/include/libguile/print.h
/usr/include/libguile/procprop.h
/usr/include/libguile/procs.h
/usr/include/libguile/properties.h
/usr/include/libguile/ramap.h
/usr/include/libguile/random.h
/usr/include/libguile/rdelim.h
/usr/include/libguile/read.h
/usr/include/libguile/root.h
/usr/include/libguile/rw.h
/usr/include/libguile/scmsigs.h
/usr/include/libguile/script.h
/usr/include/libguile/simpos.h
/usr/include/libguile/smob.h
/usr/include/libguile/snarf.h
/usr/include/libguile/socket.h
/usr/include/libguile/sort.h
/usr/include/libguile/srcprop.h
/usr/include/libguile/srfi-13.h
/usr/include/libguile/srfi-14.h
/usr/include/libguile/srfi-4.h
/usr/include/libguile/stackchk.h
/usr/include/libguile/stacks.h
/usr/include/libguile/stime.h
/usr/include/libguile/strings.h
/usr/include/libguile/strorder.h
/usr/include/libguile/strports.h
/usr/include/libguile/struct.h
/usr/include/libguile/symbols.h
/usr/include/libguile/tags.h
/usr/include/libguile/threads.h
/usr/include/libguile/throw.h
/usr/include/libguile/unif.h
/usr/include/libguile/validate.h
/usr/include/libguile/values.h
/usr/include/libguile/variable.h
/usr/include/libguile/vectors.h
/usr/include/libguile/version.h
/usr/include/libguile/vports.h
/usr/include/libguile/weaks.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gmp-i386.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/libguile/hooks.h
/usr/include/libguile/iselect.h
/usr/include/libguile/null-threads.h
/usr/include/libguile/pthread-threads.h
/usr/include/libguile/scmconfig.h
/usr/include/setjmp.h
/usr/include/sys/cdefs.h
/usr/include/ucontext.h
/usr/include/bits/libc-lock.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/errno.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/limits.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/sys/time.h
/usr/include/wchar.h
/usr/include/bits/errno.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/sched.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/bits/local_lim.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/linux/limits.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
